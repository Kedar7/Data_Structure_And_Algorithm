1
00:00:00,150 --> 00:00:01,250
Hey welcome back.

2
00:00:01,260 --> 00:00:05,880
So we're still talking about searching algorithms but now we're talking about a different type which

3
00:00:05,880 --> 00:00:09,840
has to do with searching for substrings in a larger string.

4
00:00:09,840 --> 00:00:11,520
So there are two that we're going to focus on.

5
00:00:11,510 --> 00:00:16,140
And the first one is that naive string search I don't think there's actually a name for this.

6
00:00:16,140 --> 00:00:19,870
This is just the most basic common way of doing this problem.

7
00:00:19,980 --> 00:00:22,140
And then we're going to see a better implementation.

8
00:00:22,140 --> 00:00:26,100
That is definitely a little more complicated in the next video or two videos from now.

9
00:00:26,490 --> 00:00:28,400
But we're going to start with the basic solution.

10
00:00:28,440 --> 00:00:34,680
So imagine that you want to count the number of times a smaller string appears in a longer string.

11
00:00:34,860 --> 00:00:38,290
A straightforward approach involves checking pairs of characters individually.

12
00:00:38,290 --> 00:00:40,140
Let's imagine we have this string here.

13
00:00:40,140 --> 00:00:42,540
Harold said haha in Hamburg.

14
00:00:43,020 --> 00:00:49,250
So if we were searching for just a single character like I don't know the letter II for example that's

15
00:00:49,260 --> 00:00:50,070
very easy.

16
00:00:50,160 --> 00:00:51,270
That's basically what we've done.

17
00:00:51,270 --> 00:00:52,580
You just do a linear search.

18
00:00:52,740 --> 00:00:54,270
You could treat this as an array.

19
00:00:54,290 --> 00:00:54,880
Right.

20
00:00:54,950 --> 00:00:59,520
Each check is this and I hope is this and why is this and why is this night over and over until you

21
00:00:59,520 --> 00:01:01,500
find a night or until you hit the end.

22
00:01:01,560 --> 00:01:02,380
So that's nothing new.

23
00:01:02,380 --> 00:01:07,320
If we're searching for a single character we can use what we've already done instead of accessing items

24
00:01:07,320 --> 00:01:10,530
in an array we access using an index in the string.

25
00:01:10,530 --> 00:01:12,440
Just like this right with zero.

26
00:01:12,480 --> 00:01:14,880
And I would check 1 and it would check too.

27
00:01:14,940 --> 00:01:23,400
But if you're checking for a pattern for example I want to see if H A ha ha ha is in there that takes

28
00:01:23,400 --> 00:01:28,200
some more work because we're no longer just checking a single character against a single character.

29
00:01:28,440 --> 00:01:29,640
We're checking.

30
00:01:29,650 --> 00:01:33,500
OK let's walk through the string and it looks like we have an H that to match.

31
00:01:33,510 --> 00:01:35,220
And then we have an A O that's a match.

32
00:01:35,220 --> 00:01:37,280
And then in our op not a match anymore.

33
00:01:37,300 --> 00:01:39,830
So then we start over and we look for an H again.

34
00:01:39,960 --> 00:01:41,610
So I actually have a little diagram here.

35
00:01:41,610 --> 00:01:47,010
Imagine that this is our long string we're searching through and we're trying to find o m g inside of

36
00:01:47,010 --> 00:01:47,660
this.

37
00:01:47,670 --> 00:01:53,340
So the simplest approach is going to involve basically if we put them next to one another we're going

38
00:01:53,340 --> 00:01:59,060
to start by walking one character at a time and we're just going to check is this w here equal to the

39
00:01:59,070 --> 00:02:01,380
0 at the beginning or are these two characters the same.

40
00:02:01,410 --> 00:02:01,910
No.

41
00:02:02,120 --> 00:02:02,370
OK.

42
00:02:02,370 --> 00:02:03,450
Move on.

43
00:02:03,740 --> 00:02:04,710
Now we have a match.

44
00:02:04,740 --> 00:02:05,050
Oh.

45
00:02:05,100 --> 00:02:05,550
Oh.

46
00:02:05,700 --> 00:02:07,560
So now we move on to the second character.

47
00:02:07,560 --> 00:02:09,200
We're looking for an M.

48
00:02:09,300 --> 00:02:10,290
We don't find one.

49
00:02:10,350 --> 00:02:13,130
So we move on w no we don't find that.

50
00:02:13,130 --> 00:02:14,400
So we move on again.

51
00:02:14,490 --> 00:02:15,090
OK.

52
00:02:15,210 --> 00:02:17,340
Oh and oh that's a match.

53
00:02:17,340 --> 00:02:18,590
Now we move on to the next character.

54
00:02:18,600 --> 00:02:19,470
MNM.

55
00:02:19,620 --> 00:02:20,700
That's good.

56
00:02:20,700 --> 00:02:21,860
G and G.

57
00:02:22,170 --> 00:02:25,350
And we hit the end of our short string we found a match.

58
00:02:25,350 --> 00:02:29,640
So now we we add a counter we increment something to keep track of how many matches we found.

59
00:02:29,700 --> 00:02:31,380
We found one so far.

60
00:02:31,380 --> 00:02:32,830
Now we move on to the M.

61
00:02:32,850 --> 00:02:38,100
So basically we do it for every single character here and we start at the beginning of our smaller string

62
00:02:38,100 --> 00:02:40,840
and check it against every individual character in the longer string.

63
00:02:40,860 --> 00:02:42,840
So that's not a match that's of a match.

64
00:02:42,840 --> 00:02:44,160
That's not a match.

65
00:02:44,160 --> 00:02:45,700
Now we have a match at the O.

66
00:02:45,720 --> 00:02:51,610
Then we check the next character m check which still match G and we increment.

67
00:02:51,690 --> 00:02:54,680
I don't know why this when I made this side I just checked.

68
00:02:54,690 --> 00:02:56,350
These are the same size.

69
00:02:56,590 --> 00:02:59,610
Somehow when it's there's some weird bug when it's being displayed.

70
00:02:59,610 --> 00:03:01,050
But these should be count evenly.

71
00:03:01,050 --> 00:03:04,540
There's two matches and that's what we want to do.

72
00:03:04,560 --> 00:03:07,080
We want to try and implement this naive string search.

73
00:03:07,080 --> 00:03:11,820
So there is a better way of doing this but it involves a lot more code that we'll see in two videos

74
00:03:11,820 --> 00:03:13,080
from now.

75
00:03:13,110 --> 00:03:18,120
And it has a much fancier name but this approach is one that just takes a couple of lines.

76
00:03:18,150 --> 00:03:19,040
A couple of loops.

77
00:03:19,200 --> 00:03:20,700
Let's walk through the pseudo code.

78
00:03:20,970 --> 00:03:25,800
So the idea again is for you to try and implement this on your own using the pseudo code.

79
00:03:25,950 --> 00:03:29,970
If you have the time or willpower or energy here's the steps.

80
00:03:29,970 --> 00:03:31,500
So loop over the longer string.

81
00:03:31,560 --> 00:03:36,930
So I guess I didn't say define a function this time but to find a function that takes two strings and

82
00:03:36,930 --> 00:03:38,490
just call it maybe string search.

83
00:03:38,490 --> 00:03:42,100
It takes the larger string and then the pattern that we're looking for.

84
00:03:42,660 --> 00:03:48,390
And then you loop over each character in the longer string and then we have another loop over the shorter

85
00:03:48,390 --> 00:03:48,970
string.

86
00:03:49,350 --> 00:03:50,850
And then we just check.

87
00:03:50,850 --> 00:03:55,050
Basically if the characters don't match break out of the inner loop so stop.

88
00:03:55,290 --> 00:03:56,370
And if they do match.

89
00:03:56,390 --> 00:04:01,950
If we find a match for 0 for example and O M G then you move onto the next character keep going until

90
00:04:01,950 --> 00:04:03,440
you hit the end of the short string.

91
00:04:03,450 --> 00:04:07,620
And if you do hit the end of that short string that means that you find a match.

92
00:04:07,620 --> 00:04:13,020
So if you complete the loop find a match increment the count of matches and then return the count at

93
00:04:13,020 --> 00:04:13,760
the end.

94
00:04:14,130 --> 00:04:18,600
And so if Count should start at zero we don't need to have any special error handling if there are no

95
00:04:18,750 --> 00:04:20,850
matches count stays at zero.

96
00:04:20,850 --> 00:04:22,420
So just return the count at the end.

97
00:04:22,620 --> 00:04:24,150
So hopefully that makes sense.

98
00:04:24,240 --> 00:04:28,710
Loop over the longer string inside of that loop a nested loop over the shorter string.

99
00:04:28,710 --> 00:04:33,990
And then if you make it to the end of that shorter string and you haven't broken out yet then add one

100
00:04:34,110 --> 00:04:35,010
to the counter.

101
00:04:35,330 --> 00:04:38,210
OK so give it a shot in the next video we'll have a solution.

