WEBVTT

00:00.150 --> 00:02.100
Hey this video will be super quick.

00:02.100 --> 00:04.860
We're just going to talk about the built in our radar sort.

00:05.070 --> 00:08.620
So in javascript every array has a built in way to sort it.

00:08.880 --> 00:09.770
Yes it does.

00:09.820 --> 00:14.010
Thank you slides but it doesn't always work how you would expect it should.

00:14.010 --> 00:16.530
For example take this array of strings.

00:16.770 --> 00:21.920
We sort it and I think this makes sense if we get the result that you would probably expect there's

00:21.990 --> 00:23.290
sorted alphabetically.

00:23.340 --> 00:28.150
So a for algorithms and C and D for data structures and then steal.

00:28.290 --> 00:34.360
That makes sense I think to go from a down to Z or up to whatever we're going from A-Z.

00:34.830 --> 00:42.840
Then if we do the same thing with numbers 6 for 15 and 10 and you sort it what we get doesn't really

00:42.840 --> 00:44.250
make sense.

00:44.280 --> 00:47.860
So it starts with 10 and then 15 then for then six.

00:47.910 --> 00:53.550
So it would be one thing if it was just the opposite order like if it was descending instead of ascending

00:53.910 --> 00:55.800
greatest to lowest instead of lowest to highest.

00:55.890 --> 01:01.470
But it's not even ordered in any discernible way that we that we can make sense of no numeric order.

01:01.470 --> 01:07.880
What's actually happening as if we read the arrays sort documentation on MT-NW is that here we go to

01:07.890 --> 01:12.760
default sort order is according to string Unicode code points.

01:12.930 --> 01:15.620
So there's this thing called Unicode use to represent strings.

01:15.630 --> 01:20.370
And what happens is that every item that array is converted to a string.

01:20.520 --> 01:24.930
And then the Unicode value of that is taken and then they're sorted.

01:24.930 --> 01:29.940
So it's very bizarre and it's almost never what you want unless you're working with strings to start.

01:29.940 --> 01:32.090
But even then it's not always what you want.

01:32.160 --> 01:33.960
So how does it actually work.

01:33.960 --> 01:35.970
How do we use it in the real world.

01:36.030 --> 01:37.220
That's only what happens.

01:37.230 --> 01:40.320
That's the behavior when you don't pass anything and you just do dot sort.

01:40.320 --> 01:41.690
With empty parents.

01:41.910 --> 01:46.730
But there's this whole other thing we can do where we can actually specify how it should sort.

01:46.730 --> 01:49.600
What property it should sort by what to compare.

01:49.650 --> 01:56.520
So it accepts an optional compared or compare store function and we can use this to tell javascript

01:56.520 --> 01:57.670
how we want it to sort.

01:57.930 --> 02:03.780
So basically the structure that we write this function is it takes two items which will call a and b.

02:03.930 --> 02:08.640
And we tell Javascript the sort order to make based off of what we return.

02:08.670 --> 02:10.770
So if we return a negative number.

02:10.770 --> 02:15.990
So if we have two elements again a and b Javascript can call this function every time it's comparing

02:15.990 --> 02:16.890
two elements.

02:16.920 --> 02:22.680
If this function returns a negative number then javascript will decide that a comes before B if it returns

02:22.680 --> 02:24.640
a positive number then it's the other way around.

02:24.840 --> 02:26.490
A comes after B.

02:26.850 --> 02:32.820
And if we return 0 javascript treats and B is the same and just sorts them basically together it doesn't

02:32.820 --> 02:33.590
matter.

02:34.020 --> 02:39.570
So here's an example number compair is what we called our competitor function.

02:39.690 --> 02:43.290
And all we're doing is returning one minus two.

02:43.680 --> 02:45.490
So javascript gets this.

02:45.510 --> 02:47.160
Remember this is what comes first.

02:47.160 --> 02:48.830
This is what comes second.

02:48.880 --> 02:54.990
If this returns a negative value then number one comes first before number two if it returns a positive

02:54.990 --> 02:59.030
value then number two comes first and then 1.

02:59.040 --> 03:05.600
So when we do this you can see that it's now sorting things appropriately in ascending numeric order.

03:05.610 --> 03:11.340
So if we get four and then 6 and then 10 and then 15 and have it over in a snippet here.

03:11.340 --> 03:12.930
So if I run a little big.

03:12.930 --> 03:13.620
There we go.

03:13.620 --> 03:18.070
So if I run this now you'll see that we get 4 6 10 15.

03:18.070 --> 03:27.100
But if I just change this order so numb to minus 1 for example we get 15 10 6 and 4.

03:27.240 --> 03:32.070
So that's sorting just by numbers which that's what you would do if you're trying to serve something

03:32.070 --> 03:34.350
numerically rather than working.

03:34.500 --> 03:40.140
You know the Unicode characters and worrying about all that we can also do something like this to sort

03:40.140 --> 03:43.910
by the length of a string rather than alphabetically.

03:44.040 --> 03:49.320
We want to sort from whatever the shortest string is so cold up and hold the longest string which would

03:49.320 --> 03:50.530
be data structures.

03:50.880 --> 03:56.130
So it would do the same thing string one of length minus string to downlink and we call this compared

03:56.130 --> 03:59.560
by line but remember it doesn't matter what we call this it's just a random function.

03:59.670 --> 04:01.380
But it needs to except these two arguments.

04:01.380 --> 04:06.130
And then we use them in here and we return a negative number a positive number or zero.

04:06.570 --> 04:07.830
So what do we get.

04:07.830 --> 04:08.530
There we go.

04:08.850 --> 04:13.140
And if we started around change the order of string to adult length might a string one length.

04:13.140 --> 04:14.730
Now we have the other order.

04:15.090 --> 04:20.520
So this is how we can define our own basic sorts using the built javascript's sort method.

04:20.520 --> 04:24.380
Now I just showed that to you so that you know that it exists and it's an option.

04:24.390 --> 04:28.860
Now what we'll focus on in the rest of this section is writing our own sorting algorithms that actually

04:28.860 --> 04:30.510
do the comparisons.

04:30.510 --> 04:31.470
That's the hard part.

04:31.710 --> 04:32.820
And so that's coming up next.

04:32.820 --> 04:35.660
We're going to kick it off with a fan favorite.

04:35.670 --> 04:38.880
It's not a fan favorite but it has a fun name bubble sort.

04:38.910 --> 04:40.440
See you in the next video.
