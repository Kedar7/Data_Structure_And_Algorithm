WEBVTT

00:00.240 --> 00:01.370
Hey welcome back.

00:01.470 --> 00:03.930
In this video I'm going to introduce a selection sort.

00:03.930 --> 00:05.660
Our next sorting algorithm.

00:05.880 --> 00:11.640
So I wrote down that it's similar to bubble sort but instead of first placing the large values into

00:11.640 --> 00:17.320
a sorted position at the end of the array we place small values into a sort of position one at a time.

00:17.340 --> 00:18.900
So we're building the array.

00:19.050 --> 00:25.800
We're still moving from the beginning to the end but the actual sorted data is accumulating at the beginning.

00:25.800 --> 00:28.260
So let me give you an example of how it works.

00:28.320 --> 00:31.570
We go through Here's a single pass so we have this array.

00:31.710 --> 00:36.210
We start at the beginning and what we're going to do is go all the way through looking for the minimum

00:36.210 --> 00:39.000
value and then we're going to put that at the front.

00:39.660 --> 00:43.460
So for example we start with five and three which one is the smallest while three.

00:43.530 --> 00:48.330
So three is going to be our minimum for now which is what the Green means.

00:48.330 --> 00:52.310
But then we now compared to four which is a minimum.

00:52.410 --> 00:54.300
It's still three.

00:54.360 --> 00:57.900
So now we compare it to 1 which is a minimum.

00:57.900 --> 00:59.360
Well now it's 1.

00:59.500 --> 01:00.890
So you can see one is great now.

01:00.900 --> 01:02.080
So that's our new men.

01:02.130 --> 01:05.730
Now we compare one in two which one is the minimum one is.

01:05.730 --> 01:12.600
So what we do now that we've hit the end is we swap we take whatever the minimum element was with whatever

01:12.600 --> 01:14.290
we started with.

01:14.370 --> 01:19.260
And so now we've put the smallest item in the array at the beginning compared to bubble sort.

01:19.260 --> 01:24.600
Where we go through and we swap swap potentially to push the largest element the greatest value to the

01:24.600 --> 01:27.400
very end selection sort builds it the other way.

01:27.540 --> 01:31.560
We find the minimum swap at the end and put it at the beginning.

01:31.560 --> 01:36.550
So let's walk through on vidual go visual go.

01:36.970 --> 01:42.390
However you say this visual algorithms and I have a small data set here.

01:42.500 --> 01:45.540
If we step through we start at the very beginning.

01:45.600 --> 01:51.170
This is our first position and we set a minimum value to be 19.

01:51.240 --> 01:53.610
So that's the smallest value we've seen so far.

01:53.610 --> 01:57.540
Next we compare it to the value next to it 44.

01:57.560 --> 01:58.670
Is there a new minimum.

01:58.770 --> 02:01.260
Nope 19 is still our minimum.

02:01.260 --> 02:03.870
Now we move on and compare it to 38.

02:03.870 --> 02:04.930
Is there a new minimum.

02:04.950 --> 02:05.620
No.

02:05.640 --> 02:07.410
19 is still the smallest.

02:07.410 --> 02:08.660
Now he gets a 5.

02:08.790 --> 02:12.000
And we compare them five is now the new minimum.

02:12.210 --> 02:13.800
So that's our new men.

02:13.860 --> 02:14.550
We move on.

02:14.580 --> 02:16.260
We compare it to 47.

02:16.260 --> 02:16.910
No.

02:16.920 --> 02:18.030
5 is still smaller.

02:18.030 --> 02:19.140
Same thing with 15.

02:19.170 --> 02:20.250
We've now hit the end.

02:20.250 --> 02:22.890
We know that the smallest element in there is five.

02:22.920 --> 02:24.910
So what we do we started here.

02:25.020 --> 02:30.330
So we now swap the smallest element as you can see we have two things selected the beginning where we

02:30.330 --> 02:35.470
started and the smallest element and we swapped them and now we start over.

02:35.770 --> 02:37.680
But this time we start from 44.

02:37.690 --> 02:41.650
So I think that's just showing us that this part is now sorted.

02:41.710 --> 02:42.740
We don't have to care about it.

02:42.880 --> 02:44.570
So we move on 44.

02:44.610 --> 02:45.270
We compare.

02:45.280 --> 02:47.070
OK the minimum now is 38.

02:47.080 --> 02:49.090
Now the minimum is going to be 19.

02:49.120 --> 02:50.250
Now it's still 19.

02:50.260 --> 02:51.270
Now it's 15.

02:51.430 --> 02:53.100
So the new man is 15.

02:53.380 --> 02:56.070
So we swap it with 44.

02:56.080 --> 02:56.880
There we go.

02:57.130 --> 02:57.560
OK.

02:57.640 --> 02:59.260
So now the first two things are sorted.

02:59.260 --> 03:01.150
Now we move on 38.

03:01.170 --> 03:07.150
19 19 is the men 19 and 47 19 still smallest and 19 is still smallest.

03:07.150 --> 03:09.830
We swap 19 and 38.

03:10.360 --> 03:10.750
All right.

03:10.750 --> 03:12.880
Troy hopefully you get the idea from here.

03:12.880 --> 03:13.510
Keep going.

03:13.510 --> 03:19.010
Find a man in that place in that example the men was what we started with 38.

03:19.120 --> 03:23.550
Now we just have to swap the last two and we're done.

03:23.950 --> 03:25.760
So that's selection sort.

03:25.840 --> 03:30.790
We are going through and selecting the smallest element the minimum and then putting it at the beginning.

03:30.940 --> 03:32.800
Oh and actually this hasn't finished officially.

03:32.800 --> 03:33.280
There you go.

03:33.280 --> 03:35.360
Now instead we have a sorted array.

03:35.500 --> 03:37.840
So as far as the code for selection sort.

03:37.840 --> 03:39.750
It's actually not that bad.

03:39.790 --> 03:40.250
We have.

03:40.270 --> 03:42.240
So we reuse the swap code.

03:42.310 --> 03:46.780
So if you made a function for swapping in the last video and bubble sort where you want to use the one

03:46.780 --> 03:50.290
that I made then we don't have to worry about the swap logic.

03:50.290 --> 03:52.240
So let's walk through some of the pseudo code.

03:52.610 --> 03:52.930
OK.

03:52.960 --> 03:58.180
So the first thing you want to do is make a variable to store the minimum value and at the beginning

03:58.330 --> 04:01.720
you can set that equal to just the first item you have to start somewhere.

04:01.840 --> 04:07.000
So the first thing in the array is our smallest value of this only thing we've seen then what we do

04:07.030 --> 04:09.760
is we go through and we compare it to the next item.

04:09.760 --> 04:11.620
If that next item is smaller.

04:11.770 --> 04:16.330
Now we update the value of the minimum variable to be that next item.

04:16.510 --> 04:23.140
And if it's not smaller we keep going and if we at any point find a new smaller value we save that to

04:23.140 --> 04:24.100
the minimum.

04:24.100 --> 04:25.730
Now what are we actually saving.

04:26.020 --> 04:29.680
Well we're not actually saving the value itself.

04:29.680 --> 04:32.730
What we're going to save is the index of where that value is found.

04:32.890 --> 04:34.630
So then we can swap.

04:34.720 --> 04:37.180
So we don't care if the value is 20.

04:37.210 --> 04:38.700
We want to know where it is.

04:38.860 --> 04:40.020
Index of three.

04:40.030 --> 04:44.380
So then we can swap index of zero in index of three after our first pass.

04:45.400 --> 04:46.540
So that's what we have here.

04:46.560 --> 04:50.800
If a small number is found to designate that smaller number to be the new minimum and continue until

04:50.800 --> 04:56.620
the end of the array if the minimum is not the value the index just right put that there you initially

04:56.620 --> 04:58.860
began with then swap the two.

04:59.050 --> 05:05.170
Otherwise if they are the same it means that we happened to have an array where the first element was

05:05.380 --> 05:10.810
the smallest element we just got lucky or maybe it's already sorted which that's not going to be good

05:10.810 --> 05:12.070
for selection sort.

05:12.070 --> 05:14.650
And then we just repeat this process of course.

05:14.650 --> 05:20.630
Next time we know that the first item is already sorted so we don't need to loop over every single item.

05:20.740 --> 05:25.500
What we want to do actually is start from the next item afterwards and find the new minimum.

05:25.780 --> 05:32.110
Otherwise if we kept looking at the whole array every time we would always find the same minimum right

05:32.110 --> 05:38.020
if we just started from here again this is our men and we compare it compare compare our minutes still

05:38.020 --> 05:38.880
going to be one.

05:39.010 --> 05:41.960
And if we started again it's always going to be one.

05:41.980 --> 05:47.050
So what we need to do is then look at this area and find the men and then look at this and this and

05:47.050 --> 05:47.790
so on.

05:47.800 --> 05:53.940
So we want to shrink the scope or window of what we're comparing as we loop through.

05:54.230 --> 05:54.540
OK.

05:54.550 --> 05:56.860
So give this a shot if you'd like to.

05:56.860 --> 06:00.420
It's a relatively short one to implement as well.

06:00.640 --> 06:07.000
Really it's just a loop plus another loop and a single conditional and then at the end a swap.

06:07.000 --> 06:09.580
So give it a shot but also don't feel bad.

06:09.700 --> 06:11.560
I don't want to make it sound so easy.

06:11.560 --> 06:14.320
It's so conceptually can be tricky to get these to work.

06:14.320 --> 06:18.320
So in the next video I will implement it and we'll see how it goes.
