WEBVTT

00:00.240 --> 00:00.810
All right.

00:00.840 --> 00:03.270
So let's implement insertion sort.

00:03.570 --> 00:09.720
So I have my snippet ready and I'm going to define our function called insertion sort takes an array.

00:09.840 --> 00:11.440
This should be pretty familiar right now.

00:11.460 --> 00:17.030
Return that array and let's call it down here with what should we call it with.

00:17.160 --> 00:19.830
Let's go with 2 4.

00:20.040 --> 00:20.460
Oh wait.

00:20.460 --> 00:21.510
I'm doing a sort of array.

00:21.540 --> 00:22.810
That's not going to work.

00:22.900 --> 00:30.240
Two comma one nine and seventy six and four.

00:30.410 --> 00:30.830
OK.

00:30.870 --> 00:34.050
Hardest part of my day out of the way now picking those numbers.

00:34.050 --> 00:35.880
And actually that's not true.

00:35.880 --> 00:37.740
All of this is hard to explain.

00:38.050 --> 00:38.290
OK.

00:38.310 --> 00:39.400
So we've got this here.

00:39.600 --> 00:44.670
And the first thing we want to do is if we just visualize what we're what we're doing as we go through

00:44.940 --> 00:50.240
rather than starting with the first element because that can be kind of an edge case.

00:50.430 --> 00:53.970
Let's say we've gone through a couple of passes and our RE is sorted.

00:53.970 --> 00:55.570
Up until this point.

00:55.650 --> 00:58.880
So what do we need to do with for for example.

00:59.130 --> 01:03.360
Well what we do we take four and we basically work backwards.

01:03.360 --> 01:09.300
We compare it to 76 and we check which one is larger if Four is larger than it stays right where it

01:09.300 --> 01:10.160
is and we're done.

01:10.380 --> 01:14.150
But if four is less than 76 then what what do we do.

01:14.170 --> 01:22.490
Well what we can do is move 76 up to where 4 is and then we we look down to the next one 9 where does

01:22.500 --> 01:23.280
forfeit.

01:23.400 --> 01:25.720
Well nine is still larger so we move nine.

01:25.860 --> 01:28.030
Up until where 76 used to be.

01:28.200 --> 01:30.470
And then we checked to all fours larger.

01:30.480 --> 01:32.690
So we put four right here.

01:32.800 --> 01:35.490
If that makes sense we end up with this.

01:35.790 --> 01:41.820
So the reason I'm I'm starting from here is because the first easy part is we want to iterate over every

01:41.820 --> 01:42.260
item.

01:42.450 --> 01:42.800
Right.

01:42.800 --> 01:43.650
That's that's obvious.

01:43.650 --> 01:46.850
All these sorting algorithms so far have involved that we start with a loop.

01:46.920 --> 01:51.450
We start roughly at the beginning although in this case we can actually start looping at the first item

01:51.870 --> 01:58.040
first index rather than zero and then we look backwards and we figure out where to start or where to

01:58.100 --> 01:58.740
what to do.

01:58.740 --> 02:03.390
So let's write our loop for our equals 1 rather than zero.

02:03.630 --> 02:05.090
It's not a problem if we do zero.

02:05.100 --> 02:07.910
It's just an extra iteration and will do well.

02:07.930 --> 02:09.540
It's less than the length.

02:09.810 --> 02:14.040
Nope I read at length I mean add 1 to i.

02:14.700 --> 02:20.400
Ok so now what we need to do is first let's make a variable to keep track of the value that we're looking

02:20.400 --> 02:20.520
at.

02:20.520 --> 02:22.790
So let's say that we're looking at four.

02:22.860 --> 02:28.050
We're going to make a variable called I don't know what you going to call it let's go with the far current

02:28.170 --> 02:30.740
value equals array.

02:30.760 --> 02:33.930
I like that.

02:33.960 --> 02:35.570
Now we just want to work backwards.

02:35.760 --> 02:36.780
So this is why it's easier.

02:36.780 --> 02:41.310
Like I said to think that we're towards the end or the middle of the array rather than at the at the

02:41.310 --> 02:44.640
very beginning because there is no backward surely to to work towards.

02:44.760 --> 02:47.390
So let's make another loop to go backwards.

02:47.400 --> 02:52.240
So for var J equals in which we started at.

02:52.410 --> 02:58.340
Well we want to start it at one less than whatever Ayas So if this is if we go back to this example

02:58.620 --> 03:00.100
this is what we're looking at.

03:00.270 --> 03:05.880
If I was right here so that's 0 1 2 3 4 if I asked for we want to start comparing.

03:05.880 --> 03:11.200
I or this number to this number which is going to be index of minus 1.

03:11.310 --> 03:14.640
So J equals I minus 1 to start.

03:15.090 --> 03:20.790
And we're going to make a comparison which we haven't done yet and keep going until eventually we find

03:20.790 --> 03:21.540
the right spot.

03:21.540 --> 03:23.490
So worst case how many times.

03:23.490 --> 03:25.360
For example if this was zero.

03:25.530 --> 03:27.150
How many times do we need to go down.

03:27.150 --> 03:32.890
We need j to be 3 0 1 2 3 and it's be to need to be 1 when needed to be zero.

03:33.000 --> 03:34.690
And then that's where we would put 0.

03:34.740 --> 03:35.700
Index zero.

03:35.970 --> 03:42.390
So for that to work we want to keep going while J is greater than zero is what are greater than negative

03:42.390 --> 03:45.410
1 is one way of doing it greater than or equal to zero.

03:45.420 --> 03:47.370
I always would do I prefer.

03:47.400 --> 03:51.140
I don't know I was going to say I have a preference but I don't really do J.

03:51.150 --> 03:54.380
Greater than yes that's greater than or equal to zero.

03:54.570 --> 03:57.990
So it's OK if we had zero because an Index index goes to zero.

03:57.990 --> 04:00.780
Or you could do greater than negative one whichever one.

04:00.780 --> 04:01.770
All right.

04:01.770 --> 04:04.120
So then we're going to subtract one from J.

04:04.140 --> 04:06.230
Every time.

04:06.300 --> 04:09.740
So this is just our ruffs loop skeleton if you will.

04:09.750 --> 04:10.700
So we pick.

04:10.710 --> 04:17.990
If I is four then we have this loop J that goes from 3 down to 2 to 1 down to zero and then it stops.

04:18.000 --> 04:19.360
So that's just the basic loop.

04:19.440 --> 04:22.440
But we don't really want it to just keep looping for no reason.

04:22.500 --> 04:28.470
We need to start figuring out where this value goes or if we're looking at this example where does zero

04:28.470 --> 04:29.090
fit in.

04:29.280 --> 04:31.230
So what we do we already have ZERO.

04:31.290 --> 04:35.130
In our case stored under the variable current Val.

04:35.190 --> 04:39.130
So whatever it is we're storing ramify in Kernville.

04:39.270 --> 04:40.470
So we have it over on the side.

04:40.470 --> 04:45.270
Just keep it over here the value zero and my console's not very happy about that.

04:45.270 --> 04:51.070
So what happens now is that J is going to start at 76 and move backwards Will J itself isn't J-Stars

04:51.150 --> 04:53.470
at 3 and moves down to zero.

04:53.490 --> 04:59.420
What we want to do now is compare current value to array of J.

04:59.890 --> 05:04.060
So we could write that out basically like this array of J.

05:04.210 --> 05:06.140
If I can type array of J.

05:06.310 --> 05:08.770
And then we want to compare that to current row.

05:09.090 --> 05:11.730
What we want to check is array of J.

05:11.770 --> 05:13.690
Larger than the current value.

05:13.930 --> 05:17.330
So if that's the case if 76 is larger than 0.

05:17.680 --> 05:19.890
We want to move zero down.

05:19.900 --> 05:23.490
Which what that really means is we're going to move 76 up.

05:23.500 --> 05:26.430
So if I show you which are the actual operations.

05:26.470 --> 05:26.670
OK.

05:26.680 --> 05:33.730
So first time through zeroes here we compare current value to 76 76 is larger.

05:33.970 --> 05:36.190
So we actually move 76.

05:36.190 --> 05:38.470
We copy it over to here.

05:38.620 --> 05:43.480
Remember we have zero already saved in a variable so we don't have to do like a swap with a temporary

05:43.480 --> 05:46.980
variable we already have that temporary variable called current value.

05:47.530 --> 05:54.690
So then we move back again to night and we compare 9 and 0 9 is greater than zero still.

05:54.700 --> 05:58.840
So we're going to take nine and put it there.

05:58.870 --> 06:00.580
Now we move down to two.

06:00.830 --> 06:02.530
Two is greater than zero.

06:02.680 --> 06:07.930
So we're going to move it to J plus 1 then we get to 1 which is still greater than zero.

06:08.110 --> 06:13.740
So we move it up to here and then at the very end if our loop is done we're going to take whatever this

06:13.750 --> 06:17.650
value is and stick it right there.

06:18.760 --> 06:20.850
So there's a better way of writing this.

06:20.860 --> 06:25.420
And I'll show you what it looks like it's a little bit confusing to see a for loop like this but this

06:25.420 --> 06:26.730
is one way of doing it.

06:26.740 --> 06:30.550
So our loop goes while J is greater than or equal to zero.

06:31.180 --> 06:38.770
And array of J is greater than current value current value.

06:39.260 --> 06:43.130
So you may not have seen many for the trip like this but this is one potential way of doing it instead

06:43.130 --> 06:43.480
of us.

06:43.500 --> 06:49.240
Second you could do a while loop as well or in any sort of conditional check to break out of for loop.

06:49.370 --> 06:53.510
But what this reads as so Jay starts is I minus 1.

06:53.690 --> 06:56.740
We're going to keep going while J is greater than or equal to zero.

06:56.970 --> 07:00.120
And array of J is greater than the current value.

07:00.170 --> 07:07.120
So if and if at any point for example if instead of 0 this last item was 20.

07:07.640 --> 07:12.860
We're going to go through once array of J is going to give us 76 that is greater so we keep looping

07:13.400 --> 07:15.100
and we want to move 76 to here.

07:15.170 --> 07:19.240
But then we compare 20 to nine and all of a sudden this isn't true anymore.

07:19.280 --> 07:20.760
So we're done looping.

07:20.810 --> 07:23.330
Now we just put 20 right here.

07:23.330 --> 07:28.130
So I was kind of kind of confusing when we when we write it this way but let me just fill in the rest

07:28.130 --> 07:35.180
so if any time we're going through this loop what we're going to be doing is taking a value like this

07:35.240 --> 07:37.060
and moving it forward and moving it forward.

07:37.070 --> 07:39.270
And then we stop at some point.

07:39.560 --> 07:49.260
So to actually move that value forward it's just array of J plus one equals array of J.

07:50.450 --> 07:57.680
So why don't I just do a that log to show what's happening on the log array and actually let's do it

07:58.040 --> 07:59.420
in here.

07:59.600 --> 08:06.430
So we're not sorting just yet because we're not actually replacing the correct value in.

08:06.500 --> 08:09.970
But if I run this OK you can see what's happening.

08:10.070 --> 08:12.240
So we started with one and we look back at two.

08:12.470 --> 08:14.870
Well one needs to go here so we moved two forward.

08:14.900 --> 08:20.650
So we get two to 9 7 76 for we just never added in one.

08:20.940 --> 08:27.720
So to remedy this after this loop finishes that means that we found the correct spot for where we need

08:27.720 --> 08:29.550
to insert current Vau.

08:29.730 --> 08:34.630
So then here all we do is insert current value and it's not array of J.

08:34.690 --> 08:40.010
It's array of J plus 1 because if we walk through this again let's say that we're starting here.

08:40.260 --> 08:43.070
Then J is going to start right here.

08:43.500 --> 08:45.360
So we check which one is larger.

08:45.360 --> 08:46.860
OK 76 is larger.

08:47.040 --> 08:49.260
So remember we have 20 saves in a variable.

08:49.320 --> 08:52.010
We're going to take 76 and move it here.

08:52.200 --> 08:53.730
But J was right here.

08:54.030 --> 08:58.430
So next time through J moves down to here and we compare 20 and nine.

08:58.470 --> 09:00.780
Well 20 is greater than nine.

09:01.050 --> 09:06.410
So we're not going to move 9 forward but we don't want to swopped we don't want to put 20 right here.

09:06.420 --> 09:09.480
We want to put 20 here in this space.

09:09.480 --> 09:12.330
So J is this we want J plus 1.

09:12.480 --> 09:18.510
So array of J plus one equals equal what we call it current value.

09:19.410 --> 09:21.380
And now actually we're done.

09:21.840 --> 09:29.720
So if we step through now what happens let me clear execute.

09:30.020 --> 09:30.570
OK.

09:30.630 --> 09:36.390
I'm printing when we move an item forward which is kind of confusing so we moved too forward.

09:36.630 --> 09:44.740
But then on this line right here we inserted one at the beginning and said do cancel the log right here.

09:45.790 --> 09:46.230
OK.

09:46.310 --> 09:47.030
So where's the start.

09:47.040 --> 09:48.270
Here we go.

09:48.360 --> 09:54.990
So you can see we go through the first time and we put one where it goes goes in front of the two then

09:54.990 --> 09:59.770
we're looking at nine Well it goes where it is then we look at 76 that goes where it is.

09:59.940 --> 10:01.820
But then we get to four.

10:02.100 --> 10:06.470
We need to move for all the way to right here and then we're sorted.

10:06.900 --> 10:08.670
So this one is a bit different.

10:08.940 --> 10:13.670
I know it's a maybe a little harder to understand this code but step through it.

10:13.680 --> 10:19.380
If you if you do get stuck I highly encourage you to just write down what I and J are at every point.

10:19.530 --> 10:20.770
Just one at a time.

10:20.820 --> 10:21.450
Walk through.

10:21.450 --> 10:22.560
It might take a little bit.

10:22.590 --> 10:23.880
Use a shorter array.

10:24.150 --> 10:29.120
Definitely when you're choosing numbers for the array it helps to choose things that make sense that

10:29.310 --> 10:30.740
like work with your algorithm.

10:30.810 --> 10:35.190
If you just pick a bunch of numbers like two two and two where you pick something that's already sorted

10:35.650 --> 10:37.210
it doesn't help that much.

10:37.350 --> 10:39.180
So pay attention to that.

10:39.240 --> 10:42.480
But walk through it if you need some help try to understand what's going on.
