1
00:00:00,150 --> 00:00:01,400
Hello welcome back.

2
00:00:01,410 --> 00:00:04,090
This is part two of sorting algorithms.

3
00:00:04,140 --> 00:00:06,230
This is intermediate sorting algorithms.

4
00:00:06,240 --> 00:00:07,740
So we have three more to look at.

5
00:00:07,920 --> 00:00:13,470
And basically we're learning these separate because they are much faster but they're also a little bit

6
00:00:13,920 --> 00:00:20,610
more challenging they're less intuitive to write on your own They're meteor Giusi or algorithms that

7
00:00:20,610 --> 00:00:25,740
take more time to understand but they're also the payoff is that they're faster and I'm going to prove

8
00:00:25,740 --> 00:00:26,390
it to you.

9
00:00:26,430 --> 00:00:30,760
I'm going to show you at least one example of just how much faster they can be in this video.

10
00:00:30,960 --> 00:00:36,510
But first I want to add an important note which is don't be scared when I've taught this before I think

11
00:00:36,930 --> 00:00:43,100
a lot of students feel bad because they struggled through the beginning elementary sorting algorithms

12
00:00:43,110 --> 00:00:45,030
they weren't able to write everything on their own.

13
00:00:45,090 --> 00:00:46,270
That's totally normal.

14
00:00:46,470 --> 00:00:50,820
And when you get to these three these algorithms are harder they're stepping it up.

15
00:00:50,970 --> 00:00:57,050
Don't don't feel pressure to write the code yourself period but especially not the first time through.

16
00:00:57,240 --> 00:01:01,560
So I'm going to give you pseudo code for the adventurous souls who do want to try and implement it on

17
00:01:01,560 --> 00:01:02,080
their own.

18
00:01:02,250 --> 00:01:06,300
But really this section is more about walking through the code and understanding how it works.

19
00:01:06,300 --> 00:01:11,730
Being able to explain the algorithms not being able to rewrite it word for word character for character.

20
00:01:11,730 --> 00:01:12,870
On your first try.

21
00:01:13,050 --> 00:01:14,090
So keep that in mind.

22
00:01:14,250 --> 00:01:15,410
We're going to go through it.

23
00:01:15,420 --> 00:01:16,590
Focus on how it works.

24
00:01:16,590 --> 00:01:21,580
Focus on being able to explain back to me for example what each line of my code does.

25
00:01:21,720 --> 00:01:26,550
Rather than you feeling the pressure to come up with everything from scratch because these are challenging

26
00:01:26,580 --> 00:01:31,270
and these are algorithms created by academics that have been around for a while that have been tried

27
00:01:31,260 --> 00:01:32,320
and tested.

28
00:01:32,460 --> 00:01:35,130
So please don't worry don't be too intimidated.

29
00:01:35,250 --> 00:01:37,020
I don't want it I'm turning nobody away.

30
00:01:37,030 --> 00:01:37,290
All right.

31
00:01:37,290 --> 00:01:39,510
If the last section was hard for you that's OK.

32
00:01:39,510 --> 00:01:41,650
Don't feel bad that this one is called intermediate.

33
00:01:41,940 --> 00:01:42,330
OK.

34
00:01:42,380 --> 00:01:47,030
So our objectives first understand the limitations of what we have learned so far.

35
00:01:47,040 --> 00:01:48,990
Bubble's selection and insertion.

36
00:01:49,170 --> 00:01:49,990
What's wrong with.

37
00:01:50,000 --> 00:01:53,160
Well we should say what's wrong what are those shortcomings.

38
00:01:53,460 --> 00:01:58,460
We're going to implement three sorts implement merge sort of quicksort and radix sort.

39
00:01:58,500 --> 00:02:03,600
But first I promised I would show you a demonstration of how much faster the algorithms were going to

40
00:02:03,600 --> 00:02:04,700
learn now are.

41
00:02:05,160 --> 00:02:08,140
So the sorting algorithms we've learned so far don't scale well.

42
00:02:08,160 --> 00:02:12,500
They actually work pretty well on small a 20 item array.

43
00:02:12,510 --> 00:02:18,480
They work pretty fast but they do not scale well if we're working with a 100000 elements for example.

44
00:02:18,480 --> 00:02:23,440
So if we actually tried bubble sort I'm I'm going to scale it down and just do 10000 elements.

45
00:02:23,520 --> 00:02:26,110
It takes quite a while I'm going to show you right now.

46
00:02:26,460 --> 00:02:32,340
So what I have here so here's my bubble sort implementation and down here I have a little bit of code

47
00:02:32,340 --> 00:02:36,700
that makes an array of oh no this is $100 and I can't count.

48
00:02:36,700 --> 00:02:37,350
Never mind.

49
00:02:37,440 --> 00:02:41,490
It is 100000 elements and I'm going to start by showing you bubble sort.

50
00:02:41,490 --> 00:02:43,070
Now what this code does.

51
00:02:43,290 --> 00:02:47,510
I just copy this over and change this number to be 10.

52
00:02:47,580 --> 00:02:51,380
It just picks 10 random numbers and sticks them in an array.

53
00:02:51,390 --> 00:02:55,850
So if I do 100000 we're going to have an array that's 100000 random numbers.

54
00:02:55,980 --> 00:02:58,330
There shouldn't really be any ordered period.

55
00:02:58,350 --> 00:03:04,440
I mean it's technically possible they could be already sorted but that would be insanely unlikely with

56
00:03:04,440 --> 00:03:05,820
100000 items.

57
00:03:05,820 --> 00:03:07,800
Ok so I'm going to do this now I'm going to hit enter.

58
00:03:07,800 --> 00:03:13,320
It's going to make the array that just takes like a split second but then bubble sorting it's going

59
00:03:13,310 --> 00:03:14,440
to take a little bit.

60
00:03:14,490 --> 00:03:16,620
So Command enter started.

61
00:03:17,010 --> 00:03:20,910
And how am I going to talk about pass the time here.

62
00:03:21,630 --> 00:03:27,030
Well let's see when I write what I'm going to say here.

63
00:03:27,560 --> 00:03:29,580
He got some time to pass.

64
00:03:30,030 --> 00:03:34,960
Well it's a nice day outside and I'm in here recording.

65
00:03:35,060 --> 00:03:36,760
There we go.

66
00:03:36,770 --> 00:03:40,990
Looks like it just finished so I don't know exactly how long that was.

67
00:03:41,000 --> 00:03:45,950
I think I also put a cut in the middle of this because I took a sip of water and then I realized that

68
00:03:45,950 --> 00:03:49,700
I was going to sound really bad on the camera from gulping.

69
00:03:49,700 --> 00:03:54,070
So anyway that was about 20 seconds of my time.

70
00:03:54,080 --> 00:03:57,650
Now if I do the same thing with Merge which I already have in this file merge sort.

71
00:03:57,650 --> 00:04:05,090
We're not we haven't learned it yet but just watch it clear and read you run the same code so 100000

72
00:04:05,150 --> 00:04:07,250
items but now pass it into merge sort.

73
00:04:07,490 --> 00:04:08,390
Wow look at that.

74
00:04:08,390 --> 00:04:10,720
I mean that's crazy how much faster that was.

75
00:04:10,750 --> 00:04:15,260
That was like that was less than a second compared to 20 something seconds.

76
00:04:15,260 --> 00:04:20,750
Now if I added another 0 here which I'm not going to remember the bubble sort is quadratic.

77
00:04:20,750 --> 00:04:28,860
So that has serious implications when we add another zero when we're squaring the time basically.

78
00:04:29,030 --> 00:04:29,980
That's huge.

79
00:04:29,990 --> 00:04:31,730
That's a huge difference so I'm not going to do it.

80
00:04:31,850 --> 00:04:36,420
But with merge sort I mean we'd still notice a difference but it's nowhere near the time difference.

81
00:04:36,710 --> 00:04:40,310
And we'll talk about what the actual Big O is of something like merge sort.

82
00:04:40,490 --> 00:04:43,550
But just I just want to show you there how much faster it is.

83
00:04:43,790 --> 00:04:49,430
Maybe they give you some motivation for learning it so this faster family of algorithms that we're going

84
00:04:49,430 --> 00:04:55,620
to learn they can improve time complexity from around 0 and 2 0 and log in.

85
00:04:55,640 --> 00:04:58,500
So if you can think back I'll show you a chart again.

86
00:04:58,520 --> 00:05:02,240
But oh of and again this is not bad it's pretty good.

87
00:05:02,240 --> 00:05:05,930
It's much better than quadratic time over and squared.

88
00:05:05,930 --> 00:05:12,890
It's not as good as log in and it's not as good as 0 of N but it's still pretty darn good.

89
00:05:12,890 --> 00:05:17,810
So in this section we're going to learn three algorithms that improve time complexity and we'll also

90
00:05:17,840 --> 00:05:23,000
learn why it's and Lagann for example where does the end log and come from we haven't really talked

91
00:05:23,000 --> 00:05:23,330
about it.

92
00:05:23,330 --> 00:05:25,110
We introduced the idea of a log.

93
00:05:25,160 --> 00:05:27,420
We said that all of log in is good.

94
00:05:27,430 --> 00:05:30,890
It's pretty fast but we haven't really seen where it comes from.

95
00:05:30,890 --> 00:05:36,710
So we'll see that there's a tradeoff though as I mentioned between efficiency and simplicity unfortunately.

96
00:05:37,070 --> 00:05:41,220
So these more efficient algorithms are definitely harder.

97
00:05:41,240 --> 00:05:42,590
They're longer.

98
00:05:42,740 --> 00:05:47,600
Or even if they're not longer in the amount of code they're just weirder they're not they're not how

99
00:05:47,600 --> 00:05:50,660
we think as humans most the time is not how you would sort something.

100
00:05:50,750 --> 00:05:54,400
So they take a little longer to understand but it's worth it right.

101
00:05:54,410 --> 00:05:58,370
That's a very big difference that I just showed you and that was only 100000 items.

102
00:05:58,370 --> 00:06:02,870
Now imagine a million or 10 million pieces of data massive differences in time.

103
00:06:02,870 --> 00:06:05,470
So let's dive in in the next video merge sort.

