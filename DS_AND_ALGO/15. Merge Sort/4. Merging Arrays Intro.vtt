WEBVTT

00:00.210 --> 00:01.440
Hey again welcome back.

00:01.440 --> 00:07.920
So this is the first part of writing merge sort which is writing a function to merge two sorted arrays.

00:07.980 --> 00:14.130
So again we have we assume the arrays are sorted and all you have to do is return the combination of

00:14.130 --> 00:16.010
those two sorted arrays.

00:16.290 --> 00:18.380
So for example I already have it written here.

00:18.510 --> 00:24.520
Well I'm not showing you the code but I have the function call here two sorted arrays one 10:52 that

00:24.550 --> 00:26.850
sorted two 14:19 in one hundred.

00:26.850 --> 00:29.420
That's sorted when I run this I merge them together.

00:29.460 --> 00:33.590
We get one to 10 14:15 ninety nine one hundred.

00:33.630 --> 00:35.490
So one array that is returned.

00:35.700 --> 00:38.910
So that's basically your job if you want to try and do this on your own.

00:38.940 --> 00:40.840
I'll have a solution in the next video.

00:40.920 --> 00:42.470
This part as well.

00:42.630 --> 00:47.130
Personally I always hate saying if something's hard or easy but I think the logic for this one makes

00:47.130 --> 00:47.650
sense.

00:47.670 --> 00:51.320
We'll walk through it though I have pseudo code so I jumped the gun on my slides.

00:51.750 --> 00:52.060
Yes.

00:52.080 --> 00:56.690
It's useful to first implement a function responsible for merging two sorted a race given to sort of

00:56.700 --> 01:00.570
arrays the helper function could create a new one which is also sorted.

01:00.570 --> 01:04.760
And yeah it's important need to consist of all the elements in the two input arrays.

01:04.800 --> 01:07.540
So what do we do if they're not the same size.

01:07.620 --> 01:08.430
We'll cover that.

01:08.730 --> 01:14.070
And as far as how it should work this is something we haven't seen but it should run an O of and plus

01:14.130 --> 01:16.380
M time and and plus M space.

01:16.380 --> 01:22.380
So N and M We have two inputs now to our function one array and then the second array.

01:22.380 --> 01:24.230
So N is the size of the first one.

01:24.250 --> 01:25.850
Amice the size of the second one.

01:25.890 --> 01:31.350
Of course those are two that sound very similar and you probably can't tell what I'm saying and am but

01:31.380 --> 01:32.890
that's the standard way of saying it.

01:33.030 --> 01:39.660
Of writing it down so that just means that if n grows super large but M doesn't grow very large it should

01:39.660 --> 01:43.790
just be 0 of and plus M often and usually and merge sort.

01:43.790 --> 01:48.450
They are the exact same size or one element different in real life.

01:48.450 --> 01:52.650
But if we are working with something and for some reason we're merging an array of a thousand items

01:52.650 --> 01:56.200
with an array of a million items it should be and plus.

01:56.250 --> 01:58.070
So as that one grows anyway.

01:58.230 --> 02:02.070
All I'm saying is that you should visit each item in the array one time.

02:02.220 --> 02:06.810
Right if it was just 0 of N that means that you're going to it's linear time you visit each item once

02:06.810 --> 02:07.920
you iterate over it.

02:08.280 --> 02:13.990
But if it's 0 of any place and that means that we're iterating over each item and each array once.

02:14.040 --> 02:15.520
So here's the pseudo code.

02:15.600 --> 02:16.650
Create an empty array.

02:16.650 --> 02:18.620
So defined a function takes two inputs.

02:18.720 --> 02:23.820
Create an empty array that you'll return at the end and then you start with the smallest values in each

02:23.820 --> 02:25.350
input array started the beginning.

02:25.500 --> 02:29.300
So have two counters one called I one called J.

02:29.310 --> 02:31.190
I recommend using while loops for this.

02:31.200 --> 02:35.610
Personally that's what I'd like to do and you need to have one that starts out they both need to start

02:35.610 --> 02:36.000
at zero.

02:36.000 --> 02:41.860
J and I are two numbers started to Europe while there are still values we haven't looked at.

02:41.860 --> 02:48.340
Meaning while I and J both haven't hit the end of their respective arrays we're going to take the value

02:48.340 --> 02:53.920
of the first array of the first item and then compare that to the value of the first item in the second

02:53.920 --> 02:55.030
array.

02:55.030 --> 03:01.390
Now if the first item is smaller we put that in our result array and then we move on to the next item

03:01.450 --> 03:02.460
in the first row.

03:02.800 --> 03:03.870
If it's the other way around.

03:03.970 --> 03:08.660
If the first array is larger the item in the first array than the value in our second array.

03:08.740 --> 03:13.630
We take the value from the second array and put that in the results and move on to the next value in

03:13.630 --> 03:14.380
the second array.

03:14.540 --> 03:19.790
And then once we finish one array we just push all the remaining values from the other array in.

03:19.840 --> 03:25.180
So for example if we took these two we just write them down here.

03:25.180 --> 03:29.680
These are two arrays and then this is my result that I'm going to return.

03:29.680 --> 03:31.790
We start with two counters.

03:31.810 --> 03:32.730
I and J.

03:32.850 --> 03:35.100
And they start at zero and zero.

03:35.650 --> 03:37.380
So we compare one and two.

03:37.720 --> 03:38.800
Which one is small.

03:38.870 --> 03:39.870
One is.

03:39.880 --> 03:43.320
So we put one here and then we move on.

03:43.330 --> 03:45.840
In this first array we're now looking at 10.

03:46.120 --> 03:51.250
So if I were to put a little marker here like that it's not a very great way of writing that and our

03:51.250 --> 03:52.580
marker over here.

03:52.750 --> 03:56.170
This is going to bite me this is going to be annoying to keep track of is too.

03:56.320 --> 04:00.530
So next time through we're comparing ten into which one is smaller too.

04:00.940 --> 04:02.350
So we put two in here.

04:02.620 --> 04:07.730
Which means that now we need to shift this over and now we're looking at 10 and 14.

04:07.830 --> 04:09.000
So now which one is smaller.

04:09.040 --> 04:09.820
Ten is.

04:09.820 --> 04:12.910
So we put 10 in and then we move this up.

04:12.910 --> 04:13.970
Not this one.

04:14.020 --> 04:19.170
Now we're looking at 14 and 50 which one is smaller 14.

04:19.240 --> 04:19.630
All right.

04:19.630 --> 04:22.040
So then we move this to 99.

04:22.270 --> 04:24.060
And get.

04:25.600 --> 04:28.810
OK 50 in 99 which wins 50 wins.

04:29.040 --> 04:31.940
So then we've now exhausted that array.

04:32.340 --> 04:37.200
And what that tells us if we've hit the end of this all we do is take all remaining values in this other

04:37.200 --> 04:41.700
one because if this is sorted and they have to be sorted in the same way I should have mentioned that

04:42.000 --> 04:44.670
we can't have one in ascending and descending.

04:45.060 --> 04:49.740
They're sort of in the same rate same way whatever is at the end of this array if we have stuff that's

04:49.740 --> 04:55.320
left in the other array we know for sure it's all greater than whatever that 50 in this case.

04:55.320 --> 05:01.670
So now we just add in 99 and then 100 and now we have successfully merge the two arrays.

05:01.680 --> 05:04.660
So that's the approach that I'd like for you to try and take.

05:04.860 --> 05:08.520
Otherwise if you don't want to do it in the next video I'll just show you a solution.

05:08.550 --> 05:10.890
So this is a first important step for merger.
