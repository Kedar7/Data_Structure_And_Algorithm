1
00:00:00,210 --> 00:00:05,610
Ladies and gentlemen may I please have your undivided attention for an important announcement about

2
00:00:05,610 --> 00:00:07,340
this Course's content.

3
00:00:07,350 --> 00:00:14,190
I'm very excited to announce that we have hit a major turning point in this course from this point forward.

4
00:00:14,370 --> 00:00:22,110
We will be discussing the structure of the data structure data structure structure data structures.

5
00:00:22,270 --> 00:00:27,510
Well as you may have heard we're talking about data structures which it really is a big turning point

6
00:00:27,510 --> 00:00:28,650
in this course.

7
00:00:28,680 --> 00:00:33,170
We've spent a lot of time talking about many different topics different types of algorithms approaches

8
00:00:33,180 --> 00:00:38,080
for problem solving Big O notation recursion sorting searching a lot of stuff.

9
00:00:38,280 --> 00:00:45,000
But now from here on out everything we cover will be a new type of data structure or related to a new

10
00:00:45,000 --> 00:00:46,400
data structure that we learn.

11
00:00:46,560 --> 00:00:50,700
So when this video and this section there's a couple of things that we have to get out of the way before

12
00:00:50,700 --> 00:00:55,830
we dive into the many data structures we're going to cover this will be quick but I want to talk about

13
00:00:56,010 --> 00:00:59,850
why you should care what the data structures are why there's so many of them.

14
00:00:59,880 --> 00:01:01,580
Like are they how do they differ.

15
00:01:01,620 --> 00:01:03,410
What's the point of learning these.

16
00:01:03,540 --> 00:01:05,240
And then also we're going to learn about.

17
00:01:05,350 --> 00:01:06,340
Yes 2015.

18
00:01:06,350 --> 00:01:11,760
The class syntax to create classes in javascript which is how we'll be defining our own data structures

19
00:01:11,760 --> 00:01:12,660
from here on out.

20
00:01:12,660 --> 00:01:17,230
So if you already know about that you can skip it but it's like 10 minutes of content across three videos.

21
00:01:17,280 --> 00:01:19,830
If you do want to check it out see how it works.

22
00:01:20,160 --> 00:01:26,760
OK so I've mentioned we're covering a ton of structures binary search trees Qs singly linked lists undirected

23
00:01:26,790 --> 00:01:27,820
unweighted graphs.

24
00:01:27,900 --> 00:01:33,690
Talking about binary heaps priority queues at in Pathet on here directed graphs hash tables double linked

25
00:01:33,690 --> 00:01:34,830
lists stacks.

26
00:01:34,890 --> 00:01:37,000
And there's actually some more that I didn't put on here.

27
00:01:37,260 --> 00:01:39,490
What the heck is going on why are there so many.

28
00:01:39,540 --> 00:01:40,800
Why am I teaching them.

29
00:01:40,980 --> 00:01:42,420
And what do they all do.

30
00:01:42,420 --> 00:01:47,340
So we're not going to get into what each one does individually here but just know we will implement

31
00:01:47,400 --> 00:01:49,660
each one of these as their own class.

32
00:01:49,680 --> 00:01:51,570
So we'll define it from scratch.

33
00:01:51,570 --> 00:01:58,560
Sort of like if we were defining our own array or our own object although it's a little bit more it's

34
00:01:58,560 --> 00:01:59,800
a little higher level than that.

35
00:01:59,880 --> 00:02:03,290
The structures we're going to build are a little bit more complex.

36
00:02:03,360 --> 00:02:06,160
So let's start with what all of these have in common.

37
00:02:06,180 --> 00:02:06,840
What did they do.

38
00:02:06,840 --> 00:02:09,080
What makes something a data structure.

39
00:02:09,150 --> 00:02:13,590
We've kind of touched on this early early on we talked about arrays and objects.

40
00:02:13,590 --> 00:02:16,530
Those are data structures as well as all of these things.

41
00:02:16,530 --> 00:02:21,960
These are data structures and there's hundreds dozens of very well-known ones and hundreds of maybe

42
00:02:21,960 --> 00:02:27,170
thousands of very nuanced niche variants of data structures all of them.

43
00:02:27,210 --> 00:02:30,180
What they have in common is that they are collections of values.

44
00:02:30,780 --> 00:02:36,990
They contain the relationships among those values and the functionality or operations that can be applied

45
00:02:36,990 --> 00:02:37,650
to the data.

46
00:02:37,860 --> 00:02:40,950
So think of an array an array holds many values.

47
00:02:41,040 --> 00:02:43,880
It also contains the relationships between those values.

48
00:02:43,890 --> 00:02:49,500
The order in the case of an array and arrays come with all sorts of built in methods and functionality

49
00:02:49,740 --> 00:02:56,580
ways of interacting with them adding to them removing push pop that sort of thing but also sorting reversing

50
00:02:56,640 --> 00:02:58,870
whatever other functionality there is.

51
00:02:58,980 --> 00:03:04,850
So we'll define our own structures that fit this exact same mold when we define a singly linked list.

52
00:03:04,890 --> 00:03:06,580
That's the first one we cover.

53
00:03:06,660 --> 00:03:12,600
It will not only hold data but it also puts them in obviously in a particular way where there's a relationship

54
00:03:12,750 --> 00:03:14,180
between each piece of data.

55
00:03:14,190 --> 00:03:16,470
It's not just randomly deciding how to store it.

56
00:03:16,470 --> 00:03:21,630
There is a particular pattern or relationship so it holds a collection of data and we'll be writing

57
00:03:21,630 --> 00:03:22,780
a bunch of methods.

58
00:03:22,890 --> 00:03:27,750
We'll add our own push our own pop our own reverse what else.

59
00:03:27,750 --> 00:03:32,460
There's probably seven different methods we add to a singly linked list and they all help us interact

60
00:03:32,460 --> 00:03:34,000
with the singly linked list.

61
00:03:34,110 --> 00:03:38,430
Same thing when we talk about graphs and trees and heaps and everything else we do from here on out.

62
00:03:38,640 --> 00:03:43,710
We'll be defining a class called Whatever our data structure of the day is.

63
00:03:43,830 --> 00:03:47,220
And then on top of that we add a bunch of functionality.

64
00:03:47,220 --> 00:03:48,520
So why are there so many.

65
00:03:48,540 --> 00:03:49,620
That's a good question.

66
00:03:49,620 --> 00:03:54,330
It comes down to the fact that different data structures excel at different things.

67
00:03:54,330 --> 00:04:00,210
So some of them are very specialized but some of them are pretty general commonly use things like an

68
00:04:00,210 --> 00:04:05,180
array or an object in javascript which is why those come for free.

69
00:04:05,200 --> 00:04:05,420
Right.

70
00:04:05,430 --> 00:04:11,250
We don't have to implement those on our own but if we're trying to work with a red and black tree or

71
00:04:11,730 --> 00:04:16,290
I don't know an undirected graph or something like that you usually don't get that for free in a programming

72
00:04:16,290 --> 00:04:16,790
language.

73
00:04:16,800 --> 00:04:20,140
You have to go and implemented but that doesn't mean they're not useful.

74
00:04:20,250 --> 00:04:25,800
It just means that they are very useful in special cases and you have to you have to be able to know

75
00:04:25,890 --> 00:04:29,500
when to use one of those you have to know about them in order to write one.

76
00:04:29,550 --> 00:04:30,570
If that makes sense.

77
00:04:30,570 --> 00:04:31,920
So they all do different things.

78
00:04:31,920 --> 00:04:37,950
And as we go through this course you'll see when certain ones make sense and we talk about usages and

79
00:04:37,950 --> 00:04:42,360
examples and real world use cases as well as interview problems.

80
00:04:42,360 --> 00:04:44,810
So you might see a data structure like this.

81
00:04:44,820 --> 00:04:47,500
This is a visual representation of an array.

82
00:04:47,950 --> 00:04:50,290
Here's another one will look at a length list.

83
00:04:50,310 --> 00:04:53,560
This is a singly linked list will also talk about doubly linked lists.

84
00:04:53,580 --> 00:04:55,250
Here we have a hash table.

85
00:04:55,260 --> 00:04:59,850
These are just visual representations but you can see these are all different relationships between

86
00:04:59,920 --> 00:05:05,110
the pieces of data but they all are storing numbers just totally different ways of storing the same

87
00:05:05,110 --> 00:05:06,250
type of data.

88
00:05:06,250 --> 00:05:08,190
This here is a binary heap.

89
00:05:08,200 --> 00:05:09,180
It's also a tree.

90
00:05:09,210 --> 00:05:11,200
This is a binary search tree.

91
00:05:11,200 --> 00:05:12,760
Slightly different rules.

92
00:05:12,760 --> 00:05:16,620
This is a graph in this case and unweighted undirected graph.

93
00:05:16,660 --> 00:05:22,400
This is an unweighted directed graph similar but different.

94
00:05:22,420 --> 00:05:26,630
So the point is all of these do the same thing at the end of the day they store data.

95
00:05:26,830 --> 00:05:31,720
But their behavior the relationships between the data and their functionality the methods we get to

96
00:05:31,720 --> 00:05:33,750
act upon them are very different.

97
00:05:33,940 --> 00:05:37,860
So the next question is why should I care and why should you care.

98
00:05:38,290 --> 00:05:42,490
Well there's a lot of time devoted to data structures in this course and there's a couple of reasons.

99
00:05:42,490 --> 00:05:46,990
First of all the more time you spend as a developer the more likely you'll need to use one of these

100
00:05:46,990 --> 00:05:49,030
more advanced data structures.

101
00:05:49,120 --> 00:05:54,820
Usually there's a time and every developer's life when using an array for every single possible problem

102
00:05:54,880 --> 00:05:55,920
just doesn't cut it.

103
00:05:55,960 --> 00:05:57,540
You might need something more efficient.

104
00:05:57,610 --> 00:06:00,570
You might need something to express a different relationship.

105
00:06:00,700 --> 00:06:05,470
You might be working with more complicated data that isn't linear and you needed another way of storing

106
00:06:05,470 --> 00:06:05,770
it.

107
00:06:05,770 --> 00:06:11,410
There's many situations where this can come up or you might be working with an API or a library that

108
00:06:11,620 --> 00:06:17,530
gives you like a database for example that returns a graph graph representation and you need to understand

109
00:06:17,530 --> 00:06:18,490
what the heck a graph is.

110
00:06:18,490 --> 00:06:20,680
In order for that to make sense.

111
00:06:20,810 --> 00:06:27,310
Also another reason worth knowing that you've already worked with many data structures probably unknowingly.

112
00:06:27,320 --> 00:06:32,360
So if you have ever worked with the Dom in javascript you've manipulated and interacted with a tree.

113
00:06:32,420 --> 00:06:33,330
That's just one example.

114
00:06:33,350 --> 00:06:39,110
But as we go through through the different structures all constantly point out existing use cases things

115
00:06:39,110 --> 00:06:42,090
that you're probably familiar with with each data structure.

116
00:06:42,290 --> 00:06:47,090
And then finally a really important one of course especially in this context interviews.

117
00:06:47,090 --> 00:06:50,590
So these data structures are the fodder of many an interview.

118
00:06:50,810 --> 00:06:53,040
It's worth knowing alone just for that.

119
00:06:53,120 --> 00:06:56,470
But I don't want to make that the focus of all these data structures.

120
00:06:56,480 --> 00:06:58,770
These exist for a reason they're taught for a reason.

121
00:06:58,850 --> 00:07:04,730
And it's not just a random hard interview questions though it can definitely help with that and a lot

122
00:07:04,730 --> 00:07:07,050
of people like to ask data structure questions.

123
00:07:07,070 --> 00:07:09,190
Can you reverse a singly length list.

124
00:07:09,290 --> 00:07:10,490
Can you implement a priority.

125
00:07:10,490 --> 00:07:12,570
Q Can you balance a binary tree.

126
00:07:12,620 --> 00:07:13,950
All that stuff is worth knowing.

127
00:07:14,060 --> 00:07:18,150
But at the same time these data structures are useful in the real world.

128
00:07:18,200 --> 00:07:20,480
If you never interview they're still worth knowing.

129
00:07:20,480 --> 00:07:25,380
So we'll come back to why as we visit each individual structure an important note.

130
00:07:25,400 --> 00:07:29,250
A lot of people ask this What is the best one which one should I know.

131
00:07:29,420 --> 00:07:31,460
The answer is there is no one best one.

132
00:07:31,460 --> 00:07:33,700
They all do different things right.

133
00:07:33,710 --> 00:07:37,400
They each have specific talents if you will.

134
00:07:37,400 --> 00:07:42,540
Some of them are more general just commonly use like an array but some of them are very specific.

135
00:07:42,560 --> 00:07:44,660
But they all excel in different environments.

136
00:07:44,660 --> 00:07:46,640
Otherwise why bother having them at all.

137
00:07:46,640 --> 00:07:47,620
Why bother learning them.

138
00:07:47,630 --> 00:07:51,710
I wouldn't be teaching them if there was one data structure to rule them all.

139
00:07:51,710 --> 00:07:53,780
One you could master and then call it a day.

140
00:07:53,840 --> 00:07:56,720
So they all excel in different situations.

141
00:07:56,720 --> 00:08:00,100
For example maybe you're working with map or location data.

142
00:08:00,140 --> 00:08:06,290
You're writing a GPS application like Google Maps which should be a huge undertaking but let's simplify

143
00:08:06,290 --> 00:08:11,900
it even further and say you're trying to write code that will route you to the nearest gas station or

144
00:08:11,900 --> 00:08:16,850
something like that that has the cheapest deals whatever you might want to use a graph a graph would

145
00:08:16,850 --> 00:08:17,660
make sense for this.

146
00:08:17,660 --> 00:08:21,650
And we talked about graphing data we talked about finding the shortest path between points on a graph

147
00:08:21,890 --> 00:08:25,280
representing GPS data and location data using a graph.

148
00:08:25,280 --> 00:08:26,660
So that's one situation.

149
00:08:26,660 --> 00:08:30,730
It would be very difficult to represent a map using a single array.

150
00:08:31,430 --> 00:08:37,760
What if you need an ordered list like an array but you need fast inserts in removals at the beginning

151
00:08:38,000 --> 00:08:38,800
and the end.

152
00:08:38,810 --> 00:08:44,000
So if you watched early on we talked about arrays they do not do well when you insert at the beginning

153
00:08:44,000 --> 00:08:45,110
or remove from the beginning.

154
00:08:45,110 --> 00:08:46,810
Everything has to be indexed.

155
00:08:47,090 --> 00:08:52,130
So maybe you have a huge data set and you have to have it ordered it take a million data points and

156
00:08:52,130 --> 00:08:55,410
you are always inserting and removing from both ends.

157
00:08:55,520 --> 00:08:59,580
Then you might not want to use an array thats where length lists could come in handy.

158
00:08:59,600 --> 00:09:03,340
So knowing about a linked list would help you in that situation.

159
00:09:03,380 --> 00:09:05,760
Are you web scraping nested aged DML.

160
00:09:05,840 --> 00:09:08,800
Are you writing some sort of app that is scraping data from.

161
00:09:08,810 --> 00:09:11,570
I don't know airline's Web sites or hotel web sites.

162
00:09:11,720 --> 00:09:13,950
And you're interacting with that aged him now.

163
00:09:14,030 --> 00:09:16,020
Or maybe you're using a library to help you.

164
00:09:16,190 --> 00:09:19,560
Well it's almost guaranteed to give you the data in a tree.

165
00:09:20,240 --> 00:09:26,710
I have another example I need to write a scheduler so this might be a bit more nuanced than Timo But

166
00:09:27,010 --> 00:09:32,140
if you're writing an app that that has tasks that are scheduled and you need to find what's the highest

167
00:09:32,140 --> 00:09:36,620
priority task to handle at any given point you might use a binary heap.

168
00:09:36,790 --> 00:09:40,010
So we'll talk about priority queues and primary heaps in that section.

169
00:09:40,320 --> 00:09:45,990
OK so enough of those examples but hopefully that makes it clear these all excel in different situations.

170
00:09:46,000 --> 00:09:48,700
There is no one data structure to rule them all.

171
00:09:48,700 --> 00:09:50,250
Definitely go through all of them.

172
00:09:50,320 --> 00:09:55,940
But along with that a quick message there's a ton of content here from here on out.

173
00:09:56,030 --> 00:10:02,830
This data structure stuff gets dense and I highly recommend you don't just go one section at a time

174
00:10:03,310 --> 00:10:06,240
and sit through the night or even do it all in a day or two.

175
00:10:06,400 --> 00:10:07,270
It's a lot.

176
00:10:07,390 --> 00:10:09,680
I beg you please.

177
00:10:09,730 --> 00:10:11,140
It will burn you out.

178
00:10:11,140 --> 00:10:18,310
This is the content that in my classes we do over two weeks of an intensive bootcamp where it's 10 hours

179
00:10:18,310 --> 00:10:21,350
a day sometimes eight hours but usually 10 hours a day.

180
00:10:21,430 --> 00:10:28,390
We do two weeks that ten full days to cover this data structures content and those are people who have

181
00:10:28,390 --> 00:10:32,280
been you know in this classroom for 12 or 10 weeks at that point.

182
00:10:32,530 --> 00:10:38,430
So they're relatively skilled developers and they are expecting a tough time for the last two weeks.

183
00:10:38,470 --> 00:10:42,880
So I beg you don't try to fly through this in a night or two or even a single week.

184
00:10:42,910 --> 00:10:44,140
It's a lot.

185
00:10:44,140 --> 00:10:47,550
For example watch the singly link section.

186
00:10:47,620 --> 00:10:48,530
Take a break.

187
00:10:48,550 --> 00:10:52,090
I mean take an hour two hours three hours an entire day.

188
00:10:52,180 --> 00:10:53,470
Come back after the weekend.

189
00:10:53,470 --> 00:10:54,240
Whatever it is.

190
00:10:54,280 --> 00:10:57,970
And then do double length lists don't do them one right after the other.

191
00:10:58,060 --> 00:11:00,330
I mean it's up to you of course but that's my recommendation.

192
00:11:00,460 --> 00:11:01,580
There's a lot there.

193
00:11:01,660 --> 00:11:01,990
OK.

194
00:11:01,990 --> 00:11:03,550
And one last little note.

195
00:11:03,550 --> 00:11:07,260
Please pay attention to the prerequisites listed for each section.

196
00:11:07,270 --> 00:11:13,390
So a lot of these data structures build upon one another or in some of the later sections like when

197
00:11:13,390 --> 00:11:18,990
we talk about graphs we talked about a particular algorithm called Dijkstra's shortest path algorithm.

198
00:11:19,180 --> 00:11:24,730
And in the algorithm itself we actually use another data structure from earlier in the course called

199
00:11:24,730 --> 00:11:25,810
the binary heap.

200
00:11:25,810 --> 00:11:30,790
So if you skipped the binary heap section and go right to the graph section you will be missing some

201
00:11:30,790 --> 00:11:32,010
important information.

202
00:11:32,050 --> 00:11:37,000
So I made it at the beginning of every single section is a text lecture that explains what you need

203
00:11:37,000 --> 00:11:38,790
to know for each section.

204
00:11:38,890 --> 00:11:43,660
So you don't have to go through them in a linear order but they are in an order that makes sense.

205
00:11:43,750 --> 00:11:47,680
And if you do want to learn them all just start at the beginning singly linked lists and go all the

206
00:11:47,680 --> 00:11:48,870
way up through graphs.

207
00:11:49,150 --> 00:11:55,960
Ok I'm done with all these little announcements and pep talks and whatever else this has been.

208
00:11:55,960 --> 00:12:01,330
So welcome to the new section of the new sort of portion of the course devoted to data structures.

209
00:12:01,330 --> 00:12:07,640
There's a lot of important content here some very useful stuff but there's a lot of stuff in general.

210
00:12:07,690 --> 00:12:13,710
So again take your time the first thing we're going to do before we actually implement our first data

211
00:12:13,710 --> 00:12:15,320
structure the singly linked list.

212
00:12:15,480 --> 00:12:21,780
We need to just discuss East 2015 class syntax we're defining a new class for every data structure we

213
00:12:21,780 --> 00:12:22,390
learn.

214
00:12:22,410 --> 00:12:27,420
So if you already know how to do that skip the next two video or the next three videos after this one.

215
00:12:27,480 --> 00:12:31,640
But if you don't I highly recommend you start there because we use this syntax.

216
00:12:31,740 --> 00:12:34,740
The classic keyword in every single video from here on out.

217
00:12:34,920 --> 00:12:36,420
Ok I'm done I promise.

218
00:12:36,420 --> 00:12:37,860
Welcome to data structures.

219
00:12:37,860 --> 00:12:38,720
Let's get going.

