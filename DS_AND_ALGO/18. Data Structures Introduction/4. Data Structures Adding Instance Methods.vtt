WEBVTT

00:00.100 --> 00:00.510
OK.

00:00.540 --> 00:01.310
Welcome back.

00:01.320 --> 00:06.500
In this video we're going to talk about instance methods as well as static methods or class methods.

00:06.720 --> 00:11.970
So to start instance methods are something we're going to use all the time in the course much more frequently

00:11.970 --> 00:17.370
than the second type of methods we'll see instance methods are methods that basically don't want to

00:17.370 --> 00:23.670
say they live on a particular instance but they they provide functionality that pertains to a single

00:23.850 --> 00:29.790
instance of in our case our case student or when we talk about a singly linked list.

00:29.910 --> 00:34.110
We will define many instance methods on those particular instances.

00:34.110 --> 00:36.740
Think of for example when we're working with an array.

00:36.870 --> 00:38.130
If I make a new array.

00:38.310 --> 00:40.370
So let's just call this array.

00:40.560 --> 00:41.070
I don't know.

00:41.070 --> 00:47.350
Data equals and I'm going to do this this syntax and pass in some numbers.

00:47.370 --> 00:48.140
Here we go.

00:48.150 --> 00:50.930
So we now have our array called data.

00:51.090 --> 00:58.440
If I do something like data dot push This is a method that acts on the individual instance of the array

00:58.440 --> 00:59.620
which is data.

00:59.640 --> 01:04.980
So an array is a pattern and we can define individual array objects based on that pattern.

01:05.040 --> 01:08.580
And so this is one instance and push is a single method.

01:08.620 --> 01:13.860
I was going to do something like sort and I realized that I made a sorted array so it will do push and

01:13.860 --> 01:14.960
push it 20.

01:14.970 --> 01:17.960
And about 99 and there we go.

01:18.000 --> 01:19.940
Now we look at data and it's changed.

01:19.980 --> 01:25.200
So we work with the instance methods all the time or the rough idea of instance methods in Javascript.

01:25.200 --> 01:27.030
So we're going to do the same thing now on our student.

01:27.030 --> 01:31.810
We're going to create a method or two methods that correspond to individual instances.

01:31.860 --> 01:38.040
So not things that that work on the class level but the things that are relevant to individual instances.

01:38.040 --> 01:40.680
So for example here's one called full name.

01:40.860 --> 01:43.980
Again not very useful but it returns a string.

01:43.980 --> 01:45.210
Your full name is.

01:45.330 --> 01:49.560
And then inside that string we're adding in the first name and this last name.

01:49.710 --> 01:53.400
And again this refers to the individual instance.

01:53.400 --> 01:58.590
So whoever is calling this whether it's first student or second student will get a different output

01:58.770 --> 02:02.130
assuming that they have different first and last names.

02:02.220 --> 02:09.210
So if we go back to add this method in right here and now if I execute my code I have first student

02:09.210 --> 02:12.330
and second student if I try first student.

02:12.600 --> 02:14.230
There's no grade for either of those.

02:14.260 --> 02:15.080
That's OK.

02:15.310 --> 02:22.380
So let's do first student dot and now we call full name and I need to if I just leave it at this it

02:22.380 --> 02:23.380
returns to me.

02:23.490 --> 02:28.290
It's basically saying yes I know there is a method called that before to execute it.

02:28.290 --> 02:28.670
There you go.

02:28.670 --> 02:30.110
Your full name is called Steal.

02:30.210 --> 02:34.960
If I do second student full name I get your full name is Blue Steel.

02:34.980 --> 02:40.170
So these are silly examples of what we're doing here when we get to a linked list though we will define

02:40.630 --> 02:47.520
a reverse instance method or a push instance method things that will actually work on individual instances.

02:47.520 --> 02:51.180
For example in the next section here's our singly linked list class.

02:51.180 --> 02:58.520
We have our constructor but then we have a push instance method a shift in unshipped get insert.

02:58.940 --> 03:00.860
What else reverse remove.

03:00.870 --> 03:01.590
Those are all.

03:01.630 --> 03:02.380
Oh and pop.

03:02.400 --> 03:08.100
Those are all individual instance methods that work on a single linked list on a single singly linked

03:08.100 --> 03:08.560
lists.

03:08.590 --> 03:09.890
It's confusing.

03:09.900 --> 03:15.690
So we have to instantiate a length list in order to use those just like we can't if we're trying to

03:15.750 --> 03:17.540
pop from an array.

03:17.610 --> 03:19.800
We have to have an individual array to pop from.

03:19.800 --> 03:21.430
We don't just pop from nothing.

03:21.510 --> 03:22.600
We need an instance.

03:22.650 --> 03:24.170
So let's extend this class.

03:24.180 --> 03:30.420
Let's add it in a different method that actually updates the value of one of these properties.

03:30.450 --> 03:34.200
So let's say in our school students can only be late three times.

03:34.350 --> 03:36.440
So let's create a new property.

03:36.530 --> 03:40.550
I'm going to call this absences too hard to spell.

03:40.650 --> 03:44.550
Let's just call it at least in the U.S. we call them tardies.

03:44.670 --> 03:49.290
I don't know how universal that word is but we're going to call it tardies and it's going to be set

03:49.290 --> 03:52.050
to zero whenever we create a new student by default.

03:52.050 --> 03:59.630
They've never been late but now we're going to have a method called Mark late and all that it does is

03:59.630 --> 04:05.930
it adds 1 to tardies so need to access this stuff tardies which is referencing the individual student

04:06.090 --> 04:08.560
instance his or her tardies.

04:08.900 --> 04:15.460
And I'm just going to add one physical one like that so that updates it and then let's return a string.

04:15.800 --> 04:22.210
Or we could just return the number of tardies But let's return a string that says let's do full name.

04:22.310 --> 04:30.680
This does still this tell us to stop first name the last name has been late and then in here let's add

04:30.680 --> 04:35.980
in the number of times and we're not going to pluralized correctly or anything we'll just say this dot

04:36.410 --> 04:38.980
tardies like that.

04:39.170 --> 04:43.830
So blue still has been late three times.

04:43.880 --> 04:50.750
OK so if we save this now and we instantiate a new student we're not using grades so I guess I could

04:50.750 --> 04:54.360
pass one in here so I'm in first grade or first year.

04:54.500 --> 04:56.230
And blue is in second year.

04:56.390 --> 04:59.320
Now I'm going to run this code and if we look at students now.

04:59.320 --> 05:01.640
So let's look at first student.

05:01.690 --> 05:08.350
Now if I access Mark late I have a method available to me and if I execute it I don't need to pass anything

05:08.350 --> 05:16.480
in code still has been late one times and if I look at first student tardies Now I should have earlier

05:16.570 --> 05:22.020
looked at it it was 0 0 0 and make this a bit larger.

05:22.060 --> 05:25.430
I've now marked it and I can do the same thing one more time.

05:25.450 --> 05:26.600
And how about two more times.

05:26.650 --> 05:27.750
So now I have been late.

05:27.780 --> 05:29.120
Three times.

05:29.530 --> 05:31.300
We don't have any logic in there.

05:31.360 --> 05:37.540
I mean we could add in a little conditional to check if it's greater than 3 then we expel you.

05:37.650 --> 05:38.940
Why don't we do that really quickly.

05:38.940 --> 05:45.940
So we'll add one to tardies and then we'll just add a conditional if this does tardies is greater than

05:45.940 --> 05:48.180
or equal to 3 return.

05:48.280 --> 05:49.800
You are expelled.

05:49.810 --> 05:57.810
So if I rerun my code instantiate or let's go back to 1st student and do Mark late the first time the

05:57.820 --> 06:03.590
second time and the third time you are expelled and every other time you're expelled.

06:03.640 --> 06:05.520
OK that's good enough for us.

06:05.530 --> 06:09.960
The last thing we'll talk about with an instance method is to finding one that takes some sort of argument.

06:10.180 --> 06:15.690
Let's also add in an array here called scores.

06:15.690 --> 06:20.320
It will start as empty because there are no tests at the beginning when we create a student but then

06:20.380 --> 06:26.760
we're going to create a method and our first one this will be super easy we'll just call it add score

06:28.300 --> 06:31.990
and it will take in a new score and then we'll just do this dot.

06:32.320 --> 06:38.170
And what we call this test scores push score so this will just add the score on to the end.

06:38.290 --> 06:44.130
Now yes you could just you could access this directly but we'll talk about that in a second.

06:44.140 --> 06:48.340
So this stops scores up push and then let's return the stop scores.

06:48.340 --> 06:53.820
So if I rerun my code and I now look at let's do second student this time.

06:54.100 --> 06:55.780
Second student scores.

06:55.900 --> 07:00.150
It's empty and I could just do manually just push on from here.

07:00.160 --> 07:04.540
There's nothing stopping me from doing that but it's more conventional to define a method that will

07:04.540 --> 07:06.610
do this to prevent.

07:06.610 --> 07:10.140
There's nothing stopping anybody from manually changing any of these properties.

07:10.270 --> 07:15.490
But the conventional way of writing a class is that you assume that a developer or somebody will use

07:15.580 --> 07:16.970
a method that you put there.

07:17.260 --> 07:23.110
So we're going to use this instead as our interface to the data rather than we would ask someone not

07:23.110 --> 07:24.800
to directly change our data.

07:24.850 --> 07:27.440
Instead go through some sort of method.

07:27.820 --> 07:29.100
So we have ADD score.

07:29.290 --> 07:36.370
So I'll do second student up and score and then here what do we want to add but say the score is blue

07:36.370 --> 07:37.180
is pretty good.

07:37.190 --> 07:46.350
He has a 92 and let's do one more this time in 87 and now if we look at second student debt scores you

07:46.350 --> 07:48.410
can see where we were returning it already.

07:48.420 --> 07:50.220
But we have two scores in there.

07:50.370 --> 07:59.040
So the last thing that I want to do is create something called calculate average method and just need

07:59.040 --> 08:04.050
to take any arguments in and it should return the average of the scores in the individual student's

08:04.110 --> 08:05.370
scores array.

08:05.400 --> 08:11.160
So we'll have this study scores and we're going to need to some of them all up and then we'll need to

08:11.190 --> 08:16.870
divide them by the the length of the array So to calculate the sum of all the elements first.

08:16.890 --> 08:25.290
You could use Reduce like this and I'm going to make a separate variable here so let's call this sum

08:26.490 --> 08:28.740
and then we're going to return some.

08:28.740 --> 08:32.900
Divided by this scores dot length.

08:32.970 --> 08:39.030
So this logic is just here to reduce it's going to take each item and you can add it together and create

08:39.030 --> 08:44.700
a total So each number in that this dot scores array save it to the sum variable and then we return

08:44.700 --> 08:46.660
some divided by the Dutch course length.

08:46.710 --> 08:53.760
Let's test it out so first student dot scores and a way we want to use add score to 98 and then I did

08:53.760 --> 08:59.970
poorly and I got a 76 and then I did let's just leave it at those to be easier to tell if it's working

08:59.970 --> 09:00.750
actually.

09:00.750 --> 09:05.570
So now if we do calculate average There we go 87.

09:05.800 --> 09:09.930
Now if I add a different score in C I do really well get 100.

09:09.940 --> 09:12.780
Now our average goes up and we could round it and all that.

09:12.990 --> 09:13.530
OK.

09:13.660 --> 09:18.290
So although I want to show here is the basics of defining class with instance methods.

09:18.310 --> 09:23.680
So we can define a simple instance method that just returned a string using some properties we can find

09:23.680 --> 09:30.370
when a little more complex that manipulate one of the existing properties on our instance or we can

09:30.370 --> 09:34.280
do something like calculate average which is going to you know have a little more math than that.

09:34.300 --> 09:38.260
But the idea is that all of these operate on individual instances.

09:38.260 --> 09:43.330
So next we'll take a brief look at creating a class method which we won't do very often but I should

09:43.330 --> 09:48.550
put it in here just because we're talking about classes in East 20:15 at this point and it's covered.

09:48.830 --> 09:49.160
OK.

09:49.180 --> 09:49.720
See you then.
