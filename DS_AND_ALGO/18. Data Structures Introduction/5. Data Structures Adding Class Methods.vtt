WEBVTT

00:00.240 --> 00:01.050
Welcome back.

00:01.050 --> 00:03.690
In this video we're going to talk about class methods.

00:03.840 --> 00:08.980
So we talked about creating a class or defining the pattern writing a constructor method.

00:09.090 --> 00:11.580
But the new keyword we talked about instance methods.

00:11.580 --> 00:16.530
Now we're talking about a second type of method you can add to eight years 2015 class called a class

00:16.530 --> 00:21.210
method where we use the static keyword in front of the method definition.

00:21.210 --> 00:28.620
So this allows us to do is to find methods or functionality that is pertinent to classes but not necessarily

00:28.620 --> 00:31.650
to individual instances of a class.

00:31.650 --> 00:37.170
So this is actually not that common and most of what we do in this course is going to be around instance

00:37.170 --> 00:39.150
methods for our data structures.

00:39.150 --> 00:45.030
But if we go to the docs on MDI and again I like this explanation the static keyword defines a static

00:45.030 --> 00:45.930
method for a class.

00:45.930 --> 00:52.110
Static methods are called without instantiating their class and cannot be called through a class instance.

00:52.230 --> 00:56.120
They're often used to create utility functions for an application.

00:56.190 --> 01:00.870
So the example that I added here which is not a complete method by the way I didn't write the actual

01:00.870 --> 01:06.330
functionality but the idea is that we can have a method called enroll students and this is a class method

01:06.720 --> 01:09.750
you could pass in multiple students in an array.

01:09.780 --> 01:16.200
For example like we have down here and this would go and maybe send emails to each of their each of

01:16.200 --> 01:19.130
their associated email addresses or something like that.

01:19.140 --> 01:21.320
The idea is that this has to do.

01:21.330 --> 01:23.890
It's more like a utility function I like that explanation.

01:23.910 --> 01:30.210
It's not related to a single individual student where we are using data from that instance like we were

01:30.210 --> 01:30.800
here.

01:30.930 --> 01:35.160
We're using the name first name and the last name of each individual student.

01:35.160 --> 01:42.180
And so we would call this first student dot for name but this enroll students which again is not fully

01:42.180 --> 01:42.920
defined.

01:43.140 --> 01:46.630
What it does is not related to a particular instance.

01:46.740 --> 01:51.750
It's just part of the class in general and some some overall functionality some utility function that

01:51.750 --> 01:56.090
we want and the way we call that is student with a capital S..

01:56.100 --> 02:03.210
So back here in our code if I try and add a class method down here we'll just call 1.

02:03.510 --> 02:07.530
Enroll students which is fine but we're not going to actually enroll in the.

02:08.380 --> 02:13.200
We're just going to return a string and rolling students.

02:13.530 --> 02:14.180
Oh boy.

02:15.820 --> 02:16.620
OK.

02:17.210 --> 02:22.880
So just the most basic possible class method here and what I want to show is that if we instantiate

02:22.880 --> 02:30.210
these first student I can't call first student dot what we call it enroll students.

02:31.190 --> 02:33.930
I'll use a capital E which I did not mean to do.

02:33.930 --> 02:36.170
But either way it's not going to work.

02:36.180 --> 02:38.090
I need to do student.

02:38.130 --> 02:40.530
Enroll students and need parents.

02:40.680 --> 02:42.320
And now we can execute that method.

02:42.450 --> 02:48.180
So this is functionality that is not relevant to an individual instance but we still want it as part

02:48.180 --> 02:53.670
of the Student class it has to do with students in some way or the helper method a utility method and

02:53.670 --> 02:56.740
with students it's kind of hard to show an actual example that makes sense.

02:56.910 --> 02:59.080
So we actually have a second example here.

02:59.160 --> 03:01.880
This is one that I took from the documentation on MDA.

03:02.130 --> 03:03.950
So we have a class called point.

03:03.990 --> 03:09.480
So imagine a point on a what's it called a cartesian plane an x y coordinate basically.

03:09.590 --> 03:15.840
And if we're working in this this coordinate system each point has an x value and a Y so we can initialize

03:15.840 --> 03:19.270
new ones down here 5 come five 10 come a 10.

03:19.350 --> 03:25.380
But then there's some some utility method that we want like distance calculating the distance between

03:25.380 --> 03:31.980
two points which it's been a while probably for me definitely for some of you probably since you've

03:31.980 --> 03:34.560
had to use this or maybe you never learned it.

03:34.590 --> 03:40.170
There's a distance formula where this is the math you need to do to figure out the point between two

03:40.230 --> 03:46.020
or the distance between two points which it has to do with the forming a right triangle and the hypotenuse

03:46.020 --> 03:47.780
of that triangle.

03:47.870 --> 03:51.590
Anyway let's not go into it but this is the math for it.

03:51.600 --> 03:54.180
So you could make this into a class method.

03:54.180 --> 03:59.670
It doesn't make sense to have the distance method B on an individual instance.

03:59.670 --> 04:01.560
So for example I'm going to run this.

04:01.650 --> 04:08.100
So I have P1 and P2 if I wanted to find the distance between P1 and P2 rather than putting you know

04:08.130 --> 04:11.000
how would I do that P1 dot distance.

04:11.040 --> 04:13.660
And then I pass in to I mean that could work.

04:13.740 --> 04:15.150
You could implement it that way.

04:15.150 --> 04:19.430
But this is more a utility function so we make it a class method.

04:19.620 --> 04:27.660
So instead I'm going to call Point Capital P point distance and then I pass in P1 and P2.

04:27.920 --> 04:30.810
And this is the distance between the two.

04:30.860 --> 04:33.900
Does that make sense why you would maybe organize it this way.

04:34.070 --> 04:39.340
Of course all of Object-Oriented Programming all of everything we're doing with this class syntax.

04:39.470 --> 04:44.740
It's just about making things organized better or easier to understand and more logical.

04:44.750 --> 04:49.670
So that's pretty much it two class methods all that you do is put the static keyword in front of them

04:50.000 --> 04:54.390
and that makes it a class method which means that you no longer call it on an individual method or on

04:54.450 --> 05:00.950
an individual instance you call it on the class itself like point or earlier in our example we had student

05:00.950 --> 05:04.620
capital S dot enroll students.

05:05.170 --> 05:05.730
OK.

05:05.890 --> 05:12.020
Versus instance method to call on an individual instance like second student or one dot.

05:12.080 --> 05:16.910
Well we don't have any instance methods in this example but if we did we would call them on P1 or P2

05:16.910 --> 05:17.580
and so on.

05:17.750 --> 05:21.550
So as I mentioned earlier this is how we'll be using classes ourself.

05:21.590 --> 05:27.560
Well mainly be defining a class some data structure class binary search tree class doubly linked list

05:27.980 --> 05:34.250
inside of it we have our constructor all the default values are the initial properties we need are singly

05:34.250 --> 05:39.380
linked list or are binary search tree to have and then we'll have a bunch of instance methods as I showed

05:39.380 --> 05:40.340
in the last video.

05:40.490 --> 05:45.020
Some of these these data structures will look at might have 10 different methods that we define and

05:45.020 --> 05:49.880
it's going to be pretty rare that we're going to use any static methods but I felt that this would be

05:49.880 --> 05:54.770
incomplete if I didn't at least explain their existence if I only mentioned instance methods.

05:54.770 --> 05:56.980
It would be disingenuous.

05:57.080 --> 05:58.080
Is not the right word.

05:58.160 --> 06:00.880
It would be incomplete if me so I needed to show that they exist.

06:01.010 --> 06:03.170
But most of what we're going to do is going to follow this pattern.

06:03.170 --> 06:08.300
Class data structure whatever it is called Our constructor and then a bunch of instance methods that

06:08.300 --> 06:09.200
make it all work.

06:09.200 --> 06:14.490
And lastly remember that the word the key word this behaves a bit different than normal.

06:14.840 --> 06:19.620
If there is a normal it always behaves differently but the way that it behaves instead of just 20:15

06:19.640 --> 06:25.580
classes that instead of any instance method or the constructor the keyword this refers to the object

06:25.640 --> 06:28.420
created from that individual class the actual instance.

06:28.570 --> 06:32.350
And we've already mentioned that but I just put a slide in here just to to make that extra clear.

06:32.420 --> 06:34.640
So to recap everything here.

06:34.820 --> 06:39.770
Classes are blueprints that one created make objects known as instances.

06:39.770 --> 06:43.600
Classes are created or instantiated with the new keyword.

06:43.850 --> 06:48.950
The constructor function is a special function that gets run when the class is instantiated.

06:48.950 --> 06:55.550
When you run new student the student constructor is run instance methods can be added to classes similar

06:55.550 --> 07:00.050
to methods and objects and class methods can be added with a static keyword.

07:00.290 --> 07:00.530
All right.

07:00.530 --> 07:02.450
Now that we get all of that out the way.

07:02.480 --> 07:07.250
Now we can look forward to actually diving into our first data structure are going to start off with

07:07.310 --> 07:09.490
singly linked lists so that's up next.

07:09.500 --> 07:11.690
We'll be defining our first class sivin.
