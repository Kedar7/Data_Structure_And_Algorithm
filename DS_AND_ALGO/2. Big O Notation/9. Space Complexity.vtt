WEBVTT

00:00.240 --> 00:01.560
All right welcome back.

00:01.560 --> 00:06.510
So now we shift gears a little bit and we're going to talk about something called space complexity.

00:06.510 --> 00:11.670
Everything we've talked about so far we've been worrying about time about how fast algorithms run with

00:11.670 --> 00:12.520
the runtime.

00:12.960 --> 00:14.770
That's called time complexity.

00:14.850 --> 00:19.920
We've been analyzing the runtime of an algorithm as the size that the input increases.

00:19.920 --> 00:26.490
Now let's talk about what happens to the space that an algorithm takes up as the size of the input increases.

00:26.550 --> 00:32.660
We can still use Big-O notation for the same thing use the same formal syntax for describing what happened.

00:32.790 --> 00:34.790
But now we're going to focus on space.

00:34.860 --> 00:40.410
The amount of memory that's taken up so there's some basic things we have to get out of the way.

00:40.410 --> 00:48.690
One is that obviously as an grows if we're approaching infinity the size of the input itself which is

00:48.690 --> 00:50.040
and is going to grow.

00:50.040 --> 00:51.780
So we're going to ignore that part.

00:51.780 --> 00:55.490
You might hear the term auxilary space complexity if you do some research.

00:55.500 --> 01:01.980
If you read Wikipedia or something that refers to the space required by the algorithm only not including

01:01.980 --> 01:03.710
the space taken up by the inputs.

01:03.810 --> 01:05.090
That's what we're going to talk about.

01:05.220 --> 01:09.770
We care about the algorithm itself because our end is growing.

01:09.780 --> 01:12.150
That's the big end and big.

01:12.160 --> 01:13.100
Oh that's good.

01:13.110 --> 01:18.210
That's kind of the point we're going to say that as and grows we assume that the input end is going

01:18.210 --> 01:18.460
to grow.

01:18.450 --> 01:25.200
So let's not care about that space let's care about what repercussions that has inside the algorithm.

01:25.200 --> 01:30.210
So unless otherwise noted when we talk about space complexity technically we're talking about auxilary

01:30.210 --> 01:31.470
space complexity.

01:31.470 --> 01:36.870
Hopefully it's not too scary but basically it just means we're focusing on what happens inside the algorithm.

01:36.930 --> 01:39.050
So some basic rules of thumb.

01:39.050 --> 01:45.270
The first is that most primitive things like booleans numbers undefined null and Javascript are constant

01:45.270 --> 01:48.540
space so it doesn't matter what the size of the input is.

01:48.570 --> 01:54.420
If the number is 1 or the number is 1000 we can consider it constant space doesn't matter for a boolean

01:54.420 --> 01:58.240
is true or false takes up the same amount of space.

01:58.260 --> 02:04.180
Strings are a bit different because they require 0 of space so if and is the length the string.

02:04.350 --> 02:10.830
If we have you know the input grows to a thousand characters Well that's actually that's a bad example

02:10.920 --> 02:17.710
if it goes to 50 characters the string takes up 50 times more space than a single character string.

02:18.930 --> 02:22.480
Same thing with reference types arrays and objects.

02:22.520 --> 02:28.200
Generally we're talking about O event where and it's the length of the array or the number of keys for

02:28.200 --> 02:29.020
an object.

02:29.190 --> 02:34.830
It's not really a length technically but so if and is if the length of an array is forwarder compared

02:34.830 --> 02:40.160
to another one that is two it takes up twice as much space as the shorter array.

02:40.800 --> 02:42.780
So let's take a look at an example.

02:42.990 --> 02:48.280
So here we're focusing on not time complexity we're focusing on space complexity.

02:48.390 --> 02:55.680
So this function called some it takes an array and it just sums all the items in the array.

02:56.100 --> 02:59.150
So we have a variable total start to 0.

02:59.290 --> 03:02.990
Then we have a loop that goes from 0 to the end of the array.

03:03.390 --> 03:07.590
And we're just adding in the value of each item in the array to the total variable.

03:07.590 --> 03:09.110
And then we return it at the end.

03:09.270 --> 03:11.030
So again space not time.

03:11.030 --> 03:12.200
So we're concerned about.

03:12.210 --> 03:14.130
So what are the things that take up space.

03:14.490 --> 03:22.140
Well no matter what the array length is we have one variable called Total one number and then we're

03:22.200 --> 03:23.040
looping through.

03:23.100 --> 03:25.000
But we're not concerned about that time again.

03:25.170 --> 03:29.440
And then we have a second declaration inside the for loop equals zero.

03:29.640 --> 03:34.380
So that's another number and that's it for space.

03:34.380 --> 03:38.540
We're coming back to the total variable we're adding into it but that doesn't matter.

03:38.550 --> 03:39.610
That takes time.

03:39.690 --> 03:41.130
But the space is already there.

03:41.250 --> 03:47.490
So no matter what the size of the array is of end or in this case a r r as it grows might be a thousand

03:47.490 --> 03:48.930
items it might be a million items.

03:48.960 --> 03:51.690
Well it might be 10 or 50 or thousand.

03:51.690 --> 03:53.000
Let's start simple.

03:53.100 --> 03:58.740
It doesn't have an impact on the space that's taken up because we only have these two variables and

03:58.740 --> 04:00.150
they exist no matter what.

04:00.270 --> 04:05.180
We're not adding new variables based off of the length we're adding to the total variable.

04:05.190 --> 04:06.990
But we're not making a new variable.

04:07.290 --> 04:12.160
So that really just means we have constant space of one space.

04:12.210 --> 04:15.860
It's always the same no matter the size of the input.

04:16.440 --> 04:17.280
Here's another one.

04:17.550 --> 04:19.530
So this is called double.

04:19.530 --> 04:23.390
It takes an array and well why don't I just copy this one and show you.

04:23.430 --> 04:28.540
So I've copied it in and it's called Double pass in an array of 1 to 3.

04:28.560 --> 04:29.970
What does it return to me.

04:29.970 --> 04:32.330
An array with two items is what I say.

04:32.430 --> 04:34.270
An array with three items is saying like.

04:34.350 --> 04:36.780
But each one has been doubled.

04:36.870 --> 04:40.380
And what's important to note it is making a new array.

04:40.770 --> 04:42.900
So it starts with making that new array.

04:42.900 --> 04:49.410
Then it loops over the length of the first array and then it multiplies each item and pushes that on

04:49.500 --> 04:52.530
to new array and then returns new array.

04:52.950 --> 04:59.070
So what does that mean for the space complexity of this as the array length grows as the input approaches

04:59.070 --> 05:00.030
infinity.

05:00.280 --> 05:05.160
But to ignore the fact that javascript can't handle that what happens to the space that this algorithm

05:05.160 --> 05:06.450
takes up in here.

05:06.480 --> 05:07.670
So yeah we have this.

05:07.690 --> 05:10.380
We're going to make a new array no matter what every time.

05:10.830 --> 05:17.500
But that's not that significant when we consider this right here we have this new array and it's getting

05:17.500 --> 05:22.590
longer and longer and longer directly in proportion to the length of the input.

05:22.840 --> 05:27.440
So if the array is 10 items here we're storing 10 items in a new array.

05:27.520 --> 05:32.980
If this is 50 items or storing 50 items here in a new array and returning that so the space that's taken

05:32.980 --> 05:38.800
up is directly proportionate to N to the input array.

05:38.800 --> 05:41.360
So end numbers we get 0 of and space.

05:41.410 --> 05:46.570
So we don't need to care about things like this we can simplify it down just to the fuzziest level which

05:46.570 --> 05:52.000
is of end rather than of and plus one or something like that or actually plus 2 because we also have

05:52.000 --> 05:52.620
this.

05:52.660 --> 05:53.590
Those don't matter.

05:53.860 --> 05:55.110
So I know it's a lot.

05:55.180 --> 05:58.410
And it's it's hard to understand right away.

05:58.480 --> 05:59.440
And it might not click.

05:59.440 --> 06:04.390
That's ok though we have some exercises but I want to make it clear that you do not need to master this

06:04.390 --> 06:05.430
before we move on.

06:05.620 --> 06:10.520
I should just delete the whole point is that I should have in ten section so now will have a couple

06:10.520 --> 06:13.610
of solutions and I want to be able to say hey the space complex.

06:13.620 --> 06:14.810
Yeah this one is great.

06:15.160 --> 06:22.960
And the time to flex this one is terrible and squared time complexity but constant space complexity

06:22.960 --> 06:23.620
or something.

06:23.830 --> 06:26.820
And you should hopefully be able to understand what I mean by that.
