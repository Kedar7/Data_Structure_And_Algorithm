WEBVTT

00:00.180 --> 00:00.420
All right.

00:00.420 --> 00:01.050
Welcome back.

00:01.050 --> 00:02.050
This will be really quick.

00:02.070 --> 00:04.700
I just want to touch on some of the built in Array methods.

00:04.710 --> 00:10.950
There are many of them and I want to stress that you do not need to know or memorize any of this information

00:11.160 --> 00:17.120
but hopefully it makes sense as to how we arrive at the numbers when we're talking about Big O notation.

00:17.130 --> 00:18.930
So again I have a little emoji.

00:18.960 --> 00:21.530
You don't need to know all this but let's take a look.

00:21.540 --> 00:27.660
The first four we've already discussed maybe not by name but push and pop are constant time adding and

00:27.660 --> 00:33.150
removing data to the end of the array of any array whether it's one item or 10000 or a million items

00:33.420 --> 00:34.300
is Constantine.

00:34.380 --> 00:36.610
It's easy there's no reindexing involved.

00:36.720 --> 00:39.270
We just put it at the end and give it a spot.

00:39.270 --> 00:41.820
That's basically it shifting in and shift.

00:41.820 --> 00:48.360
On the other hand are a little more troublesome because we potentially have to re-index will not potentially

00:48.420 --> 00:51.250
we have to re-index every element in the array.

00:51.360 --> 00:54.120
If you're adding to the beginning or removing from the beginning.

00:54.180 --> 00:59.850
So as the number of elements grows to 10000 or a million then the number of things we have to re-index

01:00.090 --> 01:01.500
grows in proportion with that.

01:01.500 --> 01:03.970
So it's over in it's linear time.

01:04.020 --> 01:10.050
So those for adding and removing which we've discussed trying to highlight the top four won't though.

01:10.230 --> 01:10.790
OK well let's.

01:10.850 --> 01:12.570
That's the best I can do.

01:12.600 --> 01:17.010
Next up we've got this little chunk of concat slice in Splice.

01:17.070 --> 01:20.840
So all of these are over in linear time and there can be some confusion.

01:20.880 --> 01:24.750
Something that concat takes multiple arrays and merges them together.

01:25.080 --> 01:31.940
And when we say oh havan you might think that that just implies you know one array of elements and we're

01:31.950 --> 01:33.230
acting on that one array.

01:33.240 --> 01:34.680
What happens when there's two.

01:35.010 --> 01:42.150
Technically you could argue that it should be you know 0 0 of and plus am Where am would be the size

01:42.150 --> 01:43.640
of the second array.

01:43.770 --> 01:45.190
But oh of and it's fine.

01:45.210 --> 01:49.910
It's basically just expressing the fact that as these are raised grow that you're merging.

01:50.040 --> 01:55.170
So is the time that it's going to take and it grows in proportion with the size the total size of the

01:55.170 --> 01:57.100
new array at the end.

01:57.540 --> 02:00.180
What else do we have slice and splice.

02:00.540 --> 02:06.090
So slice is going to return a copy of part of an array or the entire thing if you want it to.

02:06.090 --> 02:12.570
So then in this case refers to the fact that if we try to copy 10 elements versus 1000 elements from

02:12.570 --> 02:16.470
an array the amount of time takes grows in proportion with that size.

02:16.470 --> 02:20.320
How large of a copy or how many elements we're trying to copy.

02:20.340 --> 02:21.860
So that's open.

02:22.020 --> 02:24.370
And then lastly would we have splice.

02:24.690 --> 02:25.740
Where are you splice.

02:25.740 --> 02:32.730
There you go and splice is going to remove and add new elements and splice is a little different because

02:32.760 --> 02:35.230
it's it's quite versatile.

02:35.430 --> 02:38.490
So we can insert at the beginning of an array.

02:38.490 --> 02:42.480
We could also insert at the very end of an array we can replace given elements.

02:42.480 --> 02:47.910
But in general it's over and if we're inserting in the middle of the array we just simplify that to.

02:47.970 --> 02:53.520
And remember that does mean shifting and re-indexing everything that comes after it.

02:53.520 --> 02:58.800
So even if it's only in the middle we would still say it's over and even if it's 0 of and divided by

02:58.800 --> 02:59.150
two.

02:59.310 --> 03:01.680
We just don't care about that.

03:01.680 --> 03:08.490
So in general a lot of things working with arrays are 0 of n you may have noticed this one down here

03:08.940 --> 03:12.440
sort of sort of and log.

03:12.450 --> 03:17.310
And so we're not going to talk about how this is derived where the log comes in where the end comes

03:17.310 --> 03:19.170
in why they're multiplied.

03:19.170 --> 03:23.500
We spend a lot of time talking about sorting algorithms and there are many of them out there.

03:23.550 --> 03:27.840
We talked about six or seven I think it's seven but I'm not positive.

03:28.110 --> 03:33.510
We talk about a lot of them and some of them we talk about have the time complexity of O and log in.

03:33.540 --> 03:39.270
So we'll explain how we get there but just know that the time it takes to sort an array is larger than

03:39.270 --> 03:39.990
just 0.

03:40.050 --> 03:43.960
And we have to make comparisons we have to move things around.

03:43.980 --> 03:48.520
It's not enough just to look at every element once and that's not enough just to sort it.

03:48.570 --> 03:51.320
It's a little more sometimes a lot more complicated.

03:51.360 --> 03:52.860
So just keep that in mind.

03:52.920 --> 03:57.860
Again we're not explaining how we get this what the math is just yet but it will make sense in due time

03:57.870 --> 04:00.380
I promise if you make it to the sorting sections.

04:00.810 --> 04:03.200
So it is the slowest thing on here.

04:03.450 --> 04:07.120
And then things like Map filter reduce for each or all.

04:07.140 --> 04:14.940
And those are looping over each element or doing something with each element tallying it you know doing

04:14.940 --> 04:18.080
a boolean test or just printing them out or whatever we're doing.

04:18.090 --> 04:21.650
It just involves acting on each element or with each element.

04:21.750 --> 04:26.230
So as the size of the array grows so does the amount of time it takes of it.

04:26.250 --> 04:30.750
So you can see almost everything that we could do with an array all the built in methods not all of

04:30.750 --> 04:32.330
them but all the ones listed here are.

04:32.350 --> 04:36.890
And sorting takes longer and then push and pop are super fast.

04:36.900 --> 04:43.440
Just like with basic accessing using an index super fast it's well constant time and they're much faster

04:43.440 --> 04:45.270
than adding and removing from the beginning.

04:45.270 --> 04:46.540
As we've talked about.

04:46.920 --> 04:47.290
OK.

04:47.340 --> 04:48.180
So that's a lot.

04:48.180 --> 04:53.940
And remember you do not need to know all of this really the main takeaways here between objects in a

04:53.940 --> 04:54.630
race.

04:54.830 --> 05:01.200
One objects are fast at pretty much everything but there's no order to arrays are great when you need

05:01.200 --> 05:06.960
an order but still be mindful that it's better if you can if you can do it to add and remove from the

05:07.050 --> 05:12.480
end and avoid adding and removing from the beginning because that starts this cascade effect.

05:12.480 --> 05:18.660
Hence the term shift and shift and everything else to be indexed and the same goes to adding and removing

05:18.660 --> 05:23.850
from the middle you have to start another cascade a little tidal wave and things have to be very indexed

05:23.940 --> 05:26.490
after whatever you added or removed.

05:26.670 --> 05:27.050
All right.

05:27.040 --> 05:31.290
So hopefully that makes sense how we get to these numbers what the values mean.

05:31.290 --> 05:35.320
If not we'll be spending a lot more time talking about big-O as we go.

05:35.580 --> 05:41.970
And this is really a primer for later on and we get to things like sorting or when we talk about length

05:41.970 --> 05:45.610
lists and how they are also an ordered data structure.

05:45.630 --> 05:49.770
But we can add and remove from the beginning and there's no problem it's constant time.

05:49.800 --> 05:50.870
So how does that work.

05:51.030 --> 05:51.960
So we'll get there.

05:51.960 --> 05:52.760
That's coming up.

05:52.770 --> 05:54.950
That's all I have to say about arrays and objects.

05:55.020 --> 05:56.210
We're done for now.
