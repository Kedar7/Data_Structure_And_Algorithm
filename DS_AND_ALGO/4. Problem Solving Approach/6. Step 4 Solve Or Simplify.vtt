WEBVTT

00:00.180 --> 00:01.090
Welcome back.

00:01.110 --> 00:06.090
So we've talked about the first three components the first three steps in this five step problem solving

00:06.090 --> 00:10.920
approach understand the problem then go through some concrete examples.

00:10.940 --> 00:14.280
Talk about edge cases inputs outputs that sort of thing.

00:14.280 --> 00:19.490
Next break down your approach your solution into a couple of steps that you can follow.

00:19.490 --> 00:23.880
It doesn't have to be in saying the details but it does help if you can come up with pretty thorough

00:23.880 --> 00:24.620
steps.

00:24.900 --> 00:31.320
And then sometimes if all of that went well and you feel good about it you can just self and you write

00:31.320 --> 00:32.380
your code right away.

00:32.790 --> 00:34.320
And I should note that's not the last step.

00:34.320 --> 00:39.420
Even if you do solve it there's still a step after this but sometimes you're not ready to solve the

00:39.420 --> 00:40.930
entire problem at this point.

00:41.130 --> 00:45.500
You might feel good about 80 percent but then there's this one thing you're not sure how to do or there's

00:45.510 --> 00:47.800
you know two things that are really challenging.

00:47.820 --> 00:53.440
So that's where simplify comes and solve or simplify or solve slash simplify.

00:53.560 --> 00:53.990
OK.

00:54.210 --> 00:55.430
Designated slide.

00:55.500 --> 00:56.970
So solve the problem if you can.

00:57.030 --> 01:02.580
And if you can't solve a simpler problem now that doesn't mean changing the subject entirely in picking

01:02.780 --> 01:05.340
you know let's solve one plus one.

01:05.580 --> 01:06.520
That's stupid.

01:06.530 --> 01:13.410
I know I said that what it really means is trying to ignore the part that is giving you a really hard

01:13.410 --> 01:16.210
time in order to focus on everything else.

01:16.290 --> 01:18.360
So why is it even worth doing this.

01:18.630 --> 01:24.240
Well first of all in an interview setting often you want to have something to show for yourself.

01:24.300 --> 01:30.180
So instead of getting stuck on one difficult part of a problem and making zero progress at all because

01:30.480 --> 01:35.880
you're you know putting all of your eggs in one basket of being able to solve it 100 percent before

01:35.880 --> 01:39.340
you even start writing code that often can look bad.

01:39.540 --> 01:43.640
It's much better even if you know there's some part that you're going to get stuck on.

01:43.650 --> 01:49.230
It's much better to just start writing code to do the stuff you know how to do all the while keeping

01:49.230 --> 01:52.590
in mind that you do need to incorporate that harder part back in.

01:52.590 --> 01:58.680
Secondly it's pretty common that in simplifying a problem you'll gain insight into the actual solution

01:58.680 --> 02:02.330
into the harder part of the problem and something will click into place.

02:02.340 --> 02:07.100
So I really really recommend that if you do get stuck on something but you know where to start.

02:07.230 --> 02:09.070
Or you know a place to start.

02:09.180 --> 02:13.230
You should just go for it once of course you've done the first three steps.

02:13.410 --> 02:14.760
You understood the problem.

02:14.760 --> 02:18.240
You've done concrete examples and you've broken it down into steps.

02:18.450 --> 02:22.710
So as far as the simplification I like to think about it this way.

02:22.710 --> 02:24.780
So you find the core difficulty in what you're trying to do.

02:24.780 --> 02:29.900
The thing that is tripping you up that you're panicking about temporarily ignore that difficulty.

02:30.040 --> 02:35.440
Write a simplified solution and then incorporate that difficulty back in if you can.

02:35.660 --> 02:41.400
And along the way often at this step you'll you'll gain insight into how this part works.

02:41.400 --> 02:44.200
So one more time let's return to this example.

02:44.250 --> 02:49.300
Write a function which takes in a string and returns counts of each character in the string.

02:49.470 --> 02:56.250
All right so char count remembers should return an object that contains all the account for every alphanumeric

02:56.250 --> 02:58.420
character in an input string.

02:58.470 --> 03:03.650
So ignoring every non letter or number in all the letters should be lower case.

03:03.990 --> 03:07.660
So there's a couple of things that could present difficulties here.

03:08.040 --> 03:10.990
To start off with the really simple obvious ones.

03:11.190 --> 03:14.680
If someone has trouble with looping then this could be problematic.

03:14.750 --> 03:19.400
And if you did have trouble with looping then I would if it were me and I struggled with looping.

03:19.410 --> 03:26.280
I would start by creating an object and just working with the first character in that string or hard

03:26.280 --> 03:29.580
coding in the first five characters probably.

03:29.630 --> 03:32.940
You know I'm not going to get me a job but at least it's a start.

03:32.940 --> 03:37.740
And then once you figure out you know how to handle it for one character the very first item in a string

03:37.740 --> 03:43.720
like right here you lower case it or you add it to the object or you check if it's in the object.

03:43.830 --> 03:46.230
Then you do it for the second character then the third character.

03:46.380 --> 03:49.090
Then you find a pattern that you can turn into a loop.

03:49.440 --> 03:54.540
Another thing that could be problematic is someone might not be comfortable working with keys and values

03:54.540 --> 03:55.530
and objects.

03:55.530 --> 03:59.850
Again a very simple problem and you're probably not going to be interviewing for a job.

03:59.850 --> 04:01.790
If you have trouble doing that.

04:01.890 --> 04:06.540
But if you are trying to solve a problem anyway maybe you're at home and you don't feel good about using

04:06.540 --> 04:08.820
keys and values and manipulating objects.

04:08.820 --> 04:13.620
You could start with a loop and loop over every character in the string and maybe just print out that

04:13.620 --> 04:19.720
character or probably a more realistic thing is that you may not be comfortable working with uppercase

04:19.800 --> 04:22.350
and lowercase strings or for an interview setting.

04:22.440 --> 04:26.960
You might not remember sometimes you know you don't have access to a computer or phone or white board.

04:27.030 --> 04:32.650
You might not remember the exact method that lower cases or upper cases a string in Javascript.

04:32.730 --> 04:39.300
So I would just ignore that I would just start with the main logic and then you know put uppercase and

04:39.300 --> 04:44.640
lowercase characters in there and just deal with it later and just say outloud like I can't remember

04:44.640 --> 04:49.430
exactly how to do this so I'm just going to skip that part and then at the end you know I'll go back.

04:49.440 --> 04:54.270
Or if I had my computer I would just quickly google how to lowercase something in Javascript in that

04:54.280 --> 04:55.880
lower case everything at the beginning.

04:56.070 --> 04:57.650
Something like that.

04:57.660 --> 05:03.580
Now if I did actually face this interview which to be fair it's a pretty easy problem at least on the

05:03.580 --> 05:05.080
surface.

05:05.170 --> 05:11.470
The thing that would probably trip me up the most and trip up most students that I've worked with is

05:11.620 --> 05:15.870
making sure characters alphanumeric making this object return at the end.

05:15.880 --> 05:20.800
Simple enough we could just call it like frequency or count result.

05:20.810 --> 05:25.050
Maybe it's an empty object loop over the string for each character.

05:25.150 --> 05:31.660
So just do for var i equal zero is less than string length.

05:31.660 --> 05:37.180
All right then this gives me each character and we can start off by just adding each character into

05:37.180 --> 05:39.280
that object or checking if it's in that object.

05:39.400 --> 05:46.120
So ignore the number letter part ignore alphanumeric ignore the casing even and just check if that exact

05:46.120 --> 05:48.410
character is in the object.

05:48.730 --> 05:50.580
So I would just use something like.

05:50.640 --> 05:57.640
If result of this make a variable here to make this a little more legible.

05:57.640 --> 06:05.560
So let's make a variable called Char equals string of I instead of having to put string of-I all over

06:05.560 --> 06:06.180
the place.

06:06.250 --> 06:16.810
So if result of char is greater than zero meaning it's already in there then I just copy this and do.

06:16.840 --> 06:25.820
Plus plus else we're going to set result of Chaar equal to one because that means it's not in there

06:25.820 --> 06:26.540
yet.

06:27.290 --> 06:31.880
And this is basically where I would start assuming I don't have a typo.

06:32.480 --> 06:41.360
So if we put my pseudo code that's here if a character haven't conquered this number let her problem

06:41.900 --> 06:45.240
but we're at least getting 90 percent of the way there.

06:46.030 --> 06:51.940
It's just my little bits of pseudo code here and we're not tackling this.

06:51.950 --> 06:53.380
Return the object at the end.

06:53.480 --> 06:58.480
So then return result and let's see if it works ok.

06:58.520 --> 07:06.940
I ran my solution and if I run char count it's large enough char count of hello just make this a bit

07:06.940 --> 07:07.960
larger.

07:08.020 --> 07:13.100
It works you can see that we get 8 E 1 L 2 0 1.

07:13.990 --> 07:15.660
If I instead do.

07:15.850 --> 07:19.090
Hi there like this.

07:19.090 --> 07:22.770
You can see we're also getting uppercase H are getting.

07:22.900 --> 07:31.960
What else exclamation point or getting space so that's not ideal but we're really close.

07:32.360 --> 07:38.870
So now you know if we have this done we could at least figure out the lowercase part or maybe our interviewer

07:38.870 --> 07:42.760
gives us a hint or we have access to figure out how to do the lower case.

07:42.830 --> 07:48.830
It's just a method to lowercase or we can uppercase everything but it's a matter of if we want to lower

07:48.830 --> 07:50.590
case the entire string first.

07:50.690 --> 07:56.600
Or we could do it you know one character at a time so we could come in here and just do two lower case

07:56.630 --> 07:58.810
like that rerun our code

08:01.650 --> 08:06.960
rerun our code and now if we look at Char count of high there it all works.

08:07.140 --> 08:10.430
We have to h e is to case it doesn't matter.

08:10.440 --> 08:14.570
Now we still have the non-alphanumeric characters but this gets us most of the way there.

08:14.790 --> 08:17.360
And now we could do some additional research.

08:17.490 --> 08:21.840
We could ask our interviewer if they had suggestions we could just start spit balling and how to do

08:21.840 --> 08:28.430
that alphanumeric component so to telephone number or if a character is alphanumeric.

08:28.500 --> 08:35.910
There's a couple of options we could define you know an array essentially containing every valid character

08:36.420 --> 08:37.630
which should be really annoying.

08:37.710 --> 08:39.330
So we could have an array that was massive.

08:39.340 --> 08:46.650
It had ab cd upper case and lower case and one every alphanumeric character which I guess is not that

08:46.650 --> 08:48.830
many but still it would be a long array.

08:49.170 --> 08:53.400
We could use a regular expression which is probably what I would do.

08:53.400 --> 08:56.060
And I'll show you a solution with that in the next video.

08:56.580 --> 09:01.650
You could also probably do something with the character codes the ASCII codes.

09:01.650 --> 09:07.110
There's a lot of different ways you could do it and all that we would need to do is plug it in to our

09:07.110 --> 09:08.310
existing code.

09:08.400 --> 09:14.630
So if we were checking if it was a valid character I had maybe just add an additional If statement in

09:14.650 --> 09:15.160
ness.

09:15.190 --> 09:17.340
The inside of that if statement.

09:17.400 --> 09:20.800
So all of this logic states we wouldn't be deleting anything.

09:20.930 --> 09:23.820
We are just adding in that one little component.

09:23.820 --> 09:27.920
So to wrap this up you know this isn't a particularly challenging question.

09:27.960 --> 09:31.950
In all honesty but there's still a lot of different approaches that we could take a lot of different

09:31.950 --> 09:33.080
ways of solving it.

09:33.150 --> 09:37.380
And like I said the next solution I'll show you in the next video as well as a couple of refactored

09:37.380 --> 09:39.650
versions vary quite a bit.

09:40.080 --> 09:46.220
But at the end of the day we write what we can write we loop we add things into the object.

09:46.290 --> 09:50.640
We have a couple of conditionals even if it's not perfect we're still 90 something percent of the way

09:50.640 --> 09:51.160
there.

09:51.240 --> 09:56.130
We just need a way to check if something is alphanumeric and in an interview if you can get 90 percent

09:56.130 --> 10:01.170
of the way there and you just have this one little thing that you know you need to complete you tell

10:01.170 --> 10:05.850
the interviewer you know there's three different ways I'm not sure which one is best or I'm not sure

10:05.850 --> 10:06.360
how to do this.

10:06.360 --> 10:12.090
You have any suggestions on what I could do to check if something is alphanumeric that sort of line

10:12.090 --> 10:14.560
of questioning if you get 90 percent of the way there.

10:14.610 --> 10:20.010
It demonstrates a lot about your problem solving ability rather than just fixating on that before you

10:20.010 --> 10:21.220
even begin.

10:21.240 --> 10:26.770
So it's much better to write something out just like rationally put stuff on the page and hope it works.

10:26.910 --> 10:32.490
But get the right pieces in place so that once you figure out the hard part you can just plug it in.
