WEBVTT

00:00.210 --> 00:00.930
All right.

00:00.930 --> 00:05.700
So we introduced the fact that we're talking about searching for now we're going to focus on searching

00:05.790 --> 00:06.450
an array.

00:06.630 --> 00:12.720
So imagine we have this array with states in it which I didn't type this myself just to be clear I copied

00:12.720 --> 00:12.990
this.

00:12.990 --> 00:16.260
And so it also includes I think 59 items.

00:16.260 --> 00:22.760
It includes territories like American Samoa Puerto Rico's in here Guam things like that.

00:22.830 --> 00:24.000
But that's beside the point.

00:24.000 --> 00:29.730
So imagine that a user typed something in and they're trying to I don't know create an address and then

00:29.730 --> 00:35.020
need to enter a state or territory and for our application we want to make sure it's in this array.

00:35.070 --> 00:36.910
What's the best way of doing that.

00:36.990 --> 00:43.220
And the simplest way is just to look at every single element in order and check if it's what we want.

00:43.530 --> 00:48.580
Right so if the user enters let's say Indiana we would just start at the beginning and check.

00:48.660 --> 00:49.110
OK.

00:49.140 --> 00:50.060
Is this Indiana.

00:50.100 --> 00:50.470
Nope.

00:50.580 --> 00:51.990
Is this Indiana Indiana.

00:52.000 --> 00:53.330
Is this Indiana.

00:53.340 --> 00:55.590
And we keep going until we get to Indiana.

00:55.800 --> 01:01.980
And in that case we return something you know true or we say the index that we found a debt or if it's

01:01.980 --> 01:06.510
not in there we keep going until the end and then we have some some logic at the end that says if it's

01:06.510 --> 01:09.830
not found return false or return negative 1 or something like that.

01:09.900 --> 01:13.140
Now that approach is actually not a bad approach.

01:13.140 --> 01:19.160
Now in this situation where we have sorted data alphabetically sorted there are better ways.

01:19.320 --> 01:23.180
But let's go back to the think ahead had a list called usernames.

01:23.190 --> 01:24.870
This is unsorted.

01:25.080 --> 01:27.660
So there is no order to this at all.

01:27.660 --> 01:29.690
Now somebody enters I hate cats.

01:29.690 --> 01:30.760
It's a user name.

01:30.780 --> 01:32.700
How do we check if it's taken or not.

01:32.700 --> 01:38.310
In that case the best way of doing it is to check every single element one at a time.

01:38.430 --> 01:38.970
Are you.

01:38.970 --> 01:39.690
I hate cats.

01:39.690 --> 01:40.370
No.

01:40.380 --> 01:41.740
Next are you I hate cats.

01:41.760 --> 01:42.280
Nope.

01:42.300 --> 01:45.480
Keep going until we find it or we get to the end.

01:45.570 --> 01:47.850
That is called linear search.

01:48.060 --> 01:54.670
And in fact javascript is doing that things like Index of which you talked about includes.

01:54.720 --> 02:00.190
Find find index all of these methods are doing the same thing behind the scenes.

02:00.390 --> 02:05.290
They're checking every element one at a time to check if whatever we pass in.

02:05.300 --> 02:12.360
So let's do two index of what to do usernames index of Tommy index of zero.

02:12.630 --> 02:15.960
Let's do index of Q is towards the end 15.

02:16.050 --> 02:18.240
We do index or something that's not in there.

02:18.600 --> 02:19.450
Negative 1.

02:19.500 --> 02:22.210
We could also do the same thing with includes.

02:22.350 --> 02:24.670
I'm not going to go through all these methods but let's try.

02:24.680 --> 02:28.530
Does it include Tom.

02:28.650 --> 02:29.590
That's true.

02:29.630 --> 02:30.790
Those include Tom's.

02:30.810 --> 02:31.700
That's false.

02:31.710 --> 02:36.450
So what's happening here is that it is going through and checking each item to see are you Tom's Are

02:36.450 --> 02:38.970
you Tom's over and over until it hits the end.

02:38.970 --> 02:43.140
And if you looked at the source code you would actually see the algorithm that we're going to talk about

02:43.390 --> 02:44.850
and it's very straightforward.

02:44.850 --> 02:46.740
It's called a linear search.

02:46.740 --> 02:48.130
So we've already been describing it.

02:48.150 --> 02:53.040
We visit one item one item at a time starting at the beginning moving forward.

02:53.040 --> 02:56.910
Or we could start at the end and move backward but it doesn't matter.

02:57.000 --> 03:02.870
All that matters is that we're moving at a set interval one item at a time checking every single thing.

03:03.510 --> 03:09.150
So if we were to have this list of numbers array and we want to check for 12 in a search if it's in

03:09.150 --> 03:12.410
there we just start the beginning is 12.

03:12.450 --> 03:12.930
Nope.

03:13.020 --> 03:14.570
Is 8 12 No.

03:14.580 --> 03:18.120
1 is not 12 100 is not 12 12 is 12.

03:18.240 --> 03:23.010
And then we return true or we return the index 0 1 2 3 4.

03:23.040 --> 03:24.560
It depends on what we're doing.

03:24.570 --> 03:29.380
So for index for example it would return for 4 It includes returns true.

03:29.520 --> 03:30.920
So that's linear search.

03:31.140 --> 03:36.060
And what I'm going to do now is something that is a bit different than how we've structured the course

03:36.060 --> 03:36.750
so far.

03:36.840 --> 03:42.450
I'm going to give you pseudo code to try and implemented and I encourage you to write this code on your

03:42.450 --> 03:42.630
own.

03:42.630 --> 03:44.180
This is a nice and simple one.

03:44.460 --> 03:49.500
Here's a pseudo code and then afterwards we'll go through it and I'll write up the solution.

03:49.500 --> 03:53.660
So write a function call it whatever you want but it accepts an array and a value.

03:53.880 --> 03:59.610
So call it linear search and it takes an array full of let's just say its numbers but it doesn't matter

03:59.610 --> 04:06.660
really it saves numbers and then a value another number you just loop through the entire array and check

04:06.660 --> 04:10.800
if the current array element is equal to the value that we pass in.

04:11.160 --> 04:17.450
And if it is return the index at which it's found and if it's never found return negative 1.

04:17.940 --> 04:18.480
OK.

04:18.630 --> 04:21.720
So loop through the entire array check for a value.

04:21.720 --> 04:23.640
Whatever it is let's say we're looking for three.

04:23.850 --> 04:29.120
If you find three return that index if you don't return negative 1.

04:29.190 --> 04:31.270
So this is possible in just a couple lines.

04:31.320 --> 04:32.190
Don't overthink it.

04:32.340 --> 04:34.340
Give it a shot in the next video.

04:34.440 --> 04:36.570
I'll show you a potential solution.

04:36.570 --> 04:39.940
And keep in mind that even though this is simple that doesn't make it bad.

04:40.080 --> 04:45.080
Like we discussed it's used by built in functions things like Index of for example.

04:45.390 --> 04:46.020
OK.

04:46.200 --> 04:46.980
So in the next video.
