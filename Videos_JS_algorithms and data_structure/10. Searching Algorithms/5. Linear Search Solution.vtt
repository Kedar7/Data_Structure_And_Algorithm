WEBVTT

00:00.350 --> 00:04.240
OK so in this video on to implement our basic linear search.

00:04.380 --> 00:05.850
So here's the pseudocode again.

00:05.850 --> 00:11.490
You can write a function or call it let's just call it index for linear search and it's going to accept

00:11.490 --> 00:12.480
an array and a value.

00:12.600 --> 00:14.580
So we can start there.

00:14.610 --> 00:17.890
So I've made a snippet already called Search linear I'm having them.

00:17.890 --> 00:22.050
I'll start with search just like I did with recursion so that they're just grouped together.

00:22.080 --> 00:24.980
So I made that over here new snippet and it closed that away now.

00:25.370 --> 00:31.680
And let's define our function calls linear search and it takes an array and a value.

00:31.820 --> 00:33.480
Let's do it like that.

00:33.510 --> 00:35.050
All right so that's the first step.

00:35.310 --> 00:38.040
So I should be able to call it like this.

00:38.050 --> 00:42.450
Then your search pasand my array of will just do numbers.

00:42.470 --> 00:50.700
Thirty four fifty six one two and then the value I'm looking for is 1 and it should return the index

00:50.700 --> 00:53.360
which is 0 1 2 which should return to.

00:53.580 --> 00:59.310
So the next step is to just loop through the array and check if the current array element is equal to

00:59.310 --> 01:00.190
the value.

01:00.660 --> 01:03.340
So let's start by looping through the array.

01:03.660 --> 01:07.930
That's going to be a for loop or I mean you could do a WHILE loop if you wanted to.

01:08.100 --> 01:09.620
You could even just do a foreach.

01:09.650 --> 01:12.770
There's many ways that will do Forfar equals zero.

01:12.780 --> 01:14.160
We're going to go from the beginning.

01:14.160 --> 01:18.360
So while I is less than array length.

01:19.290 --> 01:27.460
Add one to my and then you need to check if the current array element is equal to the value.

01:27.770 --> 01:32.710
So we access the current array element with R R R R array of.

01:32.720 --> 01:36.410
I am going to check if it's equal to the value.

01:37.070 --> 01:39.150
So we need to make this an if statement.

01:40.270 --> 01:43.090
And if that's the case what are we going to do.

01:43.220 --> 01:44.600
We're going to return.

01:44.960 --> 01:49.720
Well we want to return as you can see here the index at which the element is found.

01:49.760 --> 01:55.520
So that's pretty easy because we already have I which is why I chose not to use a for loop or excuse

01:55.520 --> 01:58.000
me for each other you can still do for each with an index.

01:58.010 --> 02:01.160
But we have I right out of the box because for a loop.

02:01.160 --> 02:02.670
So we just return I.

02:03.140 --> 02:05.640
So in this case I will be zero.

02:05.660 --> 02:08.690
We start we check is array of equal to the value.

02:08.780 --> 02:10.100
No is 34 1.

02:10.160 --> 02:10.700
No.

02:10.940 --> 02:13.100
Next up is 1 is 56 1.

02:13.100 --> 02:13.590
Nope.

02:13.700 --> 02:15.260
Next time through eyes 2.

02:15.440 --> 02:17.880
So we check array of 2 which is 1.

02:17.900 --> 02:19.750
Is that equal to one that we're looking for.

02:19.910 --> 02:20.390
Yes.

02:20.390 --> 02:22.620
So we return I which is 2.

02:22.970 --> 02:27.650
Then we have our final catch all if the value is never found return negative 1.

02:28.160 --> 02:30.620
And the easiest way to do that is just after the loop.

02:30.710 --> 02:31.990
That means we've hit the end.

02:32.180 --> 02:35.490
So if we haven't returned by now that means it's not in there.

02:35.570 --> 02:42.230
So we can just return negative one just like that and a small simplification that we can make we can

02:42.230 --> 02:43.060
get rid of.

02:43.180 --> 02:44.360
You can do this on a single line.

02:44.360 --> 02:49.940
The if statement the conditional just move that back up there like that.

02:50.180 --> 02:52.990
Just shorten it a little bit but it's just a personal preference.

02:53.000 --> 02:56.170
So if Trayvon is triple equal to value return I.

02:56.300 --> 02:57.950
So now let's test this out.

02:57.970 --> 03:02.460
It's a linear search of this we should if it works get 0 1 2.

03:02.550 --> 03:05.260
Going to use command enter to run it.

03:05.510 --> 03:11.390
And there we go we get to let's try it again this time to add some other numbers.

03:12.640 --> 03:16.480
And let's check for 56 which is actually.

03:16.490 --> 03:16.950
Wow.

03:17.000 --> 03:20.450
I'm so bad at picking round numbers I pick the same number twice.

03:20.450 --> 03:27.680
Let's change this one to be 51 and if I run it we get index of 6 0 1 2 3 4 5 6.

03:27.680 --> 03:32.270
Finally let's test it on something that's not in there like 100.

03:32.270 --> 03:33.860
We get negative 1.

03:33.860 --> 03:40.190
Now if I still have my state's array Rigaud because I made this a snippet I should be able to do linear

03:40.190 --> 03:46.510
search pass in states and then check what's the index of Texas for example.

03:46.730 --> 03:51.230
And we get 50 and if I check for you one more.

03:51.230 --> 03:54.110
How about Texas with an X-ray.

03:54.140 --> 03:55.480
It's not in there.

03:55.680 --> 03:56.400
Cool.

03:56.450 --> 03:57.740
So this is linear search.

03:57.740 --> 04:03.740
This is what behind the scenes the builtin index of is doing any of these basic searches that we already

04:03.740 --> 04:05.480
talked about in javascript.

04:05.690 --> 04:12.320
What else was there that was 1 0 find index index of includes all of those are using a linear search

04:13.190 --> 04:16.570
and the last thing we should talk about is the big O of this.

04:16.820 --> 04:19.700
So take a moment and try and figure it out.

04:19.910 --> 04:26.380
The time complexity as the length of that array grows how does the time that it takes the worst case.

04:26.480 --> 04:27.910
How much time does it take.

04:28.700 --> 04:30.730
And the answer is that it's over.

04:30.750 --> 04:36.830
And so as our RE gets longer we have to do more searches we have to do more operations if we're searching

04:36.830 --> 04:38.610
for the last item Wyoming.

04:38.900 --> 04:45.380
We might have to do 59 or we would have to do 15:9 searches but if our states were instead 5000 States

04:45.800 --> 04:49.570
and we're searching for the last one we would have to check 5000 different items.

04:49.580 --> 04:53.900
So as and grows is the length of the array grows so does the amount of time.

04:53.900 --> 04:59.570
So this is 0 0 and it's linear which is also it's called venir search give it away a little bit.

04:59.720 --> 05:06.500
And next we're going to see another search that works differently where if the data is sorted as I hinted

05:06.500 --> 05:08.360
at there's a better way of searching.

05:08.630 --> 05:14.060
And it's a little bit more complicated but it's a fun sort of first algorithm to step things up a bit

05:14.270 --> 05:16.740
from linear search and it's faster.

05:16.790 --> 05:18.530
So we'll see that in the next video.
