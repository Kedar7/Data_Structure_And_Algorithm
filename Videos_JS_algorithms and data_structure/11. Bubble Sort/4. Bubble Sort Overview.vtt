WEBVTT

00:00.100 --> 00:01.320
Hey we'll welcome back.

00:01.320 --> 00:05.760
So the first of the sorting algorithms that we're going to take a look at is called bubble sort.

00:05.760 --> 00:08.450
So bubble sort is not all that efficient.

00:08.470 --> 00:09.950
It's not that commonly used.

00:09.960 --> 00:12.780
There is one use case will discuss where it does excel.

00:12.870 --> 00:17.480
But generally we're not learning it because it's going to be it's not going to rock your world.

00:17.490 --> 00:21.610
You're not going to be implementing it all the time although it is a very good problem.

00:21.640 --> 00:23.710
It's a fun one if you know how to do it.

00:23.730 --> 00:25.330
And there are some optimizations we can make.

00:25.330 --> 00:27.100
So it's a good thing to talk about.

00:27.420 --> 00:30.900
And it also helps us understand why other algorithms improve upon it.

00:30.930 --> 00:32.190
So don't skip it please.

00:32.350 --> 00:32.760
OK.

00:32.880 --> 00:34.280
Now that I've made it sound terrible.

00:34.410 --> 00:36.550
Let's talk about why it's called bubble sort.

00:36.600 --> 00:42.450
So the idea is that if we have an array and resorting from smallest to greatest So in ascending numeric

00:42.450 --> 00:47.340
order the larger values will bubble to the top one at a time.

00:47.580 --> 00:51.250
So what I'm going to introduce now is something that we haven't seen up until now.

00:51.300 --> 00:53.660
I think it's called visual.

00:53.750 --> 00:56.710
I actually don't know how to use this all the time in my classes.

00:56.790 --> 01:03.500
Visual go visual Owego it's a combination of visual and I'll go for algorithm.

01:03.810 --> 01:09.820
So I like visual go but the way it's highlighted it makes me question my pronunciation.

01:09.900 --> 01:16.170
So what it is is a really cool interactive tool in the browser that lets you step through sorting out

01:16.170 --> 01:16.560
rhythms.

01:16.560 --> 01:22.040
Among other things I'm currently looking at bubble sort and you can see that we have some data.

01:22.050 --> 01:24.900
If you open this up by the way your dataset will look different.

01:25.120 --> 01:30.600
I I put these numbers specifically I didn't want to have a massive dataset that took me like 10 minutes

01:30.600 --> 01:31.670
to step through.

01:31.710 --> 01:37.540
So we have one two three four five six seven elements ranging from 10 up to 37.

01:37.900 --> 01:39.430
OK so this is our array.

01:39.510 --> 01:41.820
This is the first item and this is the last item.

01:41.910 --> 01:48.060
The way that bubble sort works is that as we loop through each item we compare it to the next item the

01:48.060 --> 01:51.130
one in front of it and we check.

01:51.200 --> 01:54.450
Is this one larger than what we're comparing it to.

01:54.470 --> 01:56.370
And if it is we swap.

01:56.460 --> 02:02.370
So swapping is really important to bubble sort is how it works you basically swap if something is larger

02:02.370 --> 02:03.880
and then you compare it to the next one.

02:03.930 --> 02:06.450
Is it larger swap again compared to the next one.

02:06.450 --> 02:08.170
So let's just step step through that.

02:08.370 --> 02:10.170
So twenty nine and 10.

02:10.620 --> 02:14.760
We swap because 29 gets larger 29 and 14.

02:15.060 --> 02:16.980
That's next comparison we swap.

02:16.980 --> 02:19.010
Now we compared twenty nine and thirty.

02:19.410 --> 02:21.600
This time we don't swap.

02:21.600 --> 02:24.230
So now we have 30 and 37.

02:24.420 --> 02:26.100
Thirty is not larger than thirty seven.

02:26.100 --> 02:28.190
So once again we don't swap.

02:28.290 --> 02:31.590
Now we compare 37 and 14 and now we do soie.

02:31.800 --> 02:34.370
Now we're on to 37 and 18.

02:34.380 --> 02:36.840
Compare the two and we swap.

02:36.840 --> 02:39.930
So that was our first pass all the way through the array.

02:40.200 --> 02:44.000
And what happened is that the largest value bubbled to the top.

02:44.000 --> 02:50.340
We've also heard this as sinkings sort where the largest values sink to the end to the bottom.

02:50.340 --> 02:53.760
I think that's a little more pessimistic bubble that's so much happier.

02:53.790 --> 02:55.030
He doesn't like bubbles.

02:55.290 --> 02:57.840
So now we repeat the process.

02:57.910 --> 03:03.390
I won't make you watch every single step of this but we started again at the beginning so we compare

03:03.490 --> 03:04.990
10:14.

03:05.600 --> 03:08.010
We don't swap we compare 14 and 29.

03:08.030 --> 03:12.280
Again we don't swap we compare 29 and 30 we don't swap.

03:12.320 --> 03:18.020
Now we compare 30 and 14 and we do next we compare 30 and 18.

03:18.020 --> 03:19.830
Once again we swap.

03:19.880 --> 03:24.380
So now we have the last two values cemented in place right.

03:24.410 --> 03:26.430
13:30 seven Those are sorted.

03:26.600 --> 03:31.920
So we're building this list as the values bubble up to the top to the end the largest values.

03:32.150 --> 03:37.940
We know that those last two items are now sorted those don't need to change and on and on we go very

03:37.940 --> 03:44.010
quickly go through this we swap 29 bubbles to the top and eventually we end up with the sorted array.

03:44.210 --> 03:48.670
So on the slides I have a simple walkthrough of one of those iterations.

03:48.710 --> 03:56.270
So if this is our re our array our array we swap if we compare five and three we swap.

03:56.360 --> 04:02.290
So five moves up next we compare five and four we swap again next five and one we swap again.

04:02.300 --> 04:07.750
And finally we compare five and two and we swap because five is the largest element in the array and

04:07.770 --> 04:08.970
ends up at the end.

04:08.990 --> 04:14.390
So thats for one single iteration then all we need to do is repeat that over and over.

04:14.780 --> 04:18.100
And you could start by repeating once for every item in the array.

04:18.230 --> 04:26.180
But remember that the as we go through the amount of items from need to sort decreases because we started

04:26.180 --> 04:29.120
out with one two three four five elements that were unsorted.

04:29.120 --> 04:33.740
Now we have four unsorted elements and one solidified sorted element.

04:33.770 --> 04:35.750
So that means that we have fewer elements to sort.

04:35.750 --> 04:38.400
As we go through so our loops can reflect that.

04:38.720 --> 04:42.750
But first let's talk about swapping since that's such a crucial part.

04:42.830 --> 04:43.960
We have to swap.

04:44.030 --> 04:45.040
How does that work.

04:45.260 --> 04:48.400
Well in javascript there's a couple of ways of swapping.

04:48.410 --> 04:50.750
I have two two listed here.

04:50.750 --> 04:52.400
This is honestly my preference.

04:52.400 --> 04:58.240
It's not the it's not the newer way of doing it but this is how the tried and true way of shopping values.

04:58.250 --> 05:01.040
I think it's kind of more legible easier to understand.

05:01.070 --> 05:03.440
You don't even have to make a separate function to do this.

05:03.440 --> 05:04.220
Of course.

05:04.220 --> 05:09.890
But here what we have is an array and then the two indices that we want to swap and we set up a template

05:09.890 --> 05:12.550
variable to store one of them and then.

05:12.560 --> 05:19.050
So if that's the first one index of 1 we set up a temp variable and save that to that value then we

05:19.050 --> 05:23.420
change what was in array of index 1 to now be what's in array of index 2.

05:23.450 --> 05:27.570
And then lastly we use that temp variable to update array of index 2.

05:27.590 --> 05:29.030
So that's how I like to do it.

05:29.030 --> 05:35.480
But there's also in 2015 the syntax for doing it which I don't know I don't think it's very readable

05:35.690 --> 05:41.720
personally but the syntax basically is take the whatevers in index one and swap it with index to take

05:41.870 --> 05:44.270
an index to swap it with the next one.

05:44.270 --> 05:46.600
And this works and it has a single lines.

05:46.610 --> 05:53.770
So for those of you who are file size Queens who care about how short your files are you can use this.

05:53.840 --> 05:58.610
I'll probably use both but it helps to define a function called swopped because then our bubble sort

05:58.610 --> 06:00.430
code becomes even shorter.

06:00.440 --> 06:03.810
The actual logic really is just about the comparisons in the loops.

06:03.830 --> 06:08.300
And then we can just call swap but you don't have to define a separate function if you want to implement

06:08.300 --> 06:10.540
it which I highly recommend you give it a shot.

06:10.550 --> 06:12.240
Here are some of the steps.

06:12.470 --> 06:13.310
Start looping.

06:13.370 --> 06:14.320
So define a function.

06:14.330 --> 06:16.370
I didn't add that and called bubble sort.

06:16.370 --> 06:22.370
It takes an array and you can assume it's all numbers start looping with a variable called I at the

06:22.460 --> 06:23.330
end of the array.

06:23.330 --> 06:29.210
Towards the beginning and we'll discuss exactly why but it has to do with the fact that we're shrinking

06:29.210 --> 06:31.920
down the amount of space that we're sorting.

06:32.060 --> 06:36.330
Then an inner loop inside of that outer loop with a variable called J.

06:36.410 --> 06:38.840
From the beginning until I minus one.

06:38.840 --> 06:42.180
So I is referring to the first loop.

06:42.200 --> 06:48.140
So we have a nested loop that is depending on the first loop minus one and then we just compare array

06:48.140 --> 06:48.800
of J.

06:48.800 --> 06:52.700
So that's going to be our individual for want back here.

06:52.910 --> 06:54.800
Let's say we're comparing If J is zero.

06:54.860 --> 06:58.540
We're going to compare it to array of J plus 1 which is the next item.

06:58.670 --> 07:02.210
So whatever J is we're going to compare the item ahead of it.

07:02.420 --> 07:03.880
So J and J plus.

07:04.200 --> 07:04.640
OK.

07:04.730 --> 07:10.250
So if a Ray-J is greater than array of J plus 1 that means you need to swap and you can swap however

07:10.250 --> 07:13.260
you like using whichever version I showed you.

07:13.490 --> 07:16.940
And then at the end just return the sorted array after the loops are done.

07:16.970 --> 07:18.350
So give it a shot if you'd like.

07:18.530 --> 07:20.950
And in the next video we'll have an implementation.
