1
00:00:00,150 --> 00:00:00,780
Welcome back.

2
00:00:00,780 --> 00:00:03,800
And this video will read the first part of quicksort.

3
00:00:03,900 --> 00:00:05,000
Just like with merge sort.

4
00:00:05,010 --> 00:00:07,050
We implemented the merge helper.

5
00:00:07,050 --> 00:00:09,380
First we're going to do the same thing here.

6
00:00:09,480 --> 00:00:12,540
You might hear this called partition or pivot.

7
00:00:12,630 --> 00:00:13,570
It does the same thing.

8
00:00:13,620 --> 00:00:18,270
So we're going to write a function that given an array it designates an element as the pivot point and

9
00:00:18,270 --> 00:00:20,270
it should rearrange the elements in the array.

10
00:00:20,280 --> 00:00:22,960
So this is basically what I already said got ahead of myself.

11
00:00:23,100 --> 00:00:24,210
And ahead of the slides.

12
00:00:24,240 --> 00:00:25,360
Surprise surprise.

13
00:00:25,360 --> 00:00:29,040
All values less than the pivot are moved to the left and all values greater than the pivot are moved

14
00:00:29,040 --> 00:00:29,730
to the right.

15
00:00:30,060 --> 00:00:32,500
But the order on either side doesn't matter.

16
00:00:32,510 --> 00:00:36,740
It just needs to be less than the pivot and greater than the pivot on the right side.

17
00:00:36,870 --> 00:00:41,100
But inside the left and right it doesn't matter what order that are in.

18
00:00:41,130 --> 00:00:44,880
So the other really important thing is that this helper should do it in place.

19
00:00:44,880 --> 00:00:51,690
So it should not make a new array and it should return the index of the pivot so it returns the index.

20
00:00:51,690 --> 00:00:54,840
It does everything in place so don't make a new array to do it.

21
00:00:54,840 --> 00:00:59,500
So the first thing to discuss picking a pivot is actually an important decision.

22
00:00:59,610 --> 00:01:03,550
The runtime of quicksort can change depending on where you pick the pivot from.

23
00:01:03,660 --> 00:01:05,770
Ideally it should be chosen to.

24
00:01:05,840 --> 00:01:07,940
It's the median value in the dataset.

25
00:01:07,980 --> 00:01:12,990
If that makes sense if we had to if we could perfectly get it we would pick the middle value of our

26
00:01:12,990 --> 00:01:15,730
sorted data so that the left and right sides would be equal.

27
00:01:16,080 --> 00:01:20,940
But that's not very easy to do if we don't know what the the data itself is and how it's ordered.

28
00:01:20,940 --> 00:01:22,820
That's the whole point we're trying to order it.

29
00:01:23,100 --> 00:01:28,750
So there are other strategies you pick the first element or the last one or the middle or a random element.

30
00:01:29,130 --> 00:01:34,260
For simplicity's sake in this video we're just going to always choose the pivot to be the first element

31
00:01:34,650 --> 00:01:39,180
that does actually have some consequences with as far as big-O that we'll talk about later but we're

32
00:01:39,180 --> 00:01:41,440
going to just pick the first element to make it simple.

33
00:01:41,460 --> 00:01:44,470
So here's how here's here's how it could work.

34
00:01:44,550 --> 00:01:51,270
If this is our array and we call our pivot function of that array it should return index of 4.

35
00:01:51,300 --> 00:01:52,900
So notice it doesn't return the array.

36
00:01:53,130 --> 00:01:55,950
But if we look at the array it's been changed.

37
00:01:55,950 --> 00:01:58,770
Any of these configurations are valid.

38
00:01:58,770 --> 00:02:02,330
So what it does is it picks the first element and chooses that as a pivot.

39
00:02:02,340 --> 00:02:08,850
So 5 and now it needs to rearrange the array so that 5 is in the correct spot where every number to

40
00:02:08,850 --> 00:02:10,330
the left is less than 5.

41
00:02:10,470 --> 00:02:15,630
So if we look at all these examples that could be the value of array it doesn't matter the order if

42
00:02:15,630 --> 00:02:20,400
we have 2 than 1 and 4 than 3 or 1 than four then three then two and so on.

43
00:02:20,460 --> 00:02:26,700
As long as we have one two three and four on this side and then on the other side we have six seven

44
00:02:26,700 --> 00:02:28,290
eight in some order.

45
00:02:28,290 --> 00:02:30,630
Now this isn't all the possible options.

46
00:02:30,660 --> 00:02:34,310
I just didn't want to go and list every single possible combination out.

47
00:02:34,470 --> 00:02:37,660
But it's important to note it doesn't matter for our code.

48
00:02:37,740 --> 00:02:40,570
What we actually have on the left side or SUV.

49
00:02:40,590 --> 00:02:45,140
It matters what we have it doesn't matter exactly the order that it's in on that side.

50
00:02:45,570 --> 00:02:47,040
So these are all acceptable.

51
00:02:47,040 --> 00:02:54,740
All that matters is that 5 is in the correct spot and we return the index which is for 0 1 2 3 4.

52
00:02:54,750 --> 00:03:00,510
So this is basically saying in the if the final sorted array if you kept doing this on the left and

53
00:03:00,510 --> 00:03:05,850
the right over and over and over 5 is in its final position this is where it's going to be.

54
00:03:05,850 --> 00:03:07,160
Once you sort the data.

55
00:03:07,320 --> 00:03:07,650
OK.

56
00:03:07,680 --> 00:03:09,390
So here's the pseudo code.

57
00:03:09,810 --> 00:03:11,660
Here's one version of it at least.

58
00:03:11,940 --> 00:03:18,450
So write a function call it pivot or partition and accepts three arguments an array a start index and

59
00:03:18,450 --> 00:03:19,710
an end index.

60
00:03:19,740 --> 00:03:26,390
And I would have to start default to 0 and the end default to array length minus 1.

61
00:03:26,570 --> 00:03:32,090
Then we're just going to pick the pivot from the start of the array remember and we could change it

62
00:03:32,090 --> 00:03:34,430
to be from the middle or the end or a random place.

63
00:03:34,430 --> 00:03:39,740
But for simplicity's sake we're picking from the very beginning and then store the current pivot index

64
00:03:39,770 --> 00:03:40,400
in a variable.

65
00:03:40,400 --> 00:03:45,260
So this is going to keep track of where we're going to swap that pivot to the very end.

66
00:03:45,620 --> 00:03:50,380
So I'm going to walk through on the next in just a second on visual I'll go and show you what I mean.

67
00:03:50,480 --> 00:03:55,280
But we're going to loop through the array from the start until the end and if the pivot is greater than

68
00:03:55,280 --> 00:03:59,810
the element that we're looking at we're going to increment that pivot index variable from a pier and

69
00:03:59,810 --> 00:04:05,450
then swap the current element with the element at the pivot index so it's a nightmare trying to just

70
00:04:05,540 --> 00:04:06,880
read the pseudo code.

71
00:04:07,010 --> 00:04:09,090
But it will make sense since I show an example.

72
00:04:09,200 --> 00:04:14,930
And then we at the very end we swap the pivot that we started with with the pivot index.

73
00:04:15,200 --> 00:04:16,700
And then we return the pivot index.

74
00:04:16,700 --> 00:04:19,130
So rather than just talking about text.

75
00:04:19,190 --> 00:04:20,570
Let's let's look at it.

76
00:04:20,600 --> 00:04:24,570
So at the very beginning we're going to pick the first element to be our pivot.

77
00:04:24,590 --> 00:04:32,000
We start at 28 then what we do is loop through every other element and we compare 28 to 41 in the first

78
00:04:32,000 --> 00:04:32,540
case.

79
00:04:32,690 --> 00:04:33,560
Forty one is greater.

80
00:04:33,560 --> 00:04:34,970
So we actually don't do anything.

81
00:04:36,610 --> 00:04:38,010
But then we get to 4.

82
00:04:38,020 --> 00:04:39,590
28 is greater than four.

83
00:04:39,640 --> 00:04:45,620
So we know that we need to have four on the left side of 28 and we're just going to keep a mental note.

84
00:04:45,640 --> 00:04:50,710
We're going to have a variable called Pivot index and that's going to keep track of how many things

85
00:04:51,040 --> 00:04:55,560
are less than 28 so that we can then swap 28 at the very end to the correct spot.

86
00:04:55,570 --> 00:05:00,250
So we move four over and then we have this pivot index that currently is going to be equal to index

87
00:05:00,250 --> 00:05:01,180
of 1.

88
00:05:01,210 --> 00:05:06,250
So if there was nothing in Ignore everything on the other side of the era if there was nothing else

89
00:05:06,640 --> 00:05:13,540
we know that 28 needs to be in this position at the end so that 4 can be less then but if we keep going

90
00:05:14,220 --> 00:05:22,290
11 is also less than 28 so we're going to swap that with 41 and now increment the pivot index by 1.

91
00:05:22,300 --> 00:05:23,070
So now we know.

92
00:05:23,080 --> 00:05:23,500
OK.

93
00:05:23,590 --> 00:05:24,850
There are two things.

94
00:05:24,880 --> 00:05:27,540
Less than 28.

95
00:05:27,880 --> 00:05:28,670
Go Again.

96
00:05:28,780 --> 00:05:29,800
Whoops didn't click it.

97
00:05:29,800 --> 00:05:31,450
Here we go 16 that's less.

98
00:05:31,450 --> 00:05:32,110
So we swap.

99
00:05:32,110 --> 00:05:33,770
And now we know there are three things less.

100
00:05:33,770 --> 00:05:36,070
Then again we swap.

101
00:05:36,070 --> 00:05:41,260
There are four variable variables there are four pieces of data in this array four elements less than

102
00:05:41,260 --> 00:05:42,280
our pivot.

103
00:05:42,850 --> 00:05:43,350
Nope.

104
00:05:43,420 --> 00:05:45,440
OK here's our fifth one we swap.

105
00:05:45,460 --> 00:05:47,700
We go again and again and again.

106
00:05:47,980 --> 00:05:50,630
And here's our sixth element that is less than 28.

107
00:05:50,680 --> 00:05:51,850
So we swap.

108
00:05:51,850 --> 00:05:55,610
Now we've hit the end and we have this pivot index variable.

109
00:05:55,630 --> 00:06:00,610
This mental note I mentioned and it's now equal to 6 because every time we found an element less than

110
00:06:00,640 --> 00:06:02,920
28 we added 1 to it.

111
00:06:02,920 --> 00:06:06,020
So we have 1 2 3 4 5 6.

112
00:06:06,040 --> 00:06:11,070
This tells us we need to swap the element at index of 6 with our pivot which is at the beginning.

113
00:06:11,290 --> 00:06:13,680
And if we do that there we go.

114
00:06:13,910 --> 00:06:15,450
Now we're done.

115
00:06:15,760 --> 00:06:18,470
All we have to do is return this index.

116
00:06:18,470 --> 00:06:22,910
So everything on the left is less than everything on the right is greater than the pseudo code on it's

117
00:06:22,910 --> 00:06:24,330
own isn't all that helpful.

118
00:06:24,440 --> 00:06:29,120
But if you look at this side by side with something like this where you step through it I think it can

119
00:06:29,120 --> 00:06:29,590
help.

120
00:06:29,600 --> 00:06:32,240
So go ahead and implement this if you'd like to.

121
00:06:32,240 --> 00:06:36,030
Again it's not all that easy but give it a shot if you want to stick around.

122
00:06:36,050 --> 00:06:41,170
I'll do one more example walkthrough but I know that it can get boring if you if you understand it all.

123
00:06:41,210 --> 00:06:42,200
And you're ready to go.

124
00:06:42,200 --> 00:06:42,880
Or are you just bored.

125
00:06:42,890 --> 00:06:45,920
Go ahead and skip this but I'll put it here for extra practice.

126
00:06:45,920 --> 00:06:48,060
New data the very beginning.

127
00:06:48,080 --> 00:06:50,580
We pick our pivot point at the just the first thing.

128
00:06:50,600 --> 00:06:51,460
26.

129
00:06:51,620 --> 00:06:53,600
Now we compare it to every other element.

130
00:06:53,660 --> 00:06:55,260
23 is in less than 26.

131
00:06:55,280 --> 00:06:57,020
So we're going to keep track of that.

132
00:06:57,050 --> 00:07:02,210
We need to have we have that counter pivot index and we know at the very end at least we're going to

133
00:07:02,210 --> 00:07:04,950
have to swap 26 to index of one.

134
00:07:05,450 --> 00:07:06,950
We get to 27 that's greater then.

135
00:07:06,990 --> 00:07:09,070
We don't do anything that's greater than again.

136
00:07:09,410 --> 00:07:11,520
Now we get to 17 which is less than.

137
00:07:11,620 --> 00:07:19,640
So what we do is we swap with 27 in this case and then we're going to increment our pivot index by once.

138
00:07:19,640 --> 00:07:21,410
Now we know there are two things.

139
00:07:21,410 --> 00:07:22,370
Less than 26.

140
00:07:22,400 --> 00:07:23,910
So we need to swap at the end.

141
00:07:24,050 --> 00:07:30,440
So 26 is here where 17 currently is we go through again that's greater than grade greater then greater

142
00:07:30,440 --> 00:07:38,210
than greater then finally we get to one which is less than and we swap with 44 and now we increment

143
00:07:38,210 --> 00:07:39,850
pivot index by 1 again.

144
00:07:39,860 --> 00:07:41,620
So now it's at 3.

145
00:07:41,630 --> 00:07:47,180
So at the end of our code we're going to swap the pivot and index of zero with the pivot index which

146
00:07:47,180 --> 00:07:49,240
is 3 0 1 2 3.

147
00:07:49,280 --> 00:07:53,450
So we swapped these two things and Whyalla.

148
00:07:53,520 --> 00:07:57,100
Now we have the left side correctly the partitioned and the right side.

149
00:07:57,150 --> 00:08:03,210
So 2006 is that the correct spot in our code should return index of 3 which is saying that the correct

150
00:08:03,210 --> 00:08:06,110
spot for 26 in this array is index of 3.

