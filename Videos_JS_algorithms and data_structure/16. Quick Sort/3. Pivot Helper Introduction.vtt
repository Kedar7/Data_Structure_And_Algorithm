WEBVTT

00:00.150 --> 00:00.780
Welcome back.

00:00.780 --> 00:03.800
And this video will read the first part of quicksort.

00:03.900 --> 00:05.000
Just like with merge sort.

00:05.010 --> 00:07.050
We implemented the merge helper.

00:07.050 --> 00:09.380
First we're going to do the same thing here.

00:09.480 --> 00:12.540
You might hear this called partition or pivot.

00:12.630 --> 00:13.570
It does the same thing.

00:13.620 --> 00:18.270
So we're going to write a function that given an array it designates an element as the pivot point and

00:18.270 --> 00:20.270
it should rearrange the elements in the array.

00:20.280 --> 00:22.960
So this is basically what I already said got ahead of myself.

00:23.100 --> 00:24.210
And ahead of the slides.

00:24.240 --> 00:25.360
Surprise surprise.

00:25.360 --> 00:29.040
All values less than the pivot are moved to the left and all values greater than the pivot are moved

00:29.040 --> 00:29.730
to the right.

00:30.060 --> 00:32.500
But the order on either side doesn't matter.

00:32.510 --> 00:36.740
It just needs to be less than the pivot and greater than the pivot on the right side.

00:36.870 --> 00:41.100
But inside the left and right it doesn't matter what order that are in.

00:41.130 --> 00:44.880
So the other really important thing is that this helper should do it in place.

00:44.880 --> 00:51.690
So it should not make a new array and it should return the index of the pivot so it returns the index.

00:51.690 --> 00:54.840
It does everything in place so don't make a new array to do it.

00:54.840 --> 00:59.500
So the first thing to discuss picking a pivot is actually an important decision.

00:59.610 --> 01:03.550
The runtime of quicksort can change depending on where you pick the pivot from.

01:03.660 --> 01:05.770
Ideally it should be chosen to.

01:05.840 --> 01:07.940
It's the median value in the dataset.

01:07.980 --> 01:12.990
If that makes sense if we had to if we could perfectly get it we would pick the middle value of our

01:12.990 --> 01:15.730
sorted data so that the left and right sides would be equal.

01:16.080 --> 01:20.940
But that's not very easy to do if we don't know what the the data itself is and how it's ordered.

01:20.940 --> 01:22.820
That's the whole point we're trying to order it.

01:23.100 --> 01:28.750
So there are other strategies you pick the first element or the last one or the middle or a random element.

01:29.130 --> 01:34.260
For simplicity's sake in this video we're just going to always choose the pivot to be the first element

01:34.650 --> 01:39.180
that does actually have some consequences with as far as big-O that we'll talk about later but we're

01:39.180 --> 01:41.440
going to just pick the first element to make it simple.

01:41.460 --> 01:44.470
So here's how here's here's how it could work.

01:44.550 --> 01:51.270
If this is our array and we call our pivot function of that array it should return index of 4.

01:51.300 --> 01:52.900
So notice it doesn't return the array.

01:53.130 --> 01:55.950
But if we look at the array it's been changed.

01:55.950 --> 01:58.770
Any of these configurations are valid.

01:58.770 --> 02:02.330
So what it does is it picks the first element and chooses that as a pivot.

02:02.340 --> 02:08.850
So 5 and now it needs to rearrange the array so that 5 is in the correct spot where every number to

02:08.850 --> 02:10.330
the left is less than 5.

02:10.470 --> 02:15.630
So if we look at all these examples that could be the value of array it doesn't matter the order if

02:15.630 --> 02:20.400
we have 2 than 1 and 4 than 3 or 1 than four then three then two and so on.

02:20.460 --> 02:26.700
As long as we have one two three and four on this side and then on the other side we have six seven

02:26.700 --> 02:28.290
eight in some order.

02:28.290 --> 02:30.630
Now this isn't all the possible options.

02:30.660 --> 02:34.310
I just didn't want to go and list every single possible combination out.

02:34.470 --> 02:37.660
But it's important to note it doesn't matter for our code.

02:37.740 --> 02:40.570
What we actually have on the left side or SUV.

02:40.590 --> 02:45.140
It matters what we have it doesn't matter exactly the order that it's in on that side.

02:45.570 --> 02:47.040
So these are all acceptable.

02:47.040 --> 02:54.740
All that matters is that 5 is in the correct spot and we return the index which is for 0 1 2 3 4.

02:54.750 --> 03:00.510
So this is basically saying in the if the final sorted array if you kept doing this on the left and

03:00.510 --> 03:05.850
the right over and over and over 5 is in its final position this is where it's going to be.

03:05.850 --> 03:07.160
Once you sort the data.

03:07.320 --> 03:07.650
OK.

03:07.680 --> 03:09.390
So here's the pseudo code.

03:09.810 --> 03:11.660
Here's one version of it at least.

03:11.940 --> 03:18.450
So write a function call it pivot or partition and accepts three arguments an array a start index and

03:18.450 --> 03:19.710
an end index.

03:19.740 --> 03:26.390
And I would have to start default to 0 and the end default to array length minus 1.

03:26.570 --> 03:32.090
Then we're just going to pick the pivot from the start of the array remember and we could change it

03:32.090 --> 03:34.430
to be from the middle or the end or a random place.

03:34.430 --> 03:39.740
But for simplicity's sake we're picking from the very beginning and then store the current pivot index

03:39.770 --> 03:40.400
in a variable.

03:40.400 --> 03:45.260
So this is going to keep track of where we're going to swap that pivot to the very end.

03:45.620 --> 03:50.380
So I'm going to walk through on the next in just a second on visual I'll go and show you what I mean.

03:50.480 --> 03:55.280
But we're going to loop through the array from the start until the end and if the pivot is greater than

03:55.280 --> 03:59.810
the element that we're looking at we're going to increment that pivot index variable from a pier and

03:59.810 --> 04:05.450
then swap the current element with the element at the pivot index so it's a nightmare trying to just

04:05.540 --> 04:06.880
read the pseudo code.

04:07.010 --> 04:09.090
But it will make sense since I show an example.

04:09.200 --> 04:14.930
And then we at the very end we swap the pivot that we started with with the pivot index.

04:15.200 --> 04:16.700
And then we return the pivot index.

04:16.700 --> 04:19.130
So rather than just talking about text.

04:19.190 --> 04:20.570
Let's let's look at it.

04:20.600 --> 04:24.570
So at the very beginning we're going to pick the first element to be our pivot.

04:24.590 --> 04:32.000
We start at 28 then what we do is loop through every other element and we compare 28 to 41 in the first

04:32.000 --> 04:32.540
case.

04:32.690 --> 04:33.560
Forty one is greater.

04:33.560 --> 04:34.970
So we actually don't do anything.

04:36.610 --> 04:38.010
But then we get to 4.

04:38.020 --> 04:39.590
28 is greater than four.

04:39.640 --> 04:45.620
So we know that we need to have four on the left side of 28 and we're just going to keep a mental note.

04:45.640 --> 04:50.710
We're going to have a variable called Pivot index and that's going to keep track of how many things

04:51.040 --> 04:55.560
are less than 28 so that we can then swap 28 at the very end to the correct spot.

04:55.570 --> 05:00.250
So we move four over and then we have this pivot index that currently is going to be equal to index

05:00.250 --> 05:01.180
of 1.

05:01.210 --> 05:06.250
So if there was nothing in Ignore everything on the other side of the era if there was nothing else

05:06.640 --> 05:13.540
we know that 28 needs to be in this position at the end so that 4 can be less then but if we keep going

05:14.220 --> 05:22.290
11 is also less than 28 so we're going to swap that with 41 and now increment the pivot index by 1.

05:22.300 --> 05:23.070
So now we know.

05:23.080 --> 05:23.500
OK.

05:23.590 --> 05:24.850
There are two things.

05:24.880 --> 05:27.540
Less than 28.

05:27.880 --> 05:28.670
Go Again.

05:28.780 --> 05:29.800
Whoops didn't click it.

05:29.800 --> 05:31.450
Here we go 16 that's less.

05:31.450 --> 05:32.110
So we swap.

05:32.110 --> 05:33.770
And now we know there are three things less.

05:33.770 --> 05:36.070
Then again we swap.

05:36.070 --> 05:41.260
There are four variable variables there are four pieces of data in this array four elements less than

05:41.260 --> 05:42.280
our pivot.

05:42.850 --> 05:43.350
Nope.

05:43.420 --> 05:45.440
OK here's our fifth one we swap.

05:45.460 --> 05:47.700
We go again and again and again.

05:47.980 --> 05:50.630
And here's our sixth element that is less than 28.

05:50.680 --> 05:51.850
So we swap.

05:51.850 --> 05:55.610
Now we've hit the end and we have this pivot index variable.

05:55.630 --> 06:00.610
This mental note I mentioned and it's now equal to 6 because every time we found an element less than

06:00.640 --> 06:02.920
28 we added 1 to it.

06:02.920 --> 06:06.020
So we have 1 2 3 4 5 6.

06:06.040 --> 06:11.070
This tells us we need to swap the element at index of 6 with our pivot which is at the beginning.

06:11.290 --> 06:13.680
And if we do that there we go.

06:13.910 --> 06:15.450
Now we're done.

06:15.760 --> 06:18.470
All we have to do is return this index.

06:18.470 --> 06:22.910
So everything on the left is less than everything on the right is greater than the pseudo code on it's

06:22.910 --> 06:24.330
own isn't all that helpful.

06:24.440 --> 06:29.120
But if you look at this side by side with something like this where you step through it I think it can

06:29.120 --> 06:29.590
help.

06:29.600 --> 06:32.240
So go ahead and implement this if you'd like to.

06:32.240 --> 06:36.030
Again it's not all that easy but give it a shot if you want to stick around.

06:36.050 --> 06:41.170
I'll do one more example walkthrough but I know that it can get boring if you if you understand it all.

06:41.210 --> 06:42.200
And you're ready to go.

06:42.200 --> 06:42.880
Or are you just bored.

06:42.890 --> 06:45.920
Go ahead and skip this but I'll put it here for extra practice.

06:45.920 --> 06:48.060
New data the very beginning.

06:48.080 --> 06:50.580
We pick our pivot point at the just the first thing.

06:50.600 --> 06:51.460
26.

06:51.620 --> 06:53.600
Now we compare it to every other element.

06:53.660 --> 06:55.260
23 is in less than 26.

06:55.280 --> 06:57.020
So we're going to keep track of that.

06:57.050 --> 07:02.210
We need to have we have that counter pivot index and we know at the very end at least we're going to

07:02.210 --> 07:04.950
have to swap 26 to index of one.

07:05.450 --> 07:06.950
We get to 27 that's greater then.

07:06.990 --> 07:09.070
We don't do anything that's greater than again.

07:09.410 --> 07:11.520
Now we get to 17 which is less than.

07:11.620 --> 07:19.640
So what we do is we swap with 27 in this case and then we're going to increment our pivot index by once.

07:19.640 --> 07:21.410
Now we know there are two things.

07:21.410 --> 07:22.370
Less than 26.

07:22.400 --> 07:23.910
So we need to swap at the end.

07:24.050 --> 07:30.440
So 26 is here where 17 currently is we go through again that's greater than grade greater then greater

07:30.440 --> 07:38.210
than greater then finally we get to one which is less than and we swap with 44 and now we increment

07:38.210 --> 07:39.850
pivot index by 1 again.

07:39.860 --> 07:41.620
So now it's at 3.

07:41.630 --> 07:47.180
So at the end of our code we're going to swap the pivot and index of zero with the pivot index which

07:47.180 --> 07:49.240
is 3 0 1 2 3.

07:49.280 --> 07:53.450
So we swapped these two things and Whyalla.

07:53.520 --> 07:57.100
Now we have the left side correctly the partitioned and the right side.

07:57.150 --> 08:03.210
So 2006 is that the correct spot in our code should return index of 3 which is saying that the correct

08:03.210 --> 08:06.110
spot for 26 in this array is index of 3.
