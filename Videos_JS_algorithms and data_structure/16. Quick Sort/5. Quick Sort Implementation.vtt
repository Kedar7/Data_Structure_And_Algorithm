WEBVTT

00:00.180 --> 00:00.440
All right.

00:00.450 --> 00:01.110
Welcome back.

00:01.110 --> 00:01.910
So in this video.

00:01.940 --> 00:04.620
I mean to quickly run through the pseudo code for quick sort.

00:04.830 --> 00:07.820
But it's pretty short so I'm actually going to just implement it too.

00:07.830 --> 00:12.960
Rather than doing a separate video to show the pseudo code and then implement it just to keep things

00:12.960 --> 00:14.010
a little briefer.

00:14.100 --> 00:19.680
So we have our pivot helper finished we pass in a full array or any array and it's going to take the

00:19.680 --> 00:24.690
first item and figure out where it should go and then put all the smaller items to left all the bigger

00:24.690 --> 00:27.150
items to the right and then return the index.

00:27.450 --> 00:31.800
So that's important that it returns the index because what we're going to do in our quicksort function

00:32.220 --> 00:37.710
is that it's going to call that pivot helper at the beginning with a full array and we'll find out you

00:37.710 --> 00:41.270
know index of four for example is the first pivot point.

00:41.550 --> 00:48.000
And then what we're going to do is recursively call the same thing call quicksort again on the left

00:48.000 --> 00:50.480
side and on the right side of that pivot point.

00:50.490 --> 00:53.150
So imagine we call quicksort with this array.

00:53.490 --> 00:59.490
Well the very first thing that happens is that we find the pivot which is 4 and that is moved to this

00:59.550 --> 01:00.880
index right here.

01:01.320 --> 01:08.310
And then what we're going to do is we're going to then call quicksort on this side from 3 the beginning

01:08.580 --> 01:14.460
up until but not including the pivot because we already figured out this is this is in place we don't

01:14.460 --> 01:16.130
want to read we don't want to move this.

01:16.320 --> 01:20.320
So we're going to sort the array here and here with quicksort.

01:20.340 --> 01:26.550
So the rough logic when the helper returns the updated pivot index we recursively call the pivot helper

01:26.820 --> 01:31.320
on the left side and then on the right side as well.

01:31.320 --> 01:34.900
Now it's important to notice or to point out we're not making new arrays.

01:34.950 --> 01:36.760
This is all happening in place.

01:36.810 --> 01:38.490
We're not making new arrays.

01:38.550 --> 01:39.950
It's happening in the same array.

01:40.080 --> 01:46.590
So our base case it's not quite just to check if the array is item of length or if the array has one

01:46.590 --> 01:47.330
item in it.

01:47.450 --> 01:53.130
It's to check if the sub array has one item in it and what that means is we're always going to be working

01:53.130 --> 01:55.470
with this array for example.

01:55.470 --> 02:02.150
But we're only going to be looking at this portion or this portion where eventually this portion.

02:02.430 --> 02:08.820
And so what we're going to check is not to see if the length of the array is 0 or 1 because this length

02:08.820 --> 02:09.720
will always be the same.

02:09.720 --> 02:11.460
We're not adding and removing elements.

02:11.580 --> 02:16.530
We're going to check if the start point that we're looking at and let's call it left and right if the

02:16.530 --> 02:22.050
left and the right are equal to one another or if the right is less than the left.

02:22.050 --> 02:26.480
So that happens when a suburb has less than two elements.

02:26.850 --> 02:28.130
So I'm just going to implement it.

02:28.120 --> 02:28.940
This is a tough one.

02:28.950 --> 02:32.060
Honestly to just take that pseudo code and try and write it yourself.

02:32.100 --> 02:35.500
I applaud anybody who wants to do it and who tries it out.

02:35.520 --> 02:41.280
But again no expectation on my part that it when I teach this in person it's very rare that anybody

02:41.280 --> 02:43.170
can can implement it right away.

02:43.170 --> 02:47.050
And even once I show the code it can be hard to come up with it again.

02:47.130 --> 02:51.140
And I've already mentioned my struggles with it and how it's just unintuitive for me.

02:51.330 --> 02:56.370
So I'm going to define my function quicksort and I've already done that actually and it's going to take

02:57.060 --> 02:58.100
an array.

02:58.920 --> 03:02.410
And the first thing that we'll do is call.

03:02.420 --> 03:08.940
So let's make a variable called Pivot index and it's just going to be equal to calling pivot with that

03:09.180 --> 03:09.990
array.

03:10.380 --> 03:12.970
But the thing is our pivot.

03:13.080 --> 03:17.510
First of all if we go back it accepts an array a start and an end.

03:17.700 --> 03:20.580
And this is important because the very first time through.

03:20.580 --> 03:25.020
Yeah we want to call it on the whole array but then this recursive function eventually is going to call

03:25.020 --> 03:31.380
it again on this array or this one where we have a different start an endpoint is not just the default

03:31.710 --> 03:34.320
0 up until the end of the array.

03:34.320 --> 03:39.390
So what I'm going to do is in here I'm going to make very an argument called left and set it equal to

03:39.390 --> 03:44.510
zero and another one called rights which is arrayed up like minus one.

03:44.730 --> 03:49.380
And then we're going to pass in a left and right when we call pivot.

03:49.380 --> 03:54.240
So the first time we call this right here the default value for left is zero.

03:54.270 --> 03:58.010
And for right is going to be 0 1 2 3 4 5 6.

03:58.050 --> 04:03.100
So we're calling pivot on this array with 0 6 right.

04:03.120 --> 04:04.490
So then that goes.

04:04.560 --> 04:10.650
Deleted a bracket takes the first item inside of that pivot function and it figures out that this needs

04:10.650 --> 04:13.000
to actually be at index 3.

04:13.050 --> 04:18.010
So it changes the array to look like this and it returns the index of three to us.

04:18.020 --> 04:21.040
So pivot and x is equal to three at this point.

04:21.150 --> 04:27.480
Then we want to repeat the same thing but we want to do it on the left side which basically means from

04:27.960 --> 04:31.740
the left the start point which right now is zero.

04:31.740 --> 04:35.990
So from the left up until the pivot index minus 1.

04:36.510 --> 04:38.660
So we already have this cemented in place.

04:38.670 --> 04:41.510
We want to now sort from here to here.

04:41.700 --> 04:43.190
And then the same thing on the right side.

04:43.380 --> 04:47.990
But we want to go from pivot and X plus one up until the end the.

04:48.000 --> 04:49.050
Right.

04:49.050 --> 04:50.420
So let's do the left first.

04:50.460 --> 04:55.530
So the left side is just a quick sort of the array.

04:55.620 --> 05:00.430
This time we're going to pass in a left and a right on mike down here when we call it the first time

05:00.670 --> 05:03.980
they defaulted to zero and then great length minus one.

05:04.150 --> 05:09.820
This time the left that we're looking at is still going to be the same left that we looked at before

05:09.900 --> 05:10.810
zero.

05:11.020 --> 05:16.930
But next the right where we're going to stop is going to be what we've already discussed the pivot index

05:18.490 --> 05:19.900
minus 1.

05:20.740 --> 05:23.480
So that way we don't include that pivot indexing.

05:23.650 --> 05:24.520
So this is cemented.

05:24.520 --> 05:27.830
We just want to look at that and the same thing on the right side.

05:28.060 --> 05:32.390
Well not quite exactly the same same idea but it's going to be quick sort of the array.

05:32.590 --> 05:35.970
But we're going to start at pivot index plus one.

05:36.130 --> 05:38.120
So that means this is our index.

05:38.290 --> 05:40.390
We want to go from here until the end.

05:40.590 --> 05:42.800
So pivot index plus one Intel.

05:42.880 --> 05:44.770
Right.

05:44.800 --> 05:47.300
So those are the recursive calls.

05:47.320 --> 05:51.190
However if I just run this as it is right now there is a big problem.

05:51.490 --> 05:53.080
It's going to run forever.

05:53.320 --> 05:59.650
So actually if I do this we get our stack overflow maximum call stack size exceeded because there was

05:59.650 --> 06:04.140
never a base case nothing was ever returned something ever stopped this recursive call.

06:04.210 --> 06:06.690
It just keeps going and going and going and going and going.

06:06.910 --> 06:09.220
So where do we want to stop.

06:09.460 --> 06:16.090
We want to stop in this situation or the situation where we've hit a subway that is one element long

06:16.840 --> 06:22.090
and how do we how do we know that and remember that at any point if we looked at array.

06:22.540 --> 06:25.140
It's always the entire array.

06:25.330 --> 06:26.900
We're sorting it in place.

06:26.920 --> 06:32.380
So even this step right here for example array is still the entire array.

06:32.680 --> 06:39.840
But what has changed are left and right because left and right are constantly changing as we're calling

06:39.850 --> 06:44.950
quicksort and recursively because left and right are based off of the pivot index and so we're getting

06:44.950 --> 06:47.900
a new pivot index each time left and right are changing.

06:47.950 --> 06:53.150
And so as these suburbs become smaller left and right get closer together.

06:53.170 --> 07:00.250
So for example here left with zero and right with six then here for example left to zero and right was

07:00.250 --> 07:05.410
to hear left zero right as one now here.

07:05.560 --> 07:09.620
Left and Right are the same so are conditional.

07:09.740 --> 07:12.060
We want to keep doing this code keep running.

07:12.150 --> 07:20.860
If left is less then right and so as soon as they are equal as soon as life is now equal to right that

07:20.860 --> 07:25.420
means that we're looking at one element that makes sense.

07:25.420 --> 07:29.560
Remember that left and right are just pointers inside of this full array.

07:29.740 --> 07:31.070
So it started like this.

07:31.390 --> 07:38.620
And then on one of them the recursive call moved to this and then to this and then it became the same

07:38.620 --> 07:39.190
thing.

07:39.340 --> 07:45.380
And that's when we stop because that means that we've hit the end at least of one of the branches.

07:45.580 --> 07:47.460
So I need my bracket there.

07:47.490 --> 07:49.170
There we go.

07:49.960 --> 07:50.520
OK.

07:50.620 --> 07:52.090
So we're still not quite done.

07:52.090 --> 07:55.090
We have one missing piece which is really important.

07:55.090 --> 07:56.420
We're not returning anything.

07:56.530 --> 08:02.710
We need to return Irais at the very end because remember how these recursive calls work.

08:02.710 --> 08:09.940
This quick sort here is waiting on the results of quick sorting this and quick sorting that.

08:10.030 --> 08:14.100
And then those in turn are waiting on the result of quick sorting this and that.

08:14.110 --> 08:19.090
So we have to return the array here so that we can get it back here and keep going up and then the same

08:19.090 --> 08:20.530
thing on the right side.

08:21.190 --> 08:26.060
So let's save and clear my console Let's see if it works.

08:26.070 --> 08:29.510
No it's not clear zero area.

08:29.550 --> 08:30.850
Let's see if it works now.

08:31.510 --> 08:33.000
And it looks good.

08:33.130 --> 08:35.570
We're getting 1 2 3 4 5 6 9.

08:35.600 --> 08:41.740
Not sure why I chose that and let's just verify Let's mix it up again a little bit put the negative

08:41.740 --> 08:43.110
number in here.

08:43.150 --> 08:43.670
All right.

08:43.690 --> 08:45.220
And it looks like it's working.
