WEBVTT

00:00.210 --> 00:01.200
Hey welcome back.

00:01.320 --> 00:05.750
So as I've already mentioned this section marks a significant turning point in the course.

00:05.970 --> 00:10.980
We're now going to focus our attention on a bunch of data structures so classic data structures like

00:10.980 --> 00:14.350
singly linked list double-D linked lists stacks CU's.

00:14.370 --> 00:20.250
We're also going to implement more complicated ones like trees and binary search trees graphs but along

00:20.250 --> 00:24.690
the way not only are we going to learn about these these data structures and talk about why they matter

00:24.690 --> 00:25.830
and how they're useful.

00:25.830 --> 00:27.450
We're also going to implement them.

00:27.480 --> 00:30.040
Javascript doesn't come with any of these pre-built.

00:30.210 --> 00:33.740
And so the point is that we're going to go through and write our own.

00:33.810 --> 00:40.170
But in order to do that we need to take advantage of the east 2015 class syntax and Javascript.

00:40.170 --> 00:45.900
So depending on how familiar familiar you are with javascript and with object oriented programming you

00:45.900 --> 00:50.130
may know that javascript doesn't really support O.P. or object oriented programming.

00:50.130 --> 00:55.000
However with the 2015 a new class keyword was was introduced.

00:54.990 --> 00:58.920
We're going to take advantage of that throughout this course because it makes it really easy and simple

00:58.920 --> 01:01.070
for us to define our data structures.

01:01.080 --> 01:05.490
So if you're already familiar with it if you feel good about writing using the class keyword writing

01:05.490 --> 01:11.460
constructors instantiating new instances using your class in javascript then you could skip this section

01:11.670 --> 01:15.390
but if you need some review over it then or if you've never learned it before.

01:15.450 --> 01:17.710
I think that this will help you out.

01:17.730 --> 01:23.460
Also if you've never worked with any sort of Object-Oriented language before or you've never defined

01:23.460 --> 01:29.670
any sort of patterns whether it's in javascript or in Python or Ruby or any other language then this

01:29.670 --> 01:32.850
is going to be kind of a lot to take in right away.

01:33.180 --> 01:37.470
But I recommend that you watch this video you try some of the examples and then you start out with a

01:37.470 --> 01:40.390
singly linked list which is up next and see how that goes.

01:40.650 --> 01:41.770
But take it slow if you.

01:41.770 --> 01:46.950
If you've never written a class before so first our objectives were going to start by talking about

01:46.950 --> 01:51.740
what classes are going to understand how javascript implements the idea of classes.

01:51.910 --> 01:54.620
Bolded because it's not quite true.

01:54.630 --> 01:55.920
Object Oriented Programming.

01:56.100 --> 01:56.800
Well different.

01:56.790 --> 02:02.430
Define terms like abstraction encapsulation and polymorphism and then we'll use as 20:15 classes to

02:02.430 --> 02:04.040
implement data structures.

02:04.220 --> 02:07.720
OK so first up what the heck is a class.

02:07.740 --> 02:13.870
So in general a class is like a blueprint for creating objects with pre-defined properties and methods.

02:14.130 --> 02:18.670
So we'll learn how to make a singly linked lists are doubly linked list.

02:18.720 --> 02:24.960
We define a pattern for a doubly linked list but then we can actually instantiate many objects many

02:24.960 --> 02:29.130
individual linked lists using that blueprint using our class.

02:29.130 --> 02:32.710
It's sort of like arrays and Javascript although it's not quite the same.

02:32.730 --> 02:37.170
We have a pattern for for an array and arrays come with a bunch of methods and things that they can

02:37.170 --> 02:37.690
do.

02:37.950 --> 02:43.380
But we have to first instantiate a new array and then we can get access to all of those so there's an

02:43.380 --> 02:44.060
array.

02:44.220 --> 02:48.930
It's not technically a class but you can think of it as sort of a blueprint and then we can instantiate

02:48.960 --> 02:50.830
objects based off of that blueprint.

02:50.940 --> 02:54.960
So as I kind of hinted at javascript doesn't really have classes.

02:54.960 --> 03:00.810
If you go to the documentation on M.D n Mozilla developer network you can see up top on the this is

03:00.810 --> 03:07.740
there are classes main page javascript classes introduced and as 20:15 are primarily syntactical sugar

03:08.040 --> 03:11.330
over javascript's existing prototype based inheritance.

03:11.330 --> 03:15.880
The class syntax does not introduce a new Object-Oriented inheritance model to Javascript.

03:15.990 --> 03:18.390
So this is saying this is basically javascript.

03:18.380 --> 03:20.910
It has never really been truly object oriented.

03:20.980 --> 03:27.750
It takes advantage of something called prototype based inheritance or prototype CL and all that happens

03:27.750 --> 03:33.090
with East 2015 is that this class syntax was introduced but it's not changing how things work behind

03:33.090 --> 03:33.600
the scenes.

03:33.630 --> 03:38.920
It's just an easier way to work and to define class like structures.

03:38.970 --> 03:44.670
So if you are not familiar with either those with object oriented programming or prototype based inheritance

03:44.940 --> 03:47.110
then that probably made zero sense.

03:47.340 --> 03:51.410
But all that will say is that it does help to know that technically this is not true.

03:51.420 --> 03:52.520
Object Oriented Programming.

03:52.530 --> 03:54.460
But that's not going to hinder us in any way.

03:54.600 --> 03:56.450
We just have to it's good to know that.

03:56.460 --> 03:57.570
Let's just leave it at that.

03:57.570 --> 03:59.610
So next why do we need to learn this.

03:59.610 --> 04:04.290
Well as I've already mentioned we're going to implement tons of data structures as classes.

04:04.290 --> 04:09.590
So any time we build We're going to learn how to build a tree or a graph or a singly length list.

04:09.600 --> 04:14.730
We're going to define a class define a pattern in javascript that we can then instantiate individual

04:14.730 --> 04:15.540
lists from.

04:15.540 --> 04:17.460
For example here's a little spoiler.

04:17.490 --> 04:23.880
Here's two classes we defined for our singly linked list so you can see we have the class keyword constructor

04:23.880 --> 04:24.900
will go into all this detail.

04:24.900 --> 04:28.650
But here is the class for the singly linked list is kind of long.

04:28.650 --> 04:30.360
There's a lot of methods we add in there.

04:30.360 --> 04:33.490
This is a blueprint though this doesn't actually represent any data.

04:33.500 --> 04:35.580
There's no there's no instance of a list.

04:35.580 --> 04:37.330
We still have to instantiate one.

04:37.440 --> 04:44.130
Here's another really short class called a node and the singly linked list class utilizes the Node class

04:44.130 --> 04:44.820
inside of it.

04:44.850 --> 04:46.080
So that's all I'll say about it for now.

04:46.080 --> 04:50.860
But this is just a single example of many that we're going to see and implement on our own.

04:50.970 --> 04:52.420
So I think that I'll leave off here.

04:52.440 --> 04:56.000
Just know that classes are what we're going to use throughout the rest of the course.

04:56.130 --> 05:00.670
Coming up next a bunch of data structures in the next video though are going to introduce the syntax

05:00.730 --> 05:01.710
for classes.

05:01.810 --> 05:04.840
So if you know what you can skip it take get some review.

05:04.900 --> 05:08.680
But if you don't know it I highly recommend that you just sit through the next couple of videos.

05:08.680 --> 05:12.910
I know it's not on an data structures just yet but it's really important because we're going to use

05:12.910 --> 05:13.530
this.

05:13.540 --> 05:14.650
OK I'll shut up.
