1
00:00:00,210 --> 00:00:01,290
Hey welcome back.

2
00:00:01,410 --> 00:00:06,150
So this is the first real section of the course and we're kicking it off as something really important

3
00:00:06,210 --> 00:00:07,610
thing big.

4
00:00:07,620 --> 00:00:09,350
It's called Big O notation.

5
00:00:09,540 --> 00:00:16,480
And when I say big I don't mean that it's long or difficult even it's big in significance.

6
00:00:16,530 --> 00:00:22,170
It's something that we basically I had no choice but to start the course off with this topic because

7
00:00:22,440 --> 00:00:29,070
at least if I wanted to make it a good course because it's going to come up in I don't I won't say every

8
00:00:29,070 --> 00:00:33,600
single video but maybe 70 percent of the videos and the rest of the course don't hold me to that but

9
00:00:33,870 --> 00:00:36,040
a lot of video is a significant number.

10
00:00:36,150 --> 00:00:38,840
We're going to refer back to what we talked about in this section.

11
00:00:39,080 --> 00:00:42,710
So before I even explain what it is I have a quick warning.

12
00:00:42,880 --> 00:00:49,860
There's a bit of math in this section and I'm warning you not to scare you away but actually to encourage

13
00:00:49,860 --> 00:00:50,670
you to push through it.

14
00:00:50,670 --> 00:00:57,960
If you do struggle with math or if you're someone who hasn't heard the word logarithm ever or in ten

15
00:00:57,960 --> 00:01:01,460
or 20 years that's going to come up in this section at the end.

16
00:01:01,560 --> 00:01:05,670
But don't panic because what we're going to do here in this section is establish a framework for talking

17
00:01:05,670 --> 00:01:07,370
about code and the rest of the course.

18
00:01:07,710 --> 00:01:13,770
And that does involve some math upfront but it means that the rest of the Course isn't going to be some

19
00:01:13,770 --> 00:01:16,220
of it will be mathy definitely but it's not.

20
00:01:16,230 --> 00:01:19,120
This is not indicative of what the rest of the Course will look like.

21
00:01:19,170 --> 00:01:24,210
So just push through it if I mean if you like math great if you have some problems with this section

22
00:01:24,570 --> 00:01:29,580
just remember that the entire course isn't like this and we're just getting it out of the way because

23
00:01:29,670 --> 00:01:31,460
like I said it has to come first.

24
00:01:31,470 --> 00:01:32,490
I don't really have a choice.

25
00:01:32,610 --> 00:01:33,120
OK.

26
00:01:33,420 --> 00:01:35,360
Sorry if I scared anybody there.

27
00:01:35,610 --> 00:01:38,100
Let's talk about the objectives for this section.

28
00:01:38,100 --> 00:01:42,840
So in this video we're going to start by just talking about the need for something like Big O notation

29
00:01:43,620 --> 00:01:46,140
I haven't even mentioned what it is.

30
00:01:46,260 --> 00:01:51,060
So we're going to get to that then we're going to describe what it is so why we care about it what it

31
00:01:51,060 --> 00:01:57,600
is we're going to learn to simplify Big O expressions we'll define time complexity and space complexity

32
00:01:58,350 --> 00:02:04,290
will evaluate time complexity and space complexity of different algorithms using Big O notation and

33
00:02:04,290 --> 00:02:08,020
then we'll describe what a logarithm is a bit of math at the end there.

34
00:02:08,100 --> 00:02:13,710
So I know it's a lot but we're going to start with this first bullet point motivate the need for something

35
00:02:13,710 --> 00:02:15,180
like Big-O notation.

36
00:02:15,330 --> 00:02:16,560
So what is the idea here.

37
00:02:16,740 --> 00:02:23,280
Well this course is about algorithms it's about solving challenges it's about computer science and data

38
00:02:23,280 --> 00:02:24,060
structures.

39
00:02:24,060 --> 00:02:30,060
But for every topic in this course there's 10 20 different implementations or solutions that could work

40
00:02:30,450 --> 00:02:31,730
probably way more.

41
00:02:31,980 --> 00:02:33,530
How do we know what's best.

42
00:02:33,690 --> 00:02:36,620
So let's scale it down a bit just to a single problem.

43
00:02:36,670 --> 00:02:39,330
Let's say that there are two valid solutions to a problem.

44
00:02:39,420 --> 00:02:45,480
They both work and they're different not just in names or variable names or something but totally different

45
00:02:45,700 --> 00:02:48,660
in approaches one uses a loop the other uses.

46
00:02:48,690 --> 00:02:52,900
I don't know a list or a string or something to accomplish the same task.

47
00:02:52,920 --> 00:02:54,380
How do we know which one is best.

48
00:02:54,480 --> 00:02:56,470
That's really what Big O is about.

49
00:02:56,490 --> 00:03:03,300
It's a system it's a way of generalizing code and talking about it and comparing code and its performance

50
00:03:03,330 --> 00:03:04,740
to other pieces of code.

51
00:03:06,040 --> 00:03:07,650
Ok so here is a more concrete example.

52
00:03:07,660 --> 00:03:11,350
Write a function that accepts a string input and returns or reversed copy.

53
00:03:11,380 --> 00:03:15,850
If I asked you to do this which maybe some enterprising students will do this and come up with some

54
00:03:15,850 --> 00:03:22,240
creative solutions off the top of my head I can come up with three ish solutions different approaches

55
00:03:22,630 --> 00:03:24,780
and I'm sure there are way more out there.

56
00:03:24,790 --> 00:03:30,760
I actually found this post on Stack Overflow that has 10 different implementations and Javascript and

57
00:03:30,760 --> 00:03:31,600
they're all different.

58
00:03:31,600 --> 00:03:34,120
Like I said it's not just a different variable name.

59
00:03:34,120 --> 00:03:36,600
It's not just switching a for loop for a while loop.

60
00:03:36,760 --> 00:03:38,410
There are different approaches.

61
00:03:38,410 --> 00:03:40,530
How do we know if all these work.

62
00:03:40,590 --> 00:03:43,830
And here's one using a for loop and an array.

63
00:03:43,840 --> 00:03:48,850
Here's one that uses no loops and it's no arrays it's all actually just or is an array and there at

64
00:03:48,850 --> 00:03:50,850
one point but it's all built in methods.

65
00:03:51,250 --> 00:03:52,880
How do we know which one is best.

66
00:03:53,170 --> 00:03:54,360
Well we'll get there.

67
00:03:54,670 --> 00:04:01,030
But wouldn't it be nice if there was sort of a system for classifying code or for comparing it which

68
00:04:01,030 --> 00:04:07,300
I've already spoiled it and said that's a big O sort of is it sort of like if we're talking about earthquakes.

69
00:04:07,330 --> 00:04:13,480
This was a seismology 101 class very early on I would start off by talking about the Richter scale because

70
00:04:13,480 --> 00:04:17,970
then that allows us to talk about earthquakes and compare them to one another.

71
00:04:18,070 --> 00:04:21,640
So that instead of just saying oh there's a big earthquake and then a bigger one over there.

72
00:04:21,730 --> 00:04:26,320
We can say there is a 7.5 and then a 9.2 over there.

73
00:04:26,320 --> 00:04:28,580
And that puts things into context.

74
00:04:28,690 --> 00:04:35,440
That's kind of not a great analogy but the idea is that we can assign labels generalized labels to our

75
00:04:35,440 --> 00:04:36,120
code.

76
00:04:36,190 --> 00:04:43,930
So instead of saying something like great or are awful for our code we can have a numeric representation

77
00:04:44,230 --> 00:04:45,810
of the performance of code.

78
00:04:45,820 --> 00:04:49,800
So that's what big-O is going to give us rather than colors and text like.

79
00:04:49,810 --> 00:04:50,510
Great.

80
00:04:50,740 --> 00:04:52,610
It's going to look a little bit different.

81
00:04:52,630 --> 00:04:55,560
It might look a little mathy but it's actually pretty straightforward.

82
00:04:55,570 --> 00:05:00,220
Once you get past the first hurdle of it looking very foreign and weird.

83
00:05:00,220 --> 00:05:05,740
So one last point I want to make some of you might be wondering if I asked you to write a function that

84
00:05:05,740 --> 00:05:07,960
reverse a string and you get it to work.

85
00:05:08,060 --> 00:05:10,680
It doesn't it only matters that you get it to work.

86
00:05:10,720 --> 00:05:14,900
Why does it matter what's best the solution you come up with is the best.

87
00:05:14,920 --> 00:05:21,790
And in some ways I think that depending on your project and the context that's true the best solution

88
00:05:21,790 --> 00:05:23,560
is the one that you can get to work.

89
00:05:23,620 --> 00:05:30,310
But when we're talking about things like interviewing technical interview code challenges or working

90
00:05:30,310 --> 00:05:35,500
at a large company where you're working with a huge data set let's say hundreds of millions of pieces

91
00:05:35,500 --> 00:05:42,550
of data where one algorithm implementation could save an hour every time it runs compared to another

92
00:05:42,550 --> 00:05:43,610
implementation.

93
00:05:43,630 --> 00:05:49,660
Performance matters at that point and there is an actual best algorithm or best solution.

94
00:05:50,020 --> 00:05:53,970
So it's important to have a precise vocabulary to talk about how our code performs.

95
00:05:53,970 --> 00:05:58,990
So even if you're content with your solution to something it's helpful to be able to understand how

96
00:05:58,990 --> 00:06:01,830
it compares how it performs compared to others.

97
00:06:02,570 --> 00:06:08,030
It's also good for discussing tradeoffs between different approaches because often it's not as cut and

98
00:06:08,030 --> 00:06:13,310
dry as I made it seem it's not that one solution is always great and the other one is always terrible.

99
00:06:13,310 --> 00:06:18,050
Sometimes one solution might be great at handling really large data sets of pieces of data.

100
00:06:18,140 --> 00:06:23,230
Another one might always be very consistent in the time that it takes but it might take more time up

101
00:06:23,230 --> 00:06:23,740
front.

102
00:06:23,840 --> 00:06:25,640
There's tradeoffs so it's not always just.

103
00:06:25,640 --> 00:06:30,910
This is the best Also if you're trying to debug your code.

104
00:06:31,010 --> 00:06:36,360
It helps to understand things that are slowing it down not just looking for errors.

105
00:06:36,470 --> 00:06:40,280
Well let's say that your code is working but for some reason it's taking a lot longer than you expect.

106
00:06:40,430 --> 00:06:45,680
Or your computer is lagging and freaking out in the browser when you execute some function.

107
00:06:45,710 --> 00:06:50,600
It helps if you understand some of the things we're going to talk about in this section and Big O notation

108
00:06:51,170 --> 00:06:54,680
you can actually pinpoint where some problems might arise.

109
00:06:54,680 --> 00:07:01,610
So it helps us identify inefficient points and then finally you should care because it comes up in interviews

110
00:07:01,640 --> 00:07:08,300
a lot a lot of times an interviewer will say something like tell me the big O of this algorithm or this

111
00:07:08,540 --> 00:07:13,610
function that you've written or here's three functions what's the big show that will make sense in a

112
00:07:13,610 --> 00:07:18,740
bit but it's important just to know for interviews I said it's less important because hopefully you're

113
00:07:18,740 --> 00:07:23,150
learning it to actually understand things and to help you understand your code better and talk about

114
00:07:23,150 --> 00:07:27,640
your code better rather than just directly trying to master it for an interview.

115
00:07:27,680 --> 00:07:30,990
But interviews are important so no judgment there either.

116
00:07:31,130 --> 00:07:34,270
So I'm going to leave this video off here and try to keep things more compact.

117
00:07:34,280 --> 00:07:35,920
I don't want any rambling videos.

118
00:07:36,080 --> 00:07:41,270
And the next video we're going to pick up with a real example some code and start to analyze how efficient

119
00:07:41,270 --> 00:07:41,570
it is.

