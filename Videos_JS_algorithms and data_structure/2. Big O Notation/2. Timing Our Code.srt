1
00:00:00,180 --> 00:00:00,720
All right.

2
00:00:00,720 --> 00:00:05,740
So let's take a look at a more concrete example let's compare two solutions to the same problem.

3
00:00:06,390 --> 00:00:07,350
All right so here's our problem.

4
00:00:07,350 --> 00:00:12,930
Suppose you want to write a function that calculates the sum of all numbers from one up to and including

5
00:00:12,930 --> 00:00:21,300
some number and so if we plug 3 in we should get one plus two plus three which has six the most common

6
00:00:21,420 --> 00:00:23,670
are the easiest to come up with solution.

7
00:00:23,700 --> 00:00:30,510
This is the one that comes to my mind first is to basically create a total variable accumulator and

8
00:00:30,540 --> 00:00:34,870
loop through all those numbers and add them in one at a time starting at 1.

9
00:00:34,890 --> 00:00:36,090
All the way up until now.

10
00:00:36,300 --> 00:00:37,660
So that's what I've done here.

11
00:00:37,690 --> 00:00:42,620
You have a for loop total variable starts at zero and at the end we return total.

12
00:00:42,750 --> 00:00:51,550
We start the loop at 1 we go up until N each time through total plus equals I actually have.

13
00:00:51,580 --> 00:00:52,270
There we go.

14
00:00:52,320 --> 00:00:54,100
I have it open as a snippet here.

15
00:00:54,180 --> 00:00:59,280
If you're not familiar with snippets basically it's a way for me to just rather than copy and paste

16
00:00:59,280 --> 00:01:03,020
code into the console and have to deal with losing it and rerunning it.

17
00:01:03,030 --> 00:01:09,210
And that pain in Chrome you can go to the sources tab and then there's a snippets tab you can click

18
00:01:09,210 --> 00:01:14,160
on and it allows you to create new snippets of a couple of them here and I'm going to use them in this

19
00:01:14,160 --> 00:01:18,860
course quite frequently as an easy way to save code and execute it.

20
00:01:18,960 --> 00:01:22,590
And just to show you how it works here's this same add up to function.

21
00:01:23,130 --> 00:01:27,570
And I am printing it out at the bottom the result of adding up to 6.

22
00:01:27,570 --> 00:01:32,940
So that should be six plus five plus four plus three plus two plus one to execute it.

23
00:01:32,940 --> 00:01:38,900
I can either click over here or you can see the shortcut it suggests to me on a Mac is command enter.

24
00:01:39,090 --> 00:01:41,010
It will say the correct shortcut on a PC.

25
00:01:41,010 --> 00:01:42,610
I think it's control center.

26
00:01:43,050 --> 00:01:45,940
So if I do that now I get 21.

27
00:01:46,110 --> 00:01:48,250
I did it with three hour ago.

28
00:01:48,360 --> 00:01:49,030
I get six.

29
00:01:49,050 --> 00:01:53,040
If I did it with 100 hundred I get 50 50.

30
00:01:53,220 --> 00:01:53,420
OK.

31
00:01:53,430 --> 00:01:55,840
So that's just to demonstrate that that works.

32
00:01:55,920 --> 00:01:58,140
Next there's a second solution.

33
00:01:58,380 --> 00:02:02,640
There's more than these two but these are two that I'm going to use because they illustrate my point.

34
00:02:02,640 --> 00:02:05,570
This one is definitely less intuitive.

35
00:02:05,670 --> 00:02:10,620
As you can see it's a lot shorter it's a single line which doesn't necessarily make it better but it's

36
00:02:10,620 --> 00:02:11,250
very different.

37
00:02:11,250 --> 00:02:12,490
There's no loop involved.

38
00:02:12,720 --> 00:02:16,000
What we're doing is it's more of a mathematical formula.

39
00:02:16,320 --> 00:02:21,330
We take N and we multiply it by n plus 1 divided by 2.

40
00:02:21,600 --> 00:02:24,080
And where this is derived from I'm not going to go into.

41
00:02:24,080 --> 00:02:30,270
I do have slides on it or a slide that talks about how we arrive with this formula if you want to check

42
00:02:30,270 --> 00:02:32,480
it out you can but it is not.

43
00:02:32,700 --> 00:02:37,980
It's not the focus of this video so I don't want to distract from the actual focus which is evaluating

44
00:02:38,340 --> 00:02:43,690
and comparing these pieces of code not actually diving into how we write them.

45
00:02:43,710 --> 00:02:45,380
So just to show you this one it does work.

46
00:02:45,480 --> 00:02:47,090
I have another snippet over here.

47
00:02:47,310 --> 00:02:48,390
I can run the same thing.

48
00:02:48,390 --> 00:02:51,200
Let's do it with six again and I'll do.

49
00:02:51,210 --> 00:02:54,230
Command enter to execute and I get 21.

50
00:02:54,480 --> 00:02:56,060
And just to walk through what happens there.

51
00:02:56,150 --> 00:03:01,710
So the equivalent of taking six plus one first which is going to give us seven and then we multiply

52
00:03:01,710 --> 00:03:07,070
that by six which gives us 42 and then we divide by 2 which gives us 21.

53
00:03:07,140 --> 00:03:10,200
So it does work gives us the same answer in the end.

54
00:03:10,200 --> 00:03:11,690
Again how it works.

55
00:03:11,730 --> 00:03:12,970
We'll leave that be.

56
00:03:13,200 --> 00:03:13,500
All right.

57
00:03:13,500 --> 00:03:15,620
So we established there are two working solutions.

58
00:03:15,780 --> 00:03:17,460
Which one is better.

59
00:03:17,460 --> 00:03:21,540
And of course the first thing that we could ask is What does better actually mean.

60
00:03:21,540 --> 00:03:28,920
Does it mean the faster code in seconds or milliseconds does it mean the code that's fastest when we're

61
00:03:29,010 --> 00:03:31,480
adding a small number versus a large number.

62
00:03:31,800 --> 00:03:36,370
Let's say we want to benchmark it out when we add up all the numbers trans euro and 1 billion.

63
00:03:36,390 --> 00:03:41,100
Is that a good test or is it about how much memory is used.

64
00:03:41,100 --> 00:03:46,290
Is it you know the number of variables that are created that the data that is stored each time that

65
00:03:46,460 --> 00:03:48,690
that function is called.

66
00:03:48,870 --> 00:03:51,390
Or what about something like readability legibility.

67
00:03:51,390 --> 00:03:52,440
How important is that.

68
00:03:52,440 --> 00:03:57,670
Is that better or brevity that's not on here but a lot of people care about that.

69
00:03:57,690 --> 00:04:02,550
They like to minimize the length the number of characters used in their programming.

70
00:04:02,670 --> 00:04:05,650
Not my style personally but definitely valid.

71
00:04:05,670 --> 00:04:10,040
All of these are valid concerns and it really comes down to the situation.

72
00:04:10,350 --> 00:04:16,320
But I think most people would agree that the first two especially for now we're going to focus on speed

73
00:04:16,320 --> 00:04:23,010
will come back to memory usage a bit but these too often can be more important than something like readability.

74
00:04:23,400 --> 00:04:27,840
And unfortunately they often come at the expense of readability and that's sort of the balancing act

75
00:04:27,840 --> 00:04:33,780
of of writing good code is writing efficient code that doesn't use up you know a ton of memory but also

76
00:04:33,780 --> 00:04:37,050
is still readable and doesn't look like complete jibberish.

77
00:04:37,050 --> 00:04:41,510
So we're going to talk about basically all of these play together throughout the entire course.

78
00:04:41,520 --> 00:04:48,270
It will be a recurring theme but we're going to focus on evaluating speed how long code takes to execute

79
00:04:48,690 --> 00:04:49,390
a target to start.

80
00:04:49,400 --> 00:04:50,410
So how do we do that.

81
00:04:50,640 --> 00:04:56,610
Well the simplest way would be to use something like a built in timing functions something like this

82
00:04:57,420 --> 00:05:04,470
where we have our first add up to and then I use a function called method called performance now which

83
00:05:04,470 --> 00:05:09,630
in the browser is just going to tell me the number of milliseconds since the document was created.

84
00:05:09,630 --> 00:05:13,430
Basically since they open the window and then so I'm going to save that to a variable.

85
00:05:13,440 --> 00:05:18,840
Before I call add up to then I'm going to call add up to with what did I do.

86
00:05:18,840 --> 00:05:19,980
It's a billion.

87
00:05:19,980 --> 00:05:21,050
I think it's a billion.

88
00:05:21,120 --> 00:05:22,830
So I'm going to call with a large number.

89
00:05:23,130 --> 00:05:26,580
And then after that finishes I'm going to check performance out.

90
00:05:26,590 --> 00:05:31,470
Now again which should have incremented a bunch of milliseconds most likely.

91
00:05:31,500 --> 00:05:32,710
So I have two numbers.

92
00:05:32,820 --> 00:05:39,450
Then I just subtract them first or the second time minus the first time and I divide it by 1000 because

93
00:05:39,480 --> 00:05:40,360
it's in milliseconds.

94
00:05:40,380 --> 00:05:41,860
And I want to work in seconds.

95
00:05:42,030 --> 00:05:43,420
We don't have to do that last part.

96
00:05:43,530 --> 00:05:44,570
And I printed out.

97
00:05:44,850 --> 00:05:45,740
So this should work.

98
00:05:45,780 --> 00:05:48,310
And I actually have a snippet right here.

99
00:05:48,420 --> 00:05:49,330
Same thing.

100
00:05:49,470 --> 00:05:52,690
So add up to our same one from before.

101
00:05:52,920 --> 00:05:57,400
And we're calling it with 1 billion and we're going to print out how long elapsed.

102
00:05:57,400 --> 00:05:59,680
Let me clear my console first and I'm going.

103
00:05:59,680 --> 00:06:00,780
Executed.

104
00:06:01,940 --> 00:06:06,410
There we go one point to 5 7 5 so one seconds.

105
00:06:06,600 --> 00:06:07,610
Let me do it one more time.

106
00:06:09,160 --> 00:06:12,120
What you actually see I don't think executed.

107
00:06:12,120 --> 00:06:12,780
There we go.

108
00:06:12,930 --> 00:06:13,860
Is that it varies.

109
00:06:13,890 --> 00:06:16,650
So it changes even on my own computer.

110
00:06:16,710 --> 00:06:19,080
Nothing really has changed.

111
00:06:19,290 --> 00:06:22,850
I haven't added code I haven't changed the numbers here.

112
00:06:23,040 --> 00:06:27,030
It's the exact same code but we're getting a different output.

113
00:06:27,030 --> 00:06:27,590
Before I forget.

114
00:06:27,600 --> 00:06:30,430
Let's go over to the second solution.

115
00:06:30,930 --> 00:06:35,390
So the exact same number let me just make sure I didn't leave off or add is zero.

116
00:06:35,430 --> 00:06:39,200
Yes they are the same and I'm doing the same thing taking performance.

117
00:06:39,210 --> 00:06:42,450
Now the beginning and performance start now at the end.

118
00:06:42,570 --> 00:06:44,710
You say should show what that looks like.

119
00:06:44,790 --> 00:06:50,880
You can see that kind of a large number at this point because I've had this open for a number of minutes

120
00:06:50,880 --> 00:06:54,330
if I refresh the page though I just did.

121
00:06:54,360 --> 00:06:58,030
Now it's at 2000 milliseconds which is two seconds.

122
00:06:58,200 --> 00:07:01,680
Now if I did it again we're at six point six seconds.

123
00:07:01,920 --> 00:07:05,620
And if we subtract the two you know four seconds roughly in between.

124
00:07:05,620 --> 00:07:07,900
Anyway we're doing the same thing here.

125
00:07:08,220 --> 00:07:08,720
OK.

126
00:07:08,880 --> 00:07:16,890
So now if I run this you can see we get a way smaller number but it's still actually I guess it doesn't

127
00:07:16,890 --> 00:07:19,160
look like it's changing here is it.

128
00:07:19,370 --> 00:07:23,420
Then the measurements the differences are too small not really to capture.

129
00:07:23,490 --> 00:07:27,580
But my point is that this is significantly shorter in duration.

130
00:07:27,580 --> 00:07:30,590
But the same data as this one.

131
00:07:30,590 --> 00:07:36,000
Here we go at one point two four seconds compared to basically zero seconds.

132
00:07:36,000 --> 00:07:39,260
So that seems like a good sign for this solution.

133
00:07:39,270 --> 00:07:42,310
It seems like it's much more efficient and that's great.

134
00:07:42,480 --> 00:07:50,490
But this process is not the most reliable of manually timing things like this before and after and comparing

135
00:07:50,490 --> 00:07:53,990
it to the other function and it's not that easy for us to talk about.

136
00:07:54,000 --> 00:07:59,130
How would I actually write down how would I give it a label of how efficient this one is compared to

137
00:07:59,130 --> 00:07:59,830
this one.

138
00:07:59,840 --> 00:08:03,460
Is it based off of the percentage of speed.

139
00:08:03,650 --> 00:08:09,210
Is it do I subtract the number of seconds or milliseconds it gets a little blurry.

140
00:08:09,210 --> 00:08:17,430
This brings us to the problem with time which I'm reserving for my end of life memoir title problem

141
00:08:17,430 --> 00:08:18,290
with time.

142
00:08:18,570 --> 00:08:21,990
It's just a nice little sounds very deep.

143
00:08:22,140 --> 00:08:24,770
So the first is that different machines will record different times.

144
00:08:24,780 --> 00:08:30,900
So it's not reliable depending on the specifications on how much of a machine and what's currently happening

145
00:08:30,900 --> 00:08:36,480
on that machine what code is running the time the results you can get will be different.

146
00:08:36,540 --> 00:08:42,090
That doesn't really mean that we'll get the opposite results where the first solution is suddenly faster

147
00:08:42,090 --> 00:08:43,090
than the second one.

148
00:08:43,170 --> 00:08:48,240
But it means that the margins can change the actual measurements could be different and are almost guaranteed

149
00:08:48,240 --> 00:08:49,820
to be different times.

150
00:08:50,370 --> 00:08:53,760
And as we saw this same machine will record different times.

151
00:08:53,760 --> 00:08:56,230
So in my browser I just did the exact same code.

152
00:08:56,310 --> 00:09:02,490
That first example and it differed each time by a little bit which isn't really a problem but it still

153
00:09:02,490 --> 00:09:05,720
shows that it's not precise and that we can't rely on that.

154
00:09:05,820 --> 00:09:10,650
And second of all or third of all I guess is that for fast algorithms things that are happening on a

155
00:09:10,710 --> 00:09:15,590
really really fast scale speed measurements might not be precise enough.

156
00:09:15,600 --> 00:09:18,750
We have two or three or four algorithms and they're all super fast.

157
00:09:18,790 --> 00:09:20,330
They're doing something very quickly.

158
00:09:20,340 --> 00:09:23,220
There still is one that is going to be fastest or most efficient.

159
00:09:23,310 --> 00:09:29,580
But if our timing functions can't figure it out because they're you know the smallest interval of time

160
00:09:29,880 --> 00:09:34,530
that can be measured isn't good enough then it doesn't really help us.

161
00:09:34,530 --> 00:09:40,260
So how do we walk through our code and actually talk in general terms about which code is better without

162
00:09:40,320 --> 00:09:41,530
having to go and time it.

163
00:09:41,550 --> 00:09:44,840
So I want to be clear I'm not saying that timing your code is a bad idea.

164
00:09:44,850 --> 00:09:52,140
I do it all the time but I'm more saying is that it would be cool if there was another way that didn't

165
00:09:52,140 --> 00:09:56,650
involve having to set up a new file and actually go through the process of timing our code.

166
00:09:56,670 --> 00:10:02,340
What if our code takes you know an hour something massive and I'm comparing it to another version that

167
00:10:02,340 --> 00:10:03,560
takes four hours.

168
00:10:03,600 --> 00:10:06,690
I don't want to have to run a test to figure out which one is faster.

169
00:10:06,720 --> 00:10:09,450
We want to be able to assign a value to.

170
00:10:09,570 --> 00:10:14,710
In general terms talk about how code compares to other code without having to go through all of this.

171
00:10:14,760 --> 00:10:18,040
And that's where Big-O notation comes in and that's coming up next.

172
00:10:18,180 --> 00:10:19,000
Cliffhanger sorry.

