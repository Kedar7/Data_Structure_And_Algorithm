1
00:00:00,210 --> 00:00:00,580
All right.

2
00:00:00,580 --> 00:00:01,470
Welcome back.

3
00:00:01,470 --> 00:00:04,950
So now we're going to talk more about simplifying big-O expressions.

4
00:00:04,950 --> 00:00:06,810
We've already seen a little bit of this.

5
00:00:06,850 --> 00:00:12,900
I'm going to rewind a couple of slides back if you remember this slide where we talked about how counting

6
00:00:13,050 --> 00:00:18,580
all these different operations can be tricky and that it doesn't really matter the exact count.

7
00:00:18,630 --> 00:00:21,620
All that we care about is really the general trend.

8
00:00:21,740 --> 00:00:27,380
And so we simplified this from five and plus two to just.

9
00:00:27,420 --> 00:00:33,840
And we said that as and grows the runtime grows proportionately with and it doesn't matter if it's two

10
00:00:33,840 --> 00:00:39,930
times and or 10 times then or a thousand times and the trend line that we're drawing on that chart is

11
00:00:39,930 --> 00:00:41,060
proportionate with N.

12
00:00:41,160 --> 00:00:46,580
So now we're going to talk about some actual rules we can use to help us when simplifying these expressions.

13
00:00:46,590 --> 00:00:50,090
There are some helpful rules of thumb that we can follow.

14
00:00:50,490 --> 00:00:51,590
Rule of thumbs.

15
00:00:51,720 --> 00:00:54,540
Rules of thumb rule of thumbs.

16
00:00:54,570 --> 00:00:54,960
OK.

17
00:00:55,020 --> 00:00:59,970
Whichever one it is these rules are consequences of the definition of big-O.

18
00:00:59,970 --> 00:01:05,210
Once again that we only care about the broadest fuzziest big picture view.

19
00:01:05,370 --> 00:01:06,740
So constants don't matter.

20
00:01:06,810 --> 00:01:14,510
So if we have something like 0 of two n we simplify that down just to over in 0 of 500.

21
00:01:15,150 --> 00:01:23,220
Simplify that just to 0 of 1 because 0 500 remember is just that's basically saying there are 500 operations

22
00:01:23,520 --> 00:01:30,250
every time no matter what end is and to that line that chart is going to be flat and instead of saying

23
00:01:30,250 --> 00:01:34,540
it's going to be fought at 500 we'll just simplify it down saying that it's 0 0 1 that's how we say

24
00:01:34,540 --> 00:01:41,030
something is constant constant run time 0 of 13 and squared.

25
00:01:41,350 --> 00:01:46,900
Well we don't need that constant we just do over and square it because the difference when we're looking

26
00:01:46,900 --> 00:01:47,650
at this.

27
00:01:47,770 --> 00:01:53,530
Basically if if our graph went all the way to infinity as far as and and we're looking at the difference

28
00:01:53,530 --> 00:02:00,310
between 13 and squared and just end squared and a thousand squared they're all going to look very very

29
00:02:00,310 --> 00:02:01,270
similar.

30
00:02:01,390 --> 00:02:04,490
Once we elongate that chart to that level.

31
00:02:04,660 --> 00:02:06,040
So it doesn't really matter.

32
00:02:06,040 --> 00:02:10,010
So we just get rid of that because now we can compare these and we know that.

33
00:02:10,030 --> 00:02:13,880
OK this is going to be faster than this and this is going to be the slowest.

34
00:02:13,930 --> 00:02:20,800
Just based off of the charts the general fuzzy trends so smaller terms also don't matter.

35
00:02:20,800 --> 00:02:26,700
The constants out front in front of and but smaller terms like this of and plus 10 just get rid of the

36
00:02:26,710 --> 00:02:37,330
10 his own event or in this case 0 of 1000 plus 50 can simplify that just to oven.

37
00:02:37,840 --> 00:02:41,650
You don't need the constants and we don't need the small term at the end.

38
00:02:41,950 --> 00:02:43,070
And how about this one.

39
00:02:43,300 --> 00:02:45,150
And squared plus five and plus eight.

40
00:02:45,430 --> 00:02:51,100
Well once again look at it from a huge huge like imagine we're noter outer space looking at this chart

41
00:02:51,700 --> 00:02:56,060
and we have to figure out what really matters what's the trend at the end of the day.

42
00:02:56,140 --> 00:03:01,030
Five ten plus eight is meaningless compared to end squared.

43
00:03:01,150 --> 00:03:08,680
When you're dealing with a number like if you just plug in the number one thousand five times 1005 and

44
00:03:08,710 --> 00:03:14,250
give just 5000 but n squared 1000 times 1000 is 10 million.

45
00:03:14,260 --> 00:03:15,790
I think I did that right.

46
00:03:15,790 --> 00:03:22,330
So we're talking about 10 million plus five thousand plus eight just as an example.

47
00:03:22,630 --> 00:03:28,780
The difference between 10 million five thousand eight versus 10 million is so small and that's just

48
00:03:28,780 --> 00:03:29,940
when we plug in 1000.

49
00:03:29,940 --> 00:03:32,080
But now imagine we plug in a billion.

50
00:03:32,260 --> 00:03:37,630
And that difference is going to be meaningless from the big picture view.

51
00:03:37,660 --> 00:03:40,470
So we just simplify it down to 0 and squared.

52
00:03:40,540 --> 00:03:46,450
So a couple of things that you can keep in mind when analyzing complexity with big o things get complicated

53
00:03:46,450 --> 00:03:50,040
and you can nitpick and stress out about the individual details.

54
00:03:50,350 --> 00:03:55,450
But there are some rules of thumb again that can help and they don't always work but it's a good starting

55
00:03:55,450 --> 00:03:56,390
point.

56
00:03:56,410 --> 00:03:59,730
The first is that arithmetic operations are constant.

57
00:03:59,740 --> 00:04:04,630
So for adding something or subtracting or dividing and so on that's going to be constant time it doesn't

58
00:04:04,630 --> 00:04:09,940
really matter the size of the number your computer takes roughly the same amount of time to do two plus

59
00:04:09,940 --> 00:04:15,700
two as it does a million plus two variable assignment is also constant.

60
00:04:15,700 --> 00:04:22,900
So the computer takes roughly the same amount of time to make a variable you know X equals 1000 compared

61
00:04:22,900 --> 00:04:26,540
to X equals 20000 or a million.

62
00:04:26,590 --> 00:04:32,830
It's roughly the same accessing element in an array using an index.

63
00:04:32,830 --> 00:04:38,670
So if I have an array and I find the first item or the tenth item as long as I use the index or I'm

64
00:04:38,680 --> 00:04:45,460
working with an object and I have a key that I'm using to access data that's constant runtime as well.

65
00:04:45,460 --> 00:04:51,760
The next rule is that in a loop the complexity is the length of the loop times the complexity for that

66
00:04:51,820 --> 00:04:53,860
whatever happens inside the loop.

67
00:04:53,860 --> 00:05:00,310
So if we were working with a loop that's looping over a list or looping through like we did earlier

68
00:05:00,400 --> 00:05:03,930
is the road to end as and grows that loop grows.

69
00:05:04,000 --> 00:05:08,920
But then whatever happens inside that loop is also consequential because if we have nested loops as

70
00:05:08,920 --> 00:05:12,790
we've seen then we end up with potentially end squared runtime.

71
00:05:13,060 --> 00:05:16,640
So again you don't need to memorize this but it's just nice to.

72
00:05:16,770 --> 00:05:19,150
I'm going to throw them out there so I can come back to them.

73
00:05:19,570 --> 00:05:22,270
So let's see a couple of examples.

74
00:05:22,300 --> 00:05:23,340
Here's a new function.

75
00:05:23,620 --> 00:05:25,830
It's called log at least five.

76
00:05:25,920 --> 00:05:27,210
And just copy it over.

77
00:05:27,420 --> 00:05:33,520
I pasted in and if I call it a pass and a number like 10 and it's going to log 10 but if I plug in one

78
00:05:34,390 --> 00:05:35,740
it prints 1 2 3 4 or 5.

79
00:05:35,740 --> 00:05:41,810
So all that it does is it prints numbers up to N but at a minimum it prints 1 2 3 4 5.

80
00:05:42,100 --> 00:05:47,980
So if I give it three we still get five but if I give it seven we get seven printed out one two three

81
00:05:47,980 --> 00:05:48,840
four five six seven.

82
00:05:49,000 --> 00:05:51,180
So what's the what's the big O here.

83
00:05:51,250 --> 00:05:52,880
How would we categorize this.

84
00:05:52,900 --> 00:06:01,110
So we have a loop and this loop is going to go from 1 to either five or end whichever one is larger.

85
00:06:01,570 --> 00:06:07,750
So we could worry about the five but we only really need to worry about that as is small.

86
00:06:07,750 --> 00:06:11,030
And what we care about is what happens and grows larger.

87
00:06:11,110 --> 00:06:14,880
So it's and continues to grow and grow and grow towards infinity.

88
00:06:15,120 --> 00:06:17,120
What happens to the runtime.

89
00:06:17,320 --> 00:06:21,050
Well if and is 10 million this loop is going to run 10 million times.

90
00:06:21,050 --> 00:06:22,990
This five doesn't matter.

91
00:06:22,990 --> 00:06:30,040
So we can just simplify this and say that the big-O of this is over of and because this and grows the

92
00:06:30,040 --> 00:06:32,890
number of operations grows in proportion with N.

93
00:06:33,160 --> 00:06:34,310
So here's another one.

94
00:06:34,330 --> 00:06:38,980
This is the opposite log at most 5 pasted in.

95
00:06:38,980 --> 00:06:45,500
And if I try hopes there we go at most 5 if I plug in 30 it still only gives me 5.

96
00:06:45,520 --> 00:06:46,710
I plug in 3.

97
00:06:46,780 --> 00:06:47,740
It gives me three.

98
00:06:47,740 --> 00:06:52,420
So it's going to take whatever is smaller if I give it a large number it's going to if it's larger than

99
00:06:52,420 --> 00:06:57,590
5 it's only going to log 5 if I give it something less than 5 then it will log.

100
00:06:57,760 --> 00:06:58,780
Oh it's also important.

101
00:06:58,870 --> 00:07:00,570
It's only with positive numbers.

102
00:07:00,570 --> 00:07:03,020
If I give it a zero it doesn't do anything.

103
00:07:03,270 --> 00:07:09,550
And that is important to note because as n grows here it kind of doesn't matter because we're going

104
00:07:09,550 --> 00:07:12,040
to take the min which is five.

105
00:07:12,040 --> 00:07:18,130
So if Enge approaching a thousand this loop runs five times and is approaching a million the loop runs

106
00:07:18,130 --> 00:07:22,960
five times if any to then the loop runs two times and three times.

107
00:07:23,050 --> 00:07:29,910
So the graph would actually look like you know two and then three and then five and then it's say static

108
00:07:29,920 --> 00:07:35,740
at 5 and we can simplify that by saying that it's end gross which is what we care about the big-O of

109
00:07:35,740 --> 00:07:38,490
this is just constant it's 0 1.

110
00:07:38,680 --> 00:07:43,590
So rather than 0 5 Remember we can simplify that down and say Oh for one.

111
00:07:43,690 --> 00:07:50,060
So if we were to plot both of these out what we see the general trend is something like this where I

112
00:07:50,230 --> 00:07:54,790
forgot to have all those little transitions we can ignore all these other ones we haven't talked about

113
00:07:54,790 --> 00:07:56,850
things like a log and log in.

114
00:07:57,100 --> 00:08:03,990
But what I've done here is just put them all in a chart so we can see first of all 0 1 is a flightline

115
00:08:04,960 --> 00:08:08,400
and that's great if we can have runtime of one.

116
00:08:08,410 --> 00:08:14,200
That is fantastic to have constant runtime it's pretty rare when we're dealing with some more advanced

117
00:08:14,230 --> 00:08:21,130
algorithms something like of n it's ok you can see the general trajectory it's much better than something

118
00:08:21,130 --> 00:08:23,410
like quadratic and squared runtime.

119
00:08:23,560 --> 00:08:30,220
So when we have something like log at least five as and grows this direction the runtime is also going

120
00:08:30,220 --> 00:08:37,300
to grow and when we have at most 5 the second one which we said had constant runtime as and grows once

121
00:08:37,300 --> 00:08:43,360
we get past the first little one two three four once we get past the first four and we approach infinity

122
00:08:43,620 --> 00:08:47,640
and it's going to always be 5 which we just say and it's always constant.

123
00:08:47,680 --> 00:08:53,570
So I know that this is a lot and some of you might be struggling with it and that's to be expected what

124
00:08:53,590 --> 00:08:59,710
I think is most important going forward is that if I'm if I say something like this algorithm that we've

125
00:08:59,710 --> 00:09:07,210
just written has a runtime of oh events squared that you could identify that that is not as good as

126
00:09:07,210 --> 00:09:08,500
something like Of end.

127
00:09:08,500 --> 00:09:13,180
For example and I could show you this chart but I just hope that you can understand after the end of

128
00:09:13,180 --> 00:09:17,650
the section we're not done yet but by the end of the section what it means when I say that something

129
00:09:17,650 --> 00:09:24,590
has 0 0 of and or 0 of one constant runtime and how that compares to some of the other options.

130
00:09:24,790 --> 00:09:26,670
And like I said we haven't gone over all of these yet.

131
00:09:26,710 --> 00:09:27,880
So we'll get there.

132
00:09:28,780 --> 00:09:31,850
Next up a couple little exercises simplifying expressions.

