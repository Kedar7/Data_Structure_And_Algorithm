1
00:00:00,210 --> 00:00:00,560
All right.

2
00:00:00,560 --> 00:00:01,350
Welcome back.

3
00:00:01,350 --> 00:00:06,690
We've made it to the final step out of five and this is probably the most important step when it comes

4
00:00:06,690 --> 00:00:09,800
to improving becoming a better developer.

5
00:00:09,840 --> 00:00:14,370
So we've understood the problem we've talked about concrete examples broken down into steps.

6
00:00:14,370 --> 00:00:17,250
We solved it or simplified it to help us solve it.

7
00:00:17,250 --> 00:00:22,560
And then once we have something whether it's an amazing solution or super scrappy it's time to look

8
00:00:22,560 --> 00:00:24,030
back and refactor.

9
00:00:24,030 --> 00:00:29,010
I know it's tempting that once you have something workable something good enough that does what it needs

10
00:00:29,010 --> 00:00:29,570
to do.

11
00:00:29,730 --> 00:00:33,640
It's tempting to just you know shut your laptop or close the book and go.

12
00:00:33,660 --> 00:00:34,040
I don't know.

13
00:00:34,050 --> 00:00:36,680
Play video games or do something else.

14
00:00:36,740 --> 00:00:42,500
It's really tempting because often you can get by with something that just works.

15
00:00:42,810 --> 00:00:45,570
And in a lot of jobs and a lot of scenarios.

16
00:00:45,600 --> 00:00:47,410
All that matters is that something works.

17
00:00:47,430 --> 00:00:52,380
It doesn't have to be beautiful it doesn't have to be the most efficient code on Earth but it's really

18
00:00:52,380 --> 00:00:54,750
really important to strive for those goals.

19
00:00:54,750 --> 00:00:59,190
Obviously if you're a one man team and you're her one woman team and you're creating your company on

20
00:00:59,190 --> 00:01:04,140
your own and you have a deadline of tomorrow and you have to just write code that works then yeah it's

21
00:01:04,140 --> 00:01:08,590
fine to be scrappy but it's really important to try and improve your code.

22
00:01:08,790 --> 00:01:15,120
And it's a missed opportunity if you don't take the time to look at your code look back and reflect

23
00:01:15,120 --> 00:01:15,690
on it.

24
00:01:15,840 --> 00:01:19,990
And I don't just mean you know longingly in a poetic way.

25
00:01:20,010 --> 00:01:25,110
I mean look at the individual components line by line talk about the parts you don't like or what do

26
00:01:25,110 --> 00:01:31,200
you not like about how the code itself looks how it reads how easy it is to understand obviously what

27
00:01:31,200 --> 00:01:34,340
most people care about is efficiency when they're looking at code.

28
00:01:34,440 --> 00:01:40,770
But there's often a balance that needs to be struck to between those two pillars of efficiency and legibility

29
00:01:41,280 --> 00:01:42,800
and in an interview setting.

30
00:01:42,930 --> 00:01:46,920
It's really important to ask these questions often out loud.

31
00:01:47,010 --> 00:01:49,070
You have a finished solution.

32
00:01:49,260 --> 00:01:51,900
You can be proud of that something works.

33
00:01:51,930 --> 00:01:58,350
I like to then take a moment and sort of go line by line and think oh you know this is not ideal I think

34
00:01:58,500 --> 00:02:02,400
maybe there's a better way of doing this but I'm not confident I would google if there was a faster

35
00:02:02,400 --> 00:02:04,090
way of doing this that sort of thing.

36
00:02:04,140 --> 00:02:05,340
So I'm going to go through that.

37
00:02:05,460 --> 00:02:08,730
But here's is sort of a checklist of questions you could ask yourself.

38
00:02:09,030 --> 00:02:13,410
Can you check the results so that one's obvious we need to make sure our code works.

39
00:02:13,410 --> 00:02:15,740
Can you derive the result differently.

40
00:02:15,780 --> 00:02:21,330
So this is referring to the fact that there is rarely one solution and only one solution to a problem.

41
00:02:21,330 --> 00:02:24,960
So can you think about different approaches now that you've solved it one way.

42
00:02:24,960 --> 00:02:29,400
Is there another way that seems viable that you couldn't think of earlier.

43
00:02:29,400 --> 00:02:32,240
Can you see it at a glance or understand it at a glance.

44
00:02:32,250 --> 00:02:37,080
So how intuitive is your solution does that make sense when you look at it on paper on a whiteboard

45
00:02:37,260 --> 00:02:41,600
in your code editor can you use the result or method for some other problem.

46
00:02:41,610 --> 00:02:47,310
One of the great benefits of solving a problem is that it helps you sort of develop a spider sense an

47
00:02:47,310 --> 00:02:49,510
intuition for solving other problems.

48
00:02:49,530 --> 00:02:54,720
So whenever you write down a solution it's worth pausing and asking yourself if there's any similarities

49
00:02:54,720 --> 00:02:56,790
between this solution or this problem.

50
00:02:56,790 --> 00:02:58,570
In others you've encountered in the past.

51
00:02:58,740 --> 00:02:59,880
So maybe not.

52
00:02:59,880 --> 00:03:03,740
In an interview setting necessarily but this has happened to me a couple of times.

53
00:03:03,780 --> 00:03:09,000
I solved some problem and it sort of unlocks the solution to another problem on a different project

54
00:03:09,270 --> 00:03:12,060
or a different company or something like that.

55
00:03:12,390 --> 00:03:14,250
So it's something to keep in mind.

56
00:03:14,490 --> 00:03:14,770
OK.

57
00:03:14,790 --> 00:03:18,020
Next up can you improve the performance of your solution.

58
00:03:18,030 --> 00:03:23,140
So this is one that like I said is probably at the top of a lot of people's minds when they write the

59
00:03:23,140 --> 00:03:23,840
solution.

60
00:03:23,850 --> 00:03:26,700
So how can we make it perform better.

61
00:03:26,730 --> 00:03:29,850
Mainly you know time complexity and space complexity.

62
00:03:29,850 --> 00:03:32,550
And that's something we talk a lot about in this course.

63
00:03:32,550 --> 00:03:36,680
So if you're not super comfortable measuring that or calculating it that's OK.

64
00:03:36,690 --> 00:03:43,140
But we can still identify certain things that might be poorly performing or slow for example like a

65
00:03:43,140 --> 00:03:46,130
bunch of loops that are nested try and avoid that.

66
00:03:46,200 --> 00:03:49,440
Can you think of any other ways to react to your code if you're working for a company.

67
00:03:49,440 --> 00:03:52,440
Does your code follow company guidelines style guide.

68
00:03:52,440 --> 00:03:54,630
Does it follow conventions of the language.

69
00:03:54,630 --> 00:03:56,410
Is the spacing consistent.

70
00:03:56,460 --> 00:04:02,970
Just minor things but this is important to show even in an interview setting at least acknowledge the

71
00:04:02,970 --> 00:04:07,400
fact that your code isn't neat and that you would prefer to make it neater if you didn't have time.

72
00:04:07,410 --> 00:04:10,530
And lastly how have other people solved this problem.

73
00:04:10,590 --> 00:04:16,280
So in an interview setting often you know the interviewers ask the same question to many different candidates.

74
00:04:16,290 --> 00:04:21,730
Some companies I've seen of your same question for years and so they've probably seen a lot of candidates

75
00:04:21,750 --> 00:04:23,050
and a lot of solutions.

76
00:04:23,070 --> 00:04:28,050
So in an interview it can be really beneficial after you have something whether it works or doesn't

77
00:04:28,050 --> 00:04:28,800
work.

78
00:04:29,010 --> 00:04:34,140
At the end to pick their brain say you know what other approaches are there what did I miss.

79
00:04:34,140 --> 00:04:35,800
How have you seen people solve this.

80
00:04:35,880 --> 00:04:40,120
And sometimes people like to share the most effective or simplest solution.

81
00:04:40,230 --> 00:04:45,360
Other times people like to talk about the craziest and most eccentric solution the most unexpected way

82
00:04:45,360 --> 00:04:50,520
of solving it even if it's not the most efficient but you can learn a lot from looking at how other

83
00:04:50,520 --> 00:04:52,440
people have solved the same problem.

84
00:04:52,440 --> 00:04:58,110
Now if you're on your own you're working on a project and application and you're solving a problem.

85
00:04:58,310 --> 00:05:01,660
Often you're solving something other people haven't solved before.

86
00:05:01,800 --> 00:05:06,240
Otherwise you may not be prioritizing solving it yourself right.

87
00:05:06,250 --> 00:05:09,920
If you need to you're not going to build your own database from scratch.

88
00:05:09,960 --> 00:05:14,070
You can use someone else's database but sometimes there are certain things that you do implement on

89
00:05:14,070 --> 00:05:19,050
your own and it's worth looking at other implementations whether it's in a different language.

90
00:05:19,050 --> 00:05:20,760
This happens pretty frequently to me.

91
00:05:20,940 --> 00:05:24,150
If I'm writing something you may not find it in javascript.

92
00:05:24,150 --> 00:05:29,730
You can search around and you might find someone elses code in Java or in Python and you can take that

93
00:05:29,730 --> 00:05:34,860
and compare it to yours depending on how comfortable you are doing that and it can be really useful

94
00:05:35,280 --> 00:05:38,310
and you can find ideas in different approaches anyway.

95
00:05:38,370 --> 00:05:41,040
So these are a lot of questions here that he can ask yourself.

96
00:05:41,040 --> 00:05:45,390
But my point is that refactoring is really important and it doesn't even have to be refactoring which

97
00:05:45,390 --> 00:05:46,470
is why I called it.

98
00:05:46,470 --> 00:05:51,360
Look back and refactor because sometimes you could be happy with your code.

99
00:05:51,360 --> 00:05:54,800
Or you might not want to make changes but it's worth thinking about it.

100
00:05:54,810 --> 00:05:58,050
It's worth analyzing your code and reflecting on it.

101
00:05:58,050 --> 00:06:02,030
Looking back on it rather than simply writing something that works and calling it a day.

102
00:06:02,160 --> 00:06:06,670
So let's go through a simplified version of that process with my solution here.

103
00:06:06,810 --> 00:06:08,910
So I changed my solution a bit.

104
00:06:08,940 --> 00:06:09,420
Here it is.

105
00:06:09,420 --> 00:06:15,030
By the way everything is the same as what we saw in the last video I added in a simple regular expression

106
00:06:15,280 --> 00:06:19,080
to test if a character is alphanumeric.

107
00:06:19,080 --> 00:06:25,760
So if it's a lowercase A through Z or zero through nine and this is how I'm weeding out all the non

108
00:06:25,760 --> 00:06:31,680
alphanumeric character spaces underscores dashes periods commas and only doing the letters and numbers

109
00:06:31,910 --> 00:06:36,030
and I lowercase first and then I test each character.

110
00:06:36,060 --> 00:06:41,070
So if we make it to this point it's that character is either a number or a letter and then we just check

111
00:06:41,280 --> 00:06:42,940
like we did in the last video.

112
00:06:42,960 --> 00:06:48,750
If the characters already in that object meaning it's greater than zero it's set to 1 or 2 or 3.

113
00:06:48,750 --> 00:06:53,620
For example just add 1 to 2 the value otherwise initialize it to 1.

114
00:06:53,670 --> 00:06:58,040
I'm sure that extra one came from and then we return the object at the end.

115
00:06:58,140 --> 00:07:03,600
So this works and if I finish this at the end of an interview this is my solution.

116
00:07:03,660 --> 00:07:06,680
The main pain points to things that I would point out.

117
00:07:06,740 --> 00:07:12,380
There's a couple one easy fix is I'm not really a fan of using a for loop.

118
00:07:13,050 --> 00:07:15,260
Obviously for loops are great and they've been around forever.

119
00:07:15,420 --> 00:07:21,090
But in today's landscape I would probably use four of loop just to simplify this so we don't have to

120
00:07:21,090 --> 00:07:22,350
work with I.

121
00:07:22,830 --> 00:07:26,580
Because if we do 4 of on a string it gives us each character immediately.

122
00:07:26,580 --> 00:07:29,720
There's no reason to go you know this is an extra step.

123
00:07:29,910 --> 00:07:33,900
Loop through a range of numbers then take that number to get an individual character.

124
00:07:34,050 --> 00:07:36,920
When I could replace it so I'll refactor this.

125
00:07:37,030 --> 00:07:42,190
Keep this here but slowly refactor it down here and this isn't really a performance thing.

126
00:07:42,360 --> 00:07:45,480
It's just aesthetics I guess so for.

127
00:07:45,480 --> 00:07:49,690
I'd say var char of that string.

128
00:07:50,050 --> 00:07:53,070
Then you don't need to define char again.

129
00:07:53,130 --> 00:07:54,140
We're going a lower case.

130
00:07:54,280 --> 00:07:59,250
So this chart to lower case so we no longer have to do.

131
00:07:59,250 --> 00:08:05,000
String of I were just working with char and this should work still.

132
00:08:05,190 --> 00:08:07,220
Let's just verify that.

133
00:08:07,380 --> 00:08:08,540
So I pasted in.

134
00:08:08,760 --> 00:08:11,140
Let's do it on hello.

135
00:08:11,550 --> 00:08:15,870
Hi throw in some punctuation and it looks like it's working.

136
00:08:15,870 --> 00:08:18,190
We have two H's lower cased.

137
00:08:18,280 --> 00:08:19,290
OK that's all good.

138
00:08:19,500 --> 00:08:22,280
Now a small syntax change that we could make.

139
00:08:22,290 --> 00:08:26,670
This isn't a huge deal but this kind of bothers me when I look at it takes up a lot of space to do a

140
00:08:26,670 --> 00:08:32,550
very simple thing where either adding 1 to a number or setting a number to 1 or initializing a value

141
00:08:32,670 --> 00:08:33,530
in a key.

142
00:08:33,600 --> 00:08:34,050
Oh my gosh.

143
00:08:34,050 --> 00:08:36,560
In an object you are initializing the value to zero.

144
00:08:36,570 --> 00:08:42,170
So we're initializing to zero or adding 1 to it which is a pretty simple thing and it's as simple if

145
00:08:42,190 --> 00:08:48,690
else so often I look to combine these into a single line if possible and it can be difficult if you're

146
00:08:48,690 --> 00:08:51,120
in a stressful interview situation.

147
00:08:51,120 --> 00:08:56,850
Often I just write the first thing that comes to mind the simplest most basic syntax and then come back

148
00:08:56,850 --> 00:09:01,290
and clean it up so we can replace this here with this line.

149
00:09:01,350 --> 00:09:08,100
So what this does is it takes a character like a Access's the corresponding value in our object.

150
00:09:08,100 --> 00:09:12,840
So if it's truthy we're going to add one to it.

151
00:09:12,840 --> 00:09:14,980
Meaning if there's a value in there already.

152
00:09:15,300 --> 00:09:18,320
If there's nothing in there we're going to set it to 1.

153
00:09:18,480 --> 00:09:20,970
So we basically have two scenarios.

154
00:09:20,970 --> 00:09:25,350
Object char equals this object char plus one.

155
00:09:25,560 --> 00:09:29,590
Or if it's falsie set it equal to 1.

156
00:09:30,030 --> 00:09:35,940
So this is a nice way of cleaning up our code shortening it quite a bit and just to verify that it still

157
00:09:35,940 --> 00:09:36,480
works.

158
00:09:36,480 --> 00:09:38,430
One more time.

159
00:09:38,430 --> 00:09:43,430
Pasted in correctly and it looks like it's working.

160
00:09:43,590 --> 00:09:48,730
So the last thing and this is probably the most important thing that I would think about here.

161
00:09:48,960 --> 00:09:51,920
We did a couple of stylistic changes.

162
00:09:52,200 --> 00:09:53,850
You know we could use some more.

163
00:09:53,910 --> 00:09:58,250
2015 syntax replace var with lut and constant.

164
00:09:58,410 --> 00:10:00,000
That's probably a good idea to do.

165
00:10:00,000 --> 00:10:04,830
But the most pressing thing in my mind that I'm unsure about if this was in an interview setting I would

166
00:10:04,830 --> 00:10:09,750
say OK well I'm using a regular expression here because I know how to do that.

167
00:10:09,820 --> 00:10:15,180
And it's a quick way relatively short way of checking for a certain pattern.

168
00:10:15,180 --> 00:10:21,150
In our case to see if a character is alphanumeric a letter or a number but I'm not sure how efficient

169
00:10:21,150 --> 00:10:22,440
it actually is.

170
00:10:22,620 --> 00:10:26,580
And I would say that I'd say you know I've heard certain things that in Javascript.

171
00:10:26,590 --> 00:10:29,010
And this is true in javascript regular expressions.

172
00:10:29,100 --> 00:10:33,300
The performance can vary depending on what you're doing and depending on the browser that you're in.

173
00:10:33,330 --> 00:10:37,490
In particular Chrome had some issues with regular expressions a while back.

174
00:10:37,650 --> 00:10:43,360
So I kind of I'm trying to avoid them because they can be very useful for something like this.

175
00:10:43,380 --> 00:10:46,370
This is a very simple usage of a regular expression.

176
00:10:46,440 --> 00:10:51,600
Often people will use them to find patterns like credit card patterns or phone numbers or addresses

177
00:10:51,600 --> 00:10:56,740
are much more complicated things like matching a u r l pattern which would be a huge pain otherwise.

178
00:10:57,000 --> 00:11:02,260
But just checking if something is a letter or a number I think there could be a better way to do this.

179
00:11:02,310 --> 00:11:05,590
So I would say that out loud and you may not.

180
00:11:05,700 --> 00:11:07,620
This might not come to mind right away.

181
00:11:07,700 --> 00:11:09,710
It didn't come to my mind right away either.

182
00:11:09,870 --> 00:11:13,890
But what you can do I just did some research to figure this out.

183
00:11:13,890 --> 00:11:17,420
Is use char at character at.

184
00:11:17,460 --> 00:11:25,260
So if we you know take a string like high and then do Chaar code at rather than char it excuse me char

185
00:11:25,260 --> 00:11:27,770
code at and give it an index.

186
00:11:28,140 --> 00:11:34,460
It gives us a number 104 which is the character code for H for lowercase H.

187
00:11:34,650 --> 00:11:42,460
If we did let's just do I it's one of five H I J comes next in the alphabet.

188
00:11:42,670 --> 00:11:43,600
It's one of six.

189
00:11:43,810 --> 00:11:46,900
So these are in a range of numbers.

190
00:11:47,020 --> 00:11:55,030
And so what we could do is replace our regular expression with using a simple mathematical comparison

191
00:11:55,030 --> 00:12:04,420
so we would do a character her char code at and give it you know let's just say always zero for now

192
00:12:05,090 --> 00:12:08,380
and then we would check if it's a valid character code.

193
00:12:08,480 --> 00:12:13,330
And I found someone doing this online which is what sort of inspired me to look at this.

194
00:12:13,400 --> 00:12:19,370
This person wrote a little bit of a performance test where they're testing if something is alphanumeric

195
00:12:19,490 --> 00:12:21,740
down here using a regular expression.

196
00:12:21,740 --> 00:12:27,140
And here they're testing if something is alphanumeric using a character code so you can see between

197
00:12:27,140 --> 00:12:35,430
forty seven and fifty eight are the numeric character codes between 64 and 91 are uppercase alphas.

198
00:12:35,570 --> 00:12:41,270
Yes the alphabet and lower case letters are 96 to 123.

199
00:12:41,270 --> 00:12:47,300
So we can just quickly a couple of boolean comparison which are very very easy and fast to do in any

200
00:12:47,300 --> 00:12:48,550
programming language.

201
00:12:48,620 --> 00:12:55,220
They're pretty much one of the simplest the simplest operation you could do are the simple boolean comparisons

202
00:12:55,580 --> 00:13:01,310
and this person demonstrates actually that if you repeat this over and over and over again you can see

203
00:13:01,310 --> 00:13:10,170
that the non regular expression version is indeed faster Fifty five percent slower using regular expressions.

204
00:13:10,370 --> 00:13:15,290
So I'm showing this to you not to say you know I would come up with this in an interview because I probably

205
00:13:15,290 --> 00:13:20,600
wouldn't have I might have considered it but I certainly wouldn't know the character codes and I would

206
00:13:20,600 --> 00:13:23,540
have just gone with with what I felt most comfortable doing.

207
00:13:23,660 --> 00:13:29,060
But then I would at the very end add a little note in to my interviewer saying hey maybe there's a better

208
00:13:29,060 --> 00:13:30,300
way I would google it.

209
00:13:30,320 --> 00:13:31,590
I have a feeling.

210
00:13:31,700 --> 00:13:34,080
Regular expressions might not be the fastest way.

211
00:13:34,340 --> 00:13:39,670
So what I did is actually turn this into a function called is alphanumeric.

212
00:13:39,770 --> 00:13:41,490
But it works in a single character.

213
00:13:41,720 --> 00:13:48,620
So you pass in a character one at a time and then we get the character code at index 0 because it's

214
00:13:48,620 --> 00:13:50,870
the only it's a one character string.

215
00:13:50,870 --> 00:13:53,150
Technically you can actually leave this blank and it still works.

216
00:13:53,150 --> 00:13:56,030
But I like to be explicit so I'll put the zero in there.

217
00:13:56,030 --> 00:13:58,360
It gives just the first character which is the only character.

218
00:13:58,460 --> 00:14:07,310
So if we're passing in hello like this I would call is alphanumeric on H call it on e on.

219
00:14:07,340 --> 00:14:09,190
And it should return true every time.

220
00:14:09,440 --> 00:14:13,150
And then if we have a space or an exclamation point it will return false.

221
00:14:13,160 --> 00:14:14,950
So I've created this function.

222
00:14:15,050 --> 00:14:23,480
Now what I'm going to do is get rid of this regular expression and refactor it to be if it is alphanumeric

223
00:14:23,930 --> 00:14:27,240
of character just like that.

224
00:14:27,260 --> 00:14:31,610
Another thing to consider is the placement of when we do the lower casing.

225
00:14:32,060 --> 00:14:38,240
Is it better to lower case everything at the beginning of the entire string and then check each character

226
00:14:38,240 --> 00:14:39,700
to see if it's alphanumeric.

227
00:14:39,710 --> 00:14:46,310
Is it better to first check for alphanumeric characters so that we weed out all the spaces the punctuation.

228
00:14:46,310 --> 00:14:50,090
Everything that's not valid and then lowercase afterwards.

229
00:14:50,300 --> 00:14:53,860
And I'm actually not positive on how I feel about it.

230
00:14:53,870 --> 00:14:55,080
I've gone back and forth.

231
00:14:55,100 --> 00:15:00,890
It depends on what your strings look like what the inputs look like if they are generally all alphanumeric

232
00:15:01,010 --> 00:15:06,530
versus if you have really weird strings that have a ton of random characters that aren't alphanumeric.

233
00:15:06,530 --> 00:15:08,810
I think that the answer would depend on that.

234
00:15:09,080 --> 00:15:15,590
But what I'm going to do is just run it like this so if it's alphanumeric then we'll lowercase it and

235
00:15:15,590 --> 00:15:17,900
then add it into our object.

236
00:15:17,900 --> 00:15:20,170
So I like this solution one.

237
00:15:20,180 --> 00:15:24,310
I like having this separate function so that this is pretty readable in my opinion.

238
00:15:24,440 --> 00:15:31,040
For each character in or of our string like that's very nice and legible for a character in in the string.

239
00:15:31,040 --> 00:15:37,550
If that character is alphanumeric we're going to lowercase it and then added into our object or initialize

240
00:15:37,550 --> 00:15:38,270
it to one.

241
00:15:38,340 --> 00:15:40,680
Add one to the current value.

242
00:15:40,700 --> 00:15:41,840
So I like this solution.

243
00:15:41,840 --> 00:15:48,190
I think it's clean and readable but also allegedly at least according to some some stuff we've found

244
00:15:48,190 --> 00:15:55,210
a mine is more efficient to use character codes compared to a regular expression like we had up here.

245
00:15:55,220 --> 00:15:59,120
So I know this is getting a bit long but I just want to show you my process.

246
00:15:59,180 --> 00:16:04,820
This is the solution I wrote first and then I kind of just thought about it more and did some more research

247
00:16:05,240 --> 00:16:06,400
and this is the solution.

248
00:16:06,410 --> 00:16:11,540
I prefer not just stylistically not just because it's shorter it's actually not shorter because of this

249
00:16:11,540 --> 00:16:17,930
code here of course you could put all this code right in here and not have a separate function but I

250
00:16:17,930 --> 00:16:19,950
think it reads so much better like this.

251
00:16:19,970 --> 00:16:20,240
All right.

252
00:16:20,270 --> 00:16:21,800
So let's make sure it works.

253
00:16:21,980 --> 00:16:23,380
Char account of.

254
00:16:23,380 --> 00:16:23,710
Sure.

255
00:16:23,720 --> 00:16:24,910
This one again.

256
00:16:25,460 --> 00:16:26,390
Hello world.

257
00:16:26,450 --> 00:16:26,870
Hi.

258
00:16:26,870 --> 00:16:31,690
So there should be two H's there are there is one.

259
00:16:31,760 --> 00:16:32,150
What else.

260
00:16:32,150 --> 00:16:37,360
Three L's and we're ignoring case and also we're ignoring non non-alphanumeric characters.

261
00:16:37,370 --> 00:16:37,720
All right.

262
00:16:37,760 --> 00:16:38,930
So that was a lot there.

263
00:16:39,140 --> 00:16:40,440
Hopefully you agree.

264
00:16:40,460 --> 00:16:46,640
Maybe you don't have some feedback on my refactor but just in and asking myself those questions about

265
00:16:46,640 --> 00:16:48,890
how did other people do this how could I am proof this.

266
00:16:48,890 --> 00:16:54,170
Where are the stylistic changes I could make or solution looks vastly different than it did before.

267
00:16:54,170 --> 00:16:56,600
Not that there's anything wrong with this one out of the box.

268
00:16:56,860 --> 00:16:57,380
OK.

