1
00:00:00,180 --> 00:00:00,500
All right.

2
00:00:00,500 --> 00:00:01,170
Welcome back.

3
00:00:01,170 --> 00:00:03,050
This will be a 30 second video.

4
00:00:03,090 --> 00:00:04,960
I just wanted to summarize the steps.

5
00:00:05,160 --> 00:00:10,440
So to recap sort of the five step protocol here whether you're faced with a tough interview challenge

6
00:00:10,860 --> 00:00:15,090
and you're you're at a white board there's a bunch of people watching you or you're trying to solve

7
00:00:15,090 --> 00:00:17,730
something on your own for a novel.

8
00:00:17,730 --> 00:00:19,520
I don't know challenge you.

9
00:00:20,080 --> 00:00:24,230
You're trying to build trying to figure out how to sort search results whatever it is.

10
00:00:24,330 --> 00:00:26,990
These are the steps that I like to go through.

11
00:00:27,030 --> 00:00:32,340
Make sure you understand the problem and do this the way I taught it or talked about it was geared towards

12
00:00:32,340 --> 00:00:35,650
interviews like I said especially things like understanding the problem.

13
00:00:35,790 --> 00:00:41,660
So ask questions of your interviewer of course clarify the problem make sure you understand it.

14
00:00:41,730 --> 00:00:43,770
But even if it's just you working on something.

15
00:00:43,830 --> 00:00:49,440
Make sure you understand it to make sure that you really have thought out how your solution how your

16
00:00:49,440 --> 00:00:55,560
application should operate how it should behave in every scenario and that goes hand-in-hand with exploring

17
00:00:55,560 --> 00:00:56,900
concrete examples.

18
00:00:56,910 --> 00:01:01,530
These two are really both about understanding the problem understanding the inputs understanding the

19
00:01:01,530 --> 00:01:06,180
outputs understanding edge cases how do you handle errors what happens when a user enters something

20
00:01:06,180 --> 00:01:07,060
invalid.

21
00:01:07,380 --> 00:01:12,060
All these different things all have to do with just sort of understanding from the outset how everything

22
00:01:12,060 --> 00:01:14,630
should work on the outset.

23
00:01:14,880 --> 00:01:16,830
I don't know break it down.

24
00:01:17,100 --> 00:01:22,860
So at this point if you if you like to write like totally perfect pseudo code line by line you can do

25
00:01:22,860 --> 00:01:28,700
that or just break out a couple of steps to lay out a game plan for the code you need to implement.

26
00:01:28,710 --> 00:01:34,080
This is really helpful especially in an interview a few times and you know that you're going to run

27
00:01:34,080 --> 00:01:34,930
out of time.

28
00:01:34,950 --> 00:01:40,590
It can be useful to write your game plan out so you can show them Hey this is where I was going even

29
00:01:40,590 --> 00:01:43,220
though I only actually implemented 40 percent of this.

30
00:01:43,230 --> 00:01:45,600
Here's the other steps that I was going to do.

31
00:01:45,660 --> 00:01:49,660
So make sure you know where you're going before you just start typing code.

32
00:01:49,660 --> 00:01:51,510
Often that's a bad way.

33
00:01:51,510 --> 00:01:52,520
You can end up in a hole.

34
00:01:52,530 --> 00:01:57,420
You can confuse yourself it's happened to me many times in interviews if you just start to think you

35
00:01:57,420 --> 00:01:59,860
know where to start and you'll figure out the rest as you go.

36
00:02:00,030 --> 00:02:05,160
Often you pigeonhole pigeonhole yourself into one approach and then I start to panic because it's not

37
00:02:05,160 --> 00:02:12,080
working out and I take a step back and usually erase everything I've done and and start over and planned

38
00:02:12,080 --> 00:02:12,720
it out.

39
00:02:13,080 --> 00:02:14,150
So then solve.

40
00:02:14,280 --> 00:02:18,250
And if you can't solve the problem right away solve a problem that you can.

41
00:02:18,390 --> 00:02:25,150
Even if it's simpler if you simplify you remove some core difficulty core challenge try and solve something

42
00:02:25,170 --> 00:02:28,370
where you can then reincorporate that core difficulty back in.

43
00:02:28,590 --> 00:02:33,540
So we talked about in two videos ago if you're not sure how to test for something being alphanumeric

44
00:02:33,840 --> 00:02:39,900
ignore that part and just write the problem write the solution ignoring the alphanumeric part so that

45
00:02:39,900 --> 00:02:42,010
you could then plug it in later.

46
00:02:42,270 --> 00:02:48,120
And then finally what I said was the most important for learning or improving as a developer.

47
00:02:48,120 --> 00:02:53,490
Looking back on your code and sometimes refactoring it sometimes just looking back and analyzing it

48
00:02:53,520 --> 00:02:54,970
and patting yourself on the back.

49
00:02:55,170 --> 00:03:00,540
Most of the time there's room to refactor even if you're totally expert developer.

50
00:03:00,540 --> 00:03:05,190
It can be very useful to look at other people's solutions or to scrutinize your own and figure out what

51
00:03:05,190 --> 00:03:06,810
you could have done better.

52
00:03:06,810 --> 00:03:07,510
All right.

53
00:03:07,650 --> 00:03:12,270
So those are the steps I recommend if you're ever faced with a tough challenge especially if you're

54
00:03:12,270 --> 00:03:14,050
an interview in an interview.

55
00:03:14,190 --> 00:03:18,330
I would absolutely recommend always starting off with understanding the problem.

56
00:03:18,330 --> 00:03:21,720
Exploring examples one in two for sure.

57
00:03:21,750 --> 00:03:22,820
Do that outloud.

58
00:03:22,860 --> 00:03:27,120
Make sure the interviewer hears you bring them into the process tell them what you're doing.

59
00:03:27,180 --> 00:03:28,040
Breaking it down.

60
00:03:28,050 --> 00:03:29,190
Write the steps down.

61
00:03:29,190 --> 00:03:30,250
Talk out loud.

62
00:03:30,390 --> 00:03:31,580
Solve it of course.

63
00:03:31,590 --> 00:03:35,310
If you can and then look back on your code and refactor if you can.

64
00:03:35,310 --> 00:03:37,710
All of these honestly are equally important.

65
00:03:37,830 --> 00:03:42,150
In an interview setting as well as in real life but I think most of you care about interviews for the

66
00:03:42,150 --> 00:03:42,850
most part.

67
00:03:42,960 --> 00:03:44,280
So I'm gearing it towards that.

68
00:03:44,310 --> 00:03:50,340
OK so that's the wishy washy part of problem solving sort of the approach the steps that you can take

69
00:03:50,340 --> 00:03:52,020
mentally to prepare yourself.

70
00:03:52,020 --> 00:03:55,130
Next we're going to talk about some patterns for code.

71
00:03:55,140 --> 00:03:59,680
There are a couple of archetypes blueprints for solutions that may come in handy.

72
00:03:59,700 --> 00:04:04,830
I honestly think this stuff is much more useful in the real world because this applies to all sorts

73
00:04:04,830 --> 00:04:05,540
of problems.

74
00:04:05,640 --> 00:04:06,690
Well we're going to learn next.

75
00:04:06,690 --> 00:04:11,170
It's a little more specific but for the types of problems it helps with it really helps.

76
00:04:11,300 --> 00:04:11,640
OK.

77
00:04:11,700 --> 00:04:12,370
That's up next.

