WEBVTT

00:00.210 --> 00:00.800
All right.

00:00.810 --> 00:03.380
So here's my solution for anagrams.

00:03.390 --> 00:08.790
Again there's many ways of doing it but the way that I wanted you to try was to solve it with a frequency

00:08.790 --> 00:14.250
counter use an object construct it using a loop and then use a second loop that's not nested.

00:14.310 --> 00:18.740
So we still maintain our big-O of of and time complexity.

00:18.750 --> 00:19.920
Here's my version.

00:20.190 --> 00:26.870
So it's called valid and Graham and Graham and it takes two arguments first and second if I called them

00:27.360 --> 00:32.970
and the very first thing I did just like before if the length of those two strings is different if they

00:32.970 --> 00:35.640
don't match then immediately we can throw it out.

00:35.700 --> 00:37.820
There's no way for it to be true.

00:37.830 --> 00:42.980
There's no possible anagram of two strings that are different like they have to be the same.

00:42.990 --> 00:45.050
So we return false right away.

00:45.240 --> 00:50.840
Then what I did was made an object called look up you could call this frequency counter or just object

00:50.860 --> 00:51.870
O.B. J.

00:51.900 --> 00:55.170
I wouldn't call it object Sabet idea but obey is OK.

00:55.350 --> 01:01.860
So look up and I'm going to loop through the first string right here and I'm going to create an object

01:01.860 --> 01:04.260
that is a breakdown of the first string.

01:04.260 --> 01:10.880
So if I called valid Let's just grab one of these examples like this one right here.

01:11.520 --> 01:17.160
So this should return true and the first thing that I'm going to do I'll just model this object here.

01:17.670 --> 01:21.390
We're going to go through we loop over it.

01:21.390 --> 01:24.190
So I starts at 0 as less and first at length.

01:24.240 --> 01:29.640
Plus plus it's going to loop over this first string which is called first and I'm going to take the

01:29.640 --> 01:33.070
first character the very first time through using a variable called Letter.

01:33.090 --> 01:38.960
Just to make my code a little cleaner instead of writing first I all over the place.

01:39.030 --> 01:44.670
So this letter's going to start at A and I'm going to check if my look up object already has a in it

01:44.960 --> 01:45.820
and it's empty right now.

01:45.840 --> 01:46.870
So it doesn't.

01:46.890 --> 01:52.880
So this line is going to either set it equal to 1 or we're going to add one.

01:52.890 --> 01:54.820
If it's already initialized to a value.

01:54.990 --> 01:58.110
So in our case there is no A in our object.

01:58.110 --> 01:59.220
If this is our object.

01:59.310 --> 02:02.070
So we add we initialize it to 1.

02:02.070 --> 02:02.990
This is not true.

02:03.060 --> 02:06.400
It returns falsie because there's nothing in there.

02:06.720 --> 02:08.380
And so we set it to 1.

02:08.430 --> 02:15.530
So we set a equal to 1 then we go through for an and we set an equal to 1.

02:15.550 --> 02:20.380
Right then we get to you again this time we look up a well it's already in there.

02:20.520 --> 02:25.700
So this time this part runs we add one look up of a plus equals one.

02:25.710 --> 02:26.910
So he said it to two.

02:27.300 --> 02:27.530
OK.

02:27.540 --> 02:33.380
So we construct the entire object first and just so you can see what that looks like at the end of that

02:33.390 --> 02:34.550
log.

02:34.860 --> 02:38.430
Look up right here and run my code.

02:38.460 --> 02:41.100
This is what we start off with.

02:41.100 --> 02:45.180
So I constructed this look up and now we're going to actually use it.

02:45.180 --> 02:52.230
So we're now going to loop over the second string and we're going to compare each character to our look

02:52.230 --> 02:55.350
up object that we created based off of the first string.

02:55.680 --> 03:02.640
And what we'll do is because you know we have multiple like a is in here twice or three times so we

03:02.640 --> 03:04.330
can't just check in here.

03:04.410 --> 03:08.190
We need to make sure A's in there exactly the number of times and they're equivalent.

03:08.190 --> 03:11.640
So what we'll do is subtract one from a.

03:11.640 --> 03:17.020
So if we start it and we're going to find and and then we'll subtract 1 percent and set it to zero.

03:17.280 --> 03:20.400
If we find a we're going to go to AA and subtract 1.

03:20.430 --> 03:22.920
Now we need to find two more A's.

03:23.400 --> 03:24.120
And we keep going.

03:24.120 --> 03:29.700
So just to show you that we loop over the second string we make a placeholder variable called letter

03:30.060 --> 03:32.610
that is just going to store the individual letter.

03:32.640 --> 03:37.290
And at the beginning and the first thing we do if we can't look up that letter.

03:37.320 --> 03:42.540
Meaning it's not in there like if we were looking for an S and there's no s in here as a key then we

03:42.540 --> 03:43.870
return False we're done.

03:44.070 --> 03:45.690
Otherwise we subtract 1.

03:45.990 --> 03:49.310
So we go through and we look for and.

03:49.310 --> 03:49.580
All right.

03:49.600 --> 03:53.070
Well said to one well now we subtract one and it's set to zero.

03:53.450 --> 03:56.590
And so now we go through again and we're looking at a.

03:56.760 --> 04:00.190
So we find a way to set it to two and then we move on to G.

04:00.250 --> 04:01.320
We set G to zero.

04:01.340 --> 04:05.820
We subtract 1 and we go to egg then we subtract 1 and we go to our.

04:06.060 --> 04:10.680
We subtract 1 goes to zero and we go to a we subtract 1 again.

04:10.910 --> 04:15.900
So it goes to zero and then we go to M and we subtract 1 and we're done.

04:15.990 --> 04:20.010
And so we don't have to do any check at the end we don't have to see is everything zero or anything

04:20.010 --> 04:20.760
like that.

04:20.940 --> 04:26.920
Let's say somehow would be an example if we had some random letter here like an S like this.

04:26.920 --> 04:30.180
So we'd have to set to 1 and we have another m.

04:30.270 --> 04:33.350
So we just did this M and we crossed it off and set it to zero.

04:33.450 --> 04:35.540
Then we get to an M again.

04:35.900 --> 04:43.290
Well this time we look up a letter and it's going to give us what is the value for m is zero because

04:43.290 --> 04:44.280
zero is falsie.

04:44.400 --> 04:48.210
If we run not look up of letter not zero.

04:48.210 --> 04:49.750
That means this is true.

04:49.770 --> 04:50.970
So we will return false.

04:50.970 --> 04:57.030
So if we ever encounter zero that means that there is a problem because we've exhausted basically what

04:57.030 --> 05:01.060
this represents or the characters that we've gone through in our first thing.

05:01.190 --> 05:02.920
So all we have left is an essay.

05:02.930 --> 05:05.640
There has to be one s over here in order for there to be a match.

05:05.750 --> 05:08.330
And if instead we get to zero.

05:08.360 --> 05:13.220
That means that we're working on a character in the second string that didn't exist in the first string.

05:13.670 --> 05:16.360
So it's a nice simple solution I think.

05:16.410 --> 05:18.540
I kind of like it I think it's kind of cute.

05:18.590 --> 05:25.160
It involves you know just two simple loops does not involve nested loops which you could do easily.

05:25.190 --> 05:30.080
We could start with an A here and loop over the string and then look for it in the second string.

05:30.350 --> 05:34.980
And we could start and end and look for an end in the second string and that would involve nested loops.

05:35.000 --> 05:40.760
And of course we would also have to pay attention to making sure that we were crossing things off or

05:40.760 --> 05:42.680
removing things as we went.

05:42.680 --> 05:45.200
So that we were not you know getting a false positive.

05:45.350 --> 05:49.170
Hopefully you can see how it is a helpful pattern in this scenario.

05:49.280 --> 05:54.530
Any time you have multiple pieces of data and you need to compare them in particular if we need to see

05:54.530 --> 06:01.230
if they consist of the same individual pieces whether it's anagrams or you're trying to see if you know

06:02.210 --> 06:08.380
if one array is equal to another array squared each individual piece or what else have I seen.

06:08.570 --> 06:13.550
If you need to tell if numbers consist of the same digits just in a different order.

06:14.000 --> 06:16.040
There's a lot of applications for this.

06:16.100 --> 06:18.000
Anyway moving on to our next pattern.
