1
00:00:00,130 --> 00:00:05,310
Have everyone the next problem solving pattern will talk about I'm calling multiple pointers again.

2
00:00:05,430 --> 00:00:09,750
It's not really an official name for it but let me just read the definition first.

3
00:00:09,750 --> 00:00:15,450
The idea is that we create pointers or values that correspond to an index or position and then move

4
00:00:15,600 --> 00:00:19,120
towards the beginning towards the end or towards each other in the middle.

5
00:00:19,170 --> 00:00:20,700
Based on a certain condition.

6
00:00:21,030 --> 00:00:23,100
OK so what it really comes down to.

7
00:00:23,250 --> 00:00:30,540
We have some sort of structure linear structure like an array or a string or later on we will talk about

8
00:00:30,540 --> 00:00:34,940
things like a doubly linked list which you may not be familiar with or even a singly linked list.

9
00:00:34,980 --> 00:00:36,420
If you don't know what those are don't worry.

10
00:00:36,420 --> 00:00:42,090
And the idea is that we are going to be I don't know searching for a pair of values or searching for

11
00:00:42,090 --> 00:00:43,540
something that meets the condition.

12
00:00:43,680 --> 00:00:48,960
Usually we're looking for a pair and I'll show you an example in a moment and we use two references.

13
00:00:49,020 --> 00:00:54,690
So we start one reference maybe here and another one here and we work towards the middle towards each

14
00:00:54,690 --> 00:00:55,290
other.

15
00:00:55,560 --> 00:01:01,290
Or we could start something here and another like when I say reference I mean a variable like i and

16
00:01:01,290 --> 00:01:04,410
j which are numbers referring to indices.

17
00:01:04,440 --> 00:01:09,380
So we get start here in J here and then we move them forward in a certain way.

18
00:01:09,480 --> 00:01:12,000
So there's not you know a guaranteed direction.

19
00:01:12,070 --> 00:01:17,640
This is this is sort of a loosely defined one compared to what we saw in the last video over the last

20
00:01:17,760 --> 00:01:20,040
sort of pattern frequency counting.

21
00:01:20,040 --> 00:01:22,980
But this does come up pretty often I'll show you a couple of examples.

22
00:01:22,980 --> 00:01:26,770
So just to recap we have a pointer which is just a variable.

23
00:01:27,150 --> 00:01:32,340
You know we're looking at a specific location in an array or a string usually And we have a second one

24
00:01:32,700 --> 00:01:35,420
and we work towards each other or we work in the same direction.

25
00:01:35,420 --> 00:01:37,970
We work from the end towards the beginning.

26
00:01:38,010 --> 00:01:40,490
It doesn't matter but we use two pointers.

27
00:01:40,500 --> 00:01:43,150
So let's talk about an example where this could make sense.

28
00:01:43,960 --> 00:01:44,950
An example.

29
00:01:45,100 --> 00:01:45,410
OK.

30
00:01:45,440 --> 00:01:52,160
So write a function called Sum Zero which accepts a sorted array of integers so it needs to be sorted

31
00:01:52,220 --> 00:01:59,360
not a sorted but in order sorted from lowest to highest the function should find the first pair where

32
00:01:59,360 --> 00:02:00,990
the sum is zero.

33
00:02:01,040 --> 00:02:07,270
So the first pair where you take one number and you add it to another number and it's equal to zero.

34
00:02:07,280 --> 00:02:09,890
So you can see here you know negative three.

35
00:02:09,890 --> 00:02:11,550
First of all this is a sorted array.

36
00:02:11,570 --> 00:02:13,420
Negative 3 up to positive 3.

37
00:02:13,490 --> 00:02:17,450
And in this case negative three plus three gives us zero.

38
00:02:17,630 --> 00:02:20,810
So we return that pair in an array.

39
00:02:20,810 --> 00:02:25,520
Otherwise like in this case there is no pair that sums to zero.

40
00:02:25,520 --> 00:02:27,000
So we return undefined.

41
00:02:27,050 --> 00:02:28,380
Same thing here.

42
00:02:28,400 --> 00:02:30,100
So how would you approach this.

43
00:02:30,110 --> 00:02:33,750
First of all it's important to note and remember him hitting us a lot but it is sorted.

44
00:02:33,770 --> 00:02:39,040
If it was unsorted then we're kind of out of luck as far as coming up with an efficient solution.

45
00:02:39,050 --> 00:02:43,280
But it is sorted and we're looking for something that sums to zero.

46
00:02:43,550 --> 00:02:49,520
So we know that we have small numbers here and the largest numbers are up here and because of that we

47
00:02:49,520 --> 00:02:56,990
can use two pointers and test for sort of certain conditions to see if we want to move down or want

48
00:02:56,990 --> 00:02:59,250
to move our other pointer up.

49
00:02:59,250 --> 00:03:01,820
But first let me show you the naive solution.

50
00:03:01,850 --> 00:03:06,910
This is the simpler one that has time complexity of all of antiquarks quadratic time.

51
00:03:07,160 --> 00:03:12,620
And you can see right off the bat we have two loops we're using one for loop and a second for loop.

52
00:03:12,620 --> 00:03:18,320
So what this one does is it starts appointer looking at negative 3 and then we have a second loop that

53
00:03:18,320 --> 00:03:21,160
iterates over the entire rest of the array.

54
00:03:21,160 --> 00:03:27,350
The entire rest of the string the structure looking for something that adds to negative 3 and equals

55
00:03:27,380 --> 00:03:27,780
zero.

56
00:03:27,830 --> 00:03:29,610
So looking for three.

57
00:03:29,780 --> 00:03:32,930
So we go all the way through and we happened to find a three.

58
00:03:32,970 --> 00:03:40,130
And so that's a simple example but imagine that there was a three here then we would move on to negative

59
00:03:40,130 --> 00:03:43,490
2 and look through the entire array to find a negative 2.

60
00:03:43,550 --> 00:03:48,810
And if we're talking about a 10000 item array that's a lot of iteration when we have these nested loops.

61
00:03:48,890 --> 00:03:50,180
But this is the simplest way.

62
00:03:50,240 --> 00:03:54,290
You start here and then you compare it to every single other number and then if there's no match that

63
00:03:54,290 --> 00:03:58,750
equals zero you move forward one and compare it to every other number and keep going.

64
00:03:58,970 --> 00:04:00,860
So here's the example of the naive version.

65
00:04:00,890 --> 00:04:01,570
It does work.

66
00:04:01,610 --> 00:04:02,690
If I run this.

67
00:04:02,750 --> 00:04:06,350
So we've got negative for negative 3 and so on we would start here.

68
00:04:06,420 --> 00:04:07,480
We look for a match.

69
00:04:07,490 --> 00:04:10,130
There is no more than we have to get three.

70
00:04:10,130 --> 00:04:11,260
There is no match.

71
00:04:11,300 --> 00:04:13,240
We compare all these different things.

72
00:04:13,370 --> 00:04:19,460
We get to negative 2 and we compare it to every single other item until we hit 2 and we found a match.

73
00:04:19,460 --> 00:04:25,760
So even in this case we had to do a bunch of operations to figure out there was no match for negative

74
00:04:25,950 --> 00:04:27,260
for negative 3.

75
00:04:27,290 --> 00:04:30,400
We have to do a bunch of operations and this is a small array.

76
00:04:30,740 --> 00:04:35,750
So this could benefit from a refactor using multiple pointers pattern.

77
00:04:35,750 --> 00:04:37,000
So here's how it would work.

78
00:04:37,070 --> 00:04:43,310
We would start a pointer here and start another one up here because we know that this is a small number

79
00:04:43,550 --> 00:04:49,030
and this is the largest number and we start by just seeing what the sum is what they add to.

80
00:04:49,130 --> 00:04:54,200
Well negative four plus five that's going to give us a positive number which is 1 and that's too big.

81
00:04:54,200 --> 00:04:55,460
We're looking for 0.

82
00:04:55,490 --> 00:04:56,970
So one is greater than zero.

83
00:04:56,990 --> 00:04:58,110
That's not what we want.

84
00:04:58,370 --> 00:05:04,730
So what we would do then is move this pointer down to 2 because this is the small number we're going

85
00:05:04,730 --> 00:05:05,610
to get.

86
00:05:05,630 --> 00:05:09,490
So maybe just maybe there's a four here but there's not.

87
00:05:09,680 --> 00:05:14,360
But our code doesn't know that so it's going to look one below and hope that now we're going to sum

88
00:05:14,360 --> 00:05:15,020
to zero.

89
00:05:15,080 --> 00:05:17,550
So we add negative four into.

90
00:05:17,760 --> 00:05:22,460
Well this time it's too small because that's negative too and that's less than zero.

91
00:05:22,700 --> 00:05:27,500
So that means we're going to add one to the left side because there's no match for negative four.

92
00:05:27,500 --> 00:05:29,160
Remember it's a sorted array.

93
00:05:29,450 --> 00:05:30,320
So we go up.

94
00:05:30,320 --> 00:05:32,810
Now we're looking at negative three in two.

95
00:05:33,070 --> 00:05:35,540
Well we add them together it's still negative 1.

96
00:05:35,660 --> 00:05:40,570
Let's not still negative 1 it's still negative it's negative 1 which is less than zero.

97
00:05:40,580 --> 00:05:46,740
So what that means is that we're going to try and add one to the left side which gives us negative 2.

98
00:05:47,060 --> 00:05:51,310
And now we add negative 2 and 2 and we get zero.

99
00:05:51,410 --> 00:05:52,850
And that is the first pair.

100
00:05:52,850 --> 00:05:55,060
And we return negative to comment 2.

101
00:05:55,370 --> 00:06:01,280
So WAY WAY fewer operations compared to using a nested loop and starting here looking at every single

102
00:06:01,280 --> 00:06:04,410
other number then moving to here looking at every other number.

103
00:06:04,490 --> 00:06:11,140
And this is a simple example where we find it relatively quickly because there is only what 7 ish numbers.

104
00:06:11,150 --> 00:06:12,100
I didn't count them.

105
00:06:12,170 --> 00:06:12,900
Is it 8.

106
00:06:12,980 --> 00:06:13,310
OK.

107
00:06:13,310 --> 00:06:14,180
It is 8.

108
00:06:14,600 --> 00:06:19,160
So it's really small compared to 10000 items where it would save us a lot of time.

109
00:06:19,160 --> 00:06:25,580
So here is that refactored solution where we have two pointers one starting at the left index of 0 and

110
00:06:25,580 --> 00:06:29,480
the other starting at the last index in the array length minus 1.

111
00:06:30,020 --> 00:06:32,310
And I'll take you over to the code in just a moment.

112
00:06:32,420 --> 00:06:37,890
But you can see time complexity is linear it's o of N much better than 0 of squared.

113
00:06:37,910 --> 00:06:42,470
So here's the refactored version and we've got left to zero.

114
00:06:42,560 --> 00:06:43,070
Right.

115
00:06:43,080 --> 00:06:48,220
Set array length minus one so left is going to be this index zero.

116
00:06:48,400 --> 00:06:48,770
Right.

117
00:06:48,790 --> 00:06:50,650
Is this index over here.

118
00:06:50,920 --> 00:06:52,650
This is a slightly different array.

119
00:06:52,690 --> 00:06:53,980
I put 10 in here.

120
00:06:53,980 --> 00:06:58,020
Now it looks like our first pair should be negative 3 3.

121
00:06:58,540 --> 00:07:03,110
So we start and we check the sum of array of left and array of right.

122
00:07:03,220 --> 00:07:08,710
So negative four in 10 that's going to give us 6 and we check first is it 0.

123
00:07:08,740 --> 00:07:09,810
Because then we're done.

124
00:07:10,060 --> 00:07:11,050
No it's not.

125
00:07:11,050 --> 00:07:15,610
So if some is greater than zero which it is we're going to subtract one from right.

126
00:07:15,640 --> 00:07:19,840
So right was this index which I'm not going to count my position but we subtract 1.

127
00:07:19,990 --> 00:07:25,930
So now we're looking at this place 3 and we're adding 3 to negative 4 so we start the loop again because

128
00:07:25,930 --> 00:07:27,120
nothing else happens.

129
00:07:27,150 --> 00:07:30,440
You have an if and else if in an else only one of those is going to run.

130
00:07:30,490 --> 00:07:34,090
So we subtracted one from right moving it down to here and start over it.

131
00:07:34,090 --> 00:07:39,530
So now sum is equal to negative 4 and 3 which is negative 1 now.

132
00:07:39,790 --> 00:07:41,310
So this time it's not zero.

133
00:07:41,410 --> 00:07:42,720
It's not greater than zero.

134
00:07:42,940 --> 00:07:46,620
So this else runs which means we add one to our left.

135
00:07:46,690 --> 00:07:49,180
So now left moves up to negative 3.

136
00:07:49,210 --> 00:07:54,190
Next time through some negative three and three which gives us zero and we're done.

137
00:07:54,280 --> 00:08:00,460
If sum is zero return array of left column array of right as an array a new array.

138
00:08:00,760 --> 00:08:02,220
And just to prove that it works.

139
00:08:02,360 --> 00:08:04,940
There we go negative 3 comma 3.

140
00:08:05,230 --> 00:08:12,370
And if we give it something that doesn't have a pair like let's remove that 3 and change this to be

141
00:08:12,370 --> 00:08:13,850
a 5.

142
00:08:14,200 --> 00:08:15,660
There's no pair here right now no.

143
00:08:15,670 --> 00:08:16,870
We have one a negative one.

144
00:08:16,960 --> 00:08:17,820
Remove that one.

145
00:08:17,980 --> 00:08:18,510
OK.

146
00:08:18,550 --> 00:08:22,560
There should be no pair now and we get undefined which is how it's supposed to work.

147
00:08:22,690 --> 00:08:27,940
So we stop because our while loop runs well left is less than right.

148
00:08:27,940 --> 00:08:33,940
So if they crossover at some point that means that we've exhausted every possible pair We've tried here

149
00:08:33,940 --> 00:08:35,080
and here that didn't work.

150
00:08:35,110 --> 00:08:37,360
That was too large so we subtracted one from right.

151
00:08:37,360 --> 00:08:38,960
We tried five and negative four.

152
00:08:39,010 --> 00:08:39,760
Still too large.

153
00:08:39,760 --> 00:08:45,910
So we went to zero and negative for too small so went to negative 3 and zero two small two into negative

154
00:08:45,910 --> 00:08:49,250
2 and 0 two small and two negative one is zero too small.

155
00:08:49,330 --> 00:08:56,140
So then we went 0 0 and we have to stop before there otherwise if we try and do you know zero minus

156
00:08:56,140 --> 00:08:58,210
zero What are we going to get.

157
00:08:58,420 --> 00:08:58,940
Zero.

158
00:08:58,960 --> 00:09:00,090
Which is what we're looking for.

159
00:09:00,100 --> 00:09:01,780
But that's a false positive.

160
00:09:01,830 --> 00:09:08,050
And if it wasn't zero it could be any other number we subtract it by itself or subtract it from itself.

161
00:09:08,050 --> 00:09:08,920
We're going to get zero.

162
00:09:08,980 --> 00:09:13,900
So we have to stop there and that's why we have while left is less than right rather than less than

163
00:09:13,900 --> 00:09:15,490
or equal to right.

164
00:09:15,520 --> 00:09:16,930
So we have to have that.

165
00:09:17,050 --> 00:09:18,180
That's our failsafe.

166
00:09:18,430 --> 00:09:22,540
And that means that we're done and we could explicitly return undefined at the end.

167
00:09:22,600 --> 00:09:24,080
But this works fine too.

168
00:09:24,520 --> 00:09:24,850
Yep.

169
00:09:24,850 --> 00:09:30,400
So that is using two pointers in this case working from the far left side and the far right side towards

170
00:09:30,400 --> 00:09:31,250
the middle.

171
00:09:31,300 --> 00:09:32,740
That's not the only way of doing it.

172
00:09:32,740 --> 00:09:38,050
Next I'll show you a problem where we actually start from the same side and just look ahead rather than

173
00:09:38,050 --> 00:09:39,860
going from the left and the right simultaneously.

174
00:09:39,880 --> 00:09:42,000
We just have two pointers on the left side.

175
00:09:42,160 --> 00:09:42,760
That's next.

